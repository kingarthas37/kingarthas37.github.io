
var Memcached = require('memcached');

var Cache = function(host,port,parentKey){
    if(host && port) {
        var server = host + ':' + port;
        this.memcache = new Memcached(server);
        this.parentKey = parentKey;
    }else {
        throw new Error('host : ' + host + ' port : ' + port + ' is not right');
    }
};

Cache.prototype.get = function get(key,cb){
    if(this.parentKey) {
        key = this.parentKey + ':' + key;
    }
    this.memcache.get(key,function(err,data){
        cb(err,data);
    });
};

Cache.prototype.getDesc = function getDesc(key,cb) {
    if(this.parentKey) {
        key = this.parentKey + ':' + key;
    }
    this.memcache.get(key,function(err,data){
        cb(err,data);
    });
};

Cache.prototype.set = function set(params,cb) {
    if(params && params.key && params.value && params.left) {
        var _this = this;
        var key = params.key;
        if(this.parentKey) {
            key = this.parentKey + ':' + params.key;
        }
        _this.memcache.set(key,params.value,params.left,function(err){
            if(err) {
                cb(err);
            }else {
                if(params.desc){
                    _this.memcache.set(params.key + '_desc',params.desc,params.left,function(err){
                        if(err) {
                            console.log(err);
                        }
                    });
                }
                cb(null);
            }
        });
    }
};

Cache.prototype.nget = function nget(key,cb){
    this.memcache.get(key,function(err,data){
        cb(err,data);
    });
};

Cache.prototype.nset = function nget(params,cb){
    if(params && params.key && params.value && params.left) {
        this.memcache.set(params.key,params.value,params.left,function(err){
            cb(err);
        });
    }
};


module.exports = Cache;

