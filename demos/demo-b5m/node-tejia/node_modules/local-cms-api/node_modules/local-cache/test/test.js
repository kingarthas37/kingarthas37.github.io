var should = require('should');
var Cache = require('../index.js');

var cache = new Cache('10.10.100.15','11311','tmp_test');

describe('Cache',function(){

    describe('#constructor()',function(){
        it('creating cache is right',function(done){
            var cache2 = new Cache('10.10.100.15','11311','tmp_test2');

            cache2.parentKey.should.equal('tmp_test2');
            done();
        });
    });

    describe('#constructor()',function(){
        it('host or port is empty',function(done){
            (function(){
                new Cache('','','tmp_test2');
            }).should.throw();

            done();
        });
    });

    describe('#constructor()',function(){
        it('host or port is not right',function(done){
            done();
        });
    });


    describe('#set()',function(){
        it('set a cache value',function(done){
            var key = 'abcd';
            var value = 'test';
            var desc = 'shit';
            var left = 60;
            cache.set({
                key : key,
                value : value,
                desc : desc,
                left : left
            },function(err){
                done(err);
            });
        });
    });

    describe('#get()',function(){
        it('get a cache value',function(done){
            var key = 'efg';
            var value = 'test';
            var desc = 'shit';
            var left = 100;
            cache.set({
                key : key,
                value : value,
                desc : desc,
                left : left
            },function(err){
                if(err) {
                    done(err);
                }
            });

            setTimeout(function(){
                cache.get(key,function(err,data){
                    console.log(data);
                    if(err) {
                        console.log(err);
                        done(err);
                    }else {
                        data.should.not.be.empty;
                        data.should.eql(value);
                    }
                });

                cache.getDesc(key,function(err,data){
                    if(err) {
                        console.log(err);
                        done(err);
                    }else {
                        data.should.not.empty;
                        data.should.eql(value);
                    }
                });

            },100);
        });
    });

    describe('nget()',function(){
        it('nget and nset is ok',function(done){
            var key = 'hij';
            var value = 'xxx';
            var left = 100;
            cache.nset({
                key : key,
                value : value,
                left : left
            },function(err){
                if(err) {
                    done(err);
                }
            })

            setTimeout(function(){
                cache.nget(key,function(err,data){
                    if(err) {
                        done(err);
                    }else {
                        data.should.not.be.empty;
                        data.should.eql(value);
                    }
                });

            },100);


        });
    })
});
