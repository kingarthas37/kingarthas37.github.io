
var request = require('request');
var async = require('async');
var _ = require('underscore');
var md5 = require('blueimp-md5').md5;
var Cache = require('local-cache');


function CmsApi() {
    this.apiConfig = [];
    this.cacheKeyPrefix = null;
    this.cache = null;
}

CmsApi.prototype = (function () {

    function _url(base_url,action,params){
        var url = base_url + '?a=' + action;

        if(params) {
            var p = _.map(params,function(v,k){
                return k + '=' + v;
            });

            if(p) {
                url += '&' + p.join('&');
            }
        }
        return url;
    }


    function _handle_properties(properties, config) {
        var obj = {};
        var self = this;

        _.each(properties,function(s){
            var key,method,action,params,data,cache = null;
            if(_.isString(s)) {
                key = s;
                method = 'get';
            }else if(_.isObject(s)) {
                key = s.key;
                params = s.params;
                method = s.method && s.method === 'post' ? 'post' : 'get';
                data = s.data;
                cache = s.cache;
            }

            action = config.actions[key];

            if(action) {
                obj[key] = (function(action,method,params,data,cache) {
                    return function(callback) {
                        var url =  _url(config.base_url,action,params);
                        var r = null;
                        if(method === 'get') {
                            r = self.get(url,cache);
                            r(callback);
                        }else {
                            r = self.post(url,data);
                            r(callback);
                        }
                    };
                }(action,method,params,data,cache));
            }else {
                throw new Error('no action for [' + key + ']');
            }
        });

        return obj;
    }

    function _async_config(apis) {
        var obj = {};
        var self = this;


        if(apis) {
            _.each(apis,function(value,name){
                if(self.apiConfig && self.apiConfig[name]){
                    var config = self.apiConfig[name];
                    var _obj = _handle_properties.call(self,value,config);
                    obj = _.extend(obj,_obj);
                }else {
                    throw new Error(name + ' does not exist!');
                }
            });

        }

        return obj;
    }


    return {
        constructor : CmsApi,
        config : function(apiConfig,cacheConfig) {
            this.apiConfig = apiConfig;
            if(!cacheConfig.disable) {
                if(cacheConfig) {
                    this.cacheKeyPrefix = cacheConfig.prefix + "-" + process.env.NODE_ENV;
                    this.cache = new Cache(cacheConfig.host,cacheConfig.port,this.cacheKeyPrefix);
                }
            }
        },
        getConfig : function() {
            return this.apiConfig;
        },
        get :  function(url,needCacheData){
            var _this = this;


            return function(callback) {
                var cacheKey = null;
                var desc = null;

                if(_this.cache && needCacheData && !_.isEmpty(needCacheData) && needCacheData.left > 0) {
                    cacheKey = _this.cacheKeyPrefix + ':' + md5(url);
                    if(needCacheData.desc) {
                        desc = needCacheData.desc;
                    }else {
                        desc = url;
                    }
                }

                if(cacheKey) {
                    //use cache
                    console.log('preparing using cache : ',cacheKey);
                    _this.cache.get(cacheKey,function(err,cachedData){
                        if(err || !cachedData || _.isEmpty(cachedData)) {
                            request(url,function(error,response,body){
                                if(!error && response.statusCode === 200) {
                                    var info = JSON.parse(body);
                                    var data = info.code === 0 ? info.data : {};


                                    if(data && !_.isEmpty(data)) {
                                        _this.cache.set({
                                            key : cacheKey,
                                            value : data,
                                            left : needCacheData.left,
                                            desc : desc
                                        },function(err){
                                            if(err){
                                                console.log('setting cache failed : ',cacheKey,err);
                                            }else {
                                                console.log('setting cache success: ',cacheKey);
                                            }
                                        });
                                    }
                                    callback(null,data);
                                }else {
                                    callback(error);
                                }
                            });
                        }else {
                            console.log('using cache success : ',cacheKey);
                            callback(null,cachedData);
                        }
                    });
                }else {
                    //not use cache
                    request(url,function(error,response,body){
                        if(!error && response.statusCode === 200) {
                            var info = JSON.parse(body);
                            var data = info.code === 0 ? info.data : {};
                            callback(null,data);
                        }else {
                            callback(error);
                        }
                    });
                }
            };
        },
        post : function(url,postData) {
            return function(callback) {
                request.post(url,function(error,response,body){
                    if(!error && response.statusCode === 200) {
                        var info = JSON.parse(body);
                        var data = info.code === 0 ? info.data : {};
                        callback(null,data);
                    }else {
                        callback(error);
                    }
                }).form(postData);
            };
        },
        parallel : function(apis,callback){
            async.parallel(_async_config.call(this,apis,this.apiConfig),callback);
        }
    };
}());



module.exports = new CmsApi();


