%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Eastern European
%%Title: 09.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Honza
%%CreationDate: 2/3/2015
%%BoundingBox: 0 0 643 643
%%HiResBoundingBox: 0 0 642.7657 642.7657
%%CropBox: 0 0 642.7657 642.7657
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.1 x420 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Bez názvu-1</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2015-02-03T21:08:34+01:00</xap:CreateDate>
         <xap:ModifyDate>2015-02-03T21:10:01+01:00</xap:ModifyDate>
         <xap:MetadataDate>2015-02-03T21:10:01+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBOgE6AAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABOgAAAAEA&#xA;AQE6AAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FUv1XzBoukmNdQvI4Jpq/V7cnlPKR1EUK8pJD7IpxVAf4h1u7/45GhTOh3S51KQafCw/wBT&#xA;jPdqfZ7cYq4ad5xuv97NYgsYzv6enWoMq+xnu2uEf5+guKrh5RtpADe6lqd5KKVkN7NbV3rvHZNa&#xA;xb/6mKoC+0j8r9OJfVYtKR03MuovDI68BQnnclmFB13xVK01z8grSMiO/wDKsEZJYhZdOQE03NAR&#xA;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&#xA;+SNW12+876lr2ni4vCbfy/YvdRerBp8BZEk9IlX9a5LPJQryVX4ihZwVWat5rluhx0TSbzUJDt6s&#xA;0b2Nsp7FpbpY3ZfeGOT5Yqt/wze6q4l8z3CXcKtzi0a3BSxWnT1uXx3TD/iyidD6YYVxVU8ycDqX&#xA;lmBv7uXVCCgGxMVhdzJXcUo8Qbv0xVNtRsYb/T7qxmFYbuGSCQf5MilT4djiqS6PbWPmbyTo0mqw&#xA;/WFvLK0uzyJV1laJXEiSIVdJFJqroQQehxVyxebdHPGFh5g05fspKyQaigHYSHjb3HgOfpH+Z2O+&#xA;KtyedPLojaHWPU0oMCkyapA9vDuPiT13H1aTbrwkYYqkPlvzv5R03Vj5cj8wafc6dJGZ9CmS8hkK&#xA;RqQJLNyHP91yUw13aPb/AHWSVWdwXNvcKWglSVQaFkYMAfDbFUl1nRruK7bXNDVV1dVC3Vqx4RX0&#xA;SdIpT+zIv+6pf2ehqpIxVZNFp/mzR4L2xmksr63cvZ3RQC5s7pPheOWMnqN0liJowqPA4qi/L2ty&#xA;6hHNa30ItNZsSqajZg8lBYHhLExoXhl4kxt7FTRlYBVNsVdirsVdirsVQmrarZ6Vp0+oXjFbe3Wr&#xA;BQWdmJCoiKN3d2IVFG7MQBucVSjRrV7GC88y+YHSDUbmL1Lsuw9OytIqulsrdOMYJaRv2nqfs8QF&#xA;UgsdavNZ1s6jb6e19qNuSunWMrejbabFItPWvJSH43c6NvGitJHGwQqvJ2ZVkK+WL+9JfXdXuLqv&#xA;SzsmfT7Vfl6LfWHqOvqTMv8AkjFUn81p5L8o6ZJe2ug2dxq5ikeyto7eMzymIVZ3k4l+Cchyc9yF&#xA;FXZVZVix8or5Hu9I8wXVkmqza0r2vnKMRJKzzyiS6W4gTj0g/eQrGv2o+CAFlXFWfweT/Jd1BHe6&#xA;ZaQ2iXKiWO+0l2smkV/iDeraNEXVq13JBxVz2vm3SfjtLka9ZLu1ndCOG9C06Q3CCOF6dllRa/tS&#xA;Yq1fXtj5q8qa1YWTMtzNaT2dzZzKYriCWaFlCSxsOSn4qg0oRutRQ4qnOk6hHqOlWWoRf3d5BFcJ&#xA;TpxlQOP14qlGgzW8N55qvZZFitf0l6jzyMFQLBp9rFIxLBQoRomBr4Yqs/TOv61T/D8KWenN/wBL&#xA;q+Rj6i+Nragxu6ntJIyL0ZVkU4qqL5J0ucctYnudbkP2xfyloG9jaR+naf8AJKviTirEPNWm6BrW&#xA;qWXkTRtNtYtOuJ+XmO4t4UjVba2Cyy2qGMJ8UlY45SD8CyAdWFFWvLGneW9C1e88ga3ptnJYJKJf&#xA;Lc9xCkiy2t0HaO1kMgf95D6UscfI1eNPFTVVmLeStKhq+kS3GiS/sHT5SkK/9GjiS0P0xVxVTk1n&#xA;W9D31yEXumj7Ws2SMDEv811a1dlUd5I2Yd2WNRiq7Xp7aa78rX0UizWg1LmlxGwZCs9hdQxsGWoY&#xA;M0ygb98VTfVtQi03S7zUZqCKzgkuJCTQcYkLmp+QxVJtOvbLyv5U0OwvS31qO0t7O2so1MlxNLFC&#xA;qmOOMCrEcfiOwUbsQKnFXJa+b9W/eXtyNAsm3Szs/TnvCvhNcyCSFKg/EkSGh+zKcVXTeUPJlpby&#xA;Xmp2kN0lsplkvtVc3jRqg5M3rXbSsiildiAMVYAfKK+ebzV/MFpZppU+jKlr5OQwpEyXEYjunuJ0&#xA;K7iY+nC0bfZj5oQGZsVZP5TXyV5v0yO9udBs7fVxEj3ttJBF68RlFQ6ScQ/Byp4uN6gqaOrKqqct&#xA;5Yv7Ih9C1e4tadbO9Z9QtW+frN9YSg6enMq/5JxVj99rV5o2tfpG4sGsNQuCF1Gxib1rbUoo1p61&#xA;nIAnK7gRf7t1WSRFKBWojKqn2s2r30Fn5l8vuk+o20XqWhRh6d7aS0d7Zm6cZAA0bfsvQ/Z5Aqpv&#xA;pOq2eq6dBqFmxa3uFqoYFXVgSro6ndHRgVdTurAg7jFUXirsVdirsVY1Gv8AiDzIZ2+LRtBlZIF/&#xA;Zn1EDi8nTdbUHgu/94W25RqcVSLzGL/zx5iPlvTLprXy7ok0b+ZL+L7c10oEsdjA/QNGCskrCvEl&#xA;RswxVnOnadp+mWMdlYwJbWkApHEgoo7k+5J3JO5O5xVJn82fpGR7XyvEuqTKSkmokkafAw2PKcbT&#xA;MpH93DyNdmKV5Yqlt/5fjtrjSbe5uGvtS1nUoW1O/kADtHYRy30ccaA0igWa3RQi7fEeXJmYsqm/&#xA;nlaeVNRuV/vNPjGowgCtZLB1uoxTfq0IGKqE+k6pol1LfeX4xc2U7tLe6EzBAXYlnlsnYhIpHJJa&#xA;N6I7b8kPJmVTHR/Mekas0kVpNS8gAN1YTAxXMNenqwvR1r2NKHsSMVUNf8vPeyR6lpky2Ov2q8ba&#xA;+4hg8deRt7hf92QOeq9VPxKQ2+KpH5B8x20HlbUrfUUOnv5VmuLa/tZDX6tbxL9YhANF5RpbOirJ&#xA;Sj8ajbFUD5G0e98w6TZaprMZi0iZpNQttHehE9zdztdNc3PZ0R5KW8fQKA7fEVEarPry8s7K2ku7&#xA;yeO2tYRylnmdY40XxZmIAHzxVj76hrHmIejpHraXo7VE2sSoY7iVf5bKGQVUH/f0i0p9hWqHVVbo&#xA;Ok6fZ+abuCwhWGy0qwgtraNa/DLdTSz3RYmpZpOEDMxNSdz44q7zRpFhea7pKX8AuLLUY7nTbiE1&#xA;AL8RewScloytEbN+DAgqWqDWmKtpqGteXP3OriXVNHX+61mJDJcwr/LeQxirgf7+iX/XVaFyqyGz&#xA;vLO9to7uznjubWYcop4XWSN18VZSQR8sVYJ550a90HRr7UtDiaXTkdNQutJXdYri1lW6juLZTsit&#xA;LEPrEY2IJkUc+QkVRXn3zLa3PlTTYdMQ6i/muW3t9PtYzT6zbzD6xOCaHhG9qjhnpReVTiqeeXvL&#xA;0li8mo6nOL/X7taXd9x4qiV5C3t1NfTgQ9F6k/ExLGuKojWPMekaS0cV3NW8nBNrYQgy3M1OvpQp&#xA;V2p3NKDuQMVS+HSNU1q6ivdfQW1lA4lstCVg4DqeSS3jqSkkiEApGtURt6ueLKqreRV5eU9Ouj/e&#xA;ajGdSl2p+8v3N04pt0aYjFUosPLyXNzq1vbXDWOpaRqU76ZqEdC6x36R30qSoaCWF5rh1KNseII4&#xA;sqlVUyTzZ+jpEtfNES6XMxCR6iCTp87HYcZztCzE/wB3NxNdlL05YqnOo6dp+p2MllfQJc2k4pJE&#xA;4qp7g+xB3BG4O4xVg3lwX/kfzEPLep3TXXl3W5pH8t38v24bpgZZLGd+haQBpImNORDDdjiqeyL/&#xA;AIf8yCdfh0bXpVSdf2YNRI4pJ02W6A4Nv/eBduUjHFWS4q7FXYqk3mrVLmzsI7Wwbjq2qSiy00kB&#xA;gssiszTFT1WCJHlYdwtOpGKpZ5juZfKvlS00ny7EH1e8dNL0GObk6m6lVm+sXBUMzJEiSXExpVgr&#xA;dzirEvy6tfPsnkiyt9M1fTVmsmlttXtmtZYryPUY5D9dWe5knv0aVp2d2k9GjVDAcWGKp02nSxAn&#xA;zjpeo6xEN5LgTLqVlTtzsbeO05n3Fk1PHFWaaVqOlX9kk2lzxT2i/u1MJBVCmxjIH2WXoVO4xVLt&#xA;W5/4p0GpX0uN4KGlfV9NePGu9eHPpiqL8y+j/hzVfXqYfqdx6oXrx9JuVPoxVX0oEaXZg7EQR1H+&#xA;wGKpJ5pm8mzXEVrqkYu9WhHO0gs0lk1GIN+3Ebb/AEiAGlPUBVfFsVSdLf8AMxSG0ImG3BAFv5lm&#xA;hmKrXqn1BJJm2/37cE+OKvN/zG/xs3mgi8k0yW3is7X/ABuLFLn6qLAXitZ/XFdnJAf1WYIeX1f1&#xA;eWxXFXpskX5vvs82j/UzuG04yw3XHsIzdJdQE/6ygYq1ZSeWbG9hu/Mtve22qIy+hf68yzRLIxoD&#xA;DNE0lhA7E0Cx+mx/lxVnIIIqNwehxVI9Ar+mvMvPhz+vw8KU5+l+j7WnLv8Ab50xVvzB6P6W8teo&#xA;CX/SUnokV2b9G3m5p/k8sVTskAVOwHU4qwa+k8q3t7Nc+Xbe9utVdy097oDCGN5AKEzzu0VhO69C&#xA;srOw/lxVuCH83I2JW70qOyHxepqQe5ugB/OLRLGAfQT/AFVeXflpH58HmhXt7nSo7K4s71vJH1uC&#xA;6+rGzN473YtEWVGQNJ6LKHJb0PT47KwCr02S2/MtmZtc/wBItTsbfy5PFbsw/wAr66kUqeNY7oHr&#xA;iqbeVrnydDcy2mmxfUtXlXndW96kkeoyhDT1JGuf386qTT1OTL4NiqeaqCdLvANyYJKD/YHFUP5Z&#xA;9L/Dek+jyEP1O39MNTlx9JaVp3piqF0nn/inXqFfS42YoKV9X025cqb14cOuKphq+o6TYWMk2qzw&#xA;wWbfu3M5AVy+wjo32i3QKNzirDE06WTfybpeo6PG28dw0y6dY0pRuFjcx3fA+/1Ja9a4qkv5i2vn&#xA;6PyTe2+p6vprS3rRW2k2y2sst5JqMkg+pLBcpPYIsqzqjrJ6NFpyI4qcVZb5cuZfNPlS70jzFGE1&#xA;ezZ9L15IeSKLqJVb17csqsqyo6XEJpVQy9xiqZ+VtTubywktb5g2raXKbLUiBxDSoqsswXss8TpK&#xA;o7BqdRiqc4q7FWPaav6U80XuqsK2ulK2maf0oZSVkvZVPccljh8Q0b/zYqlOizjzD+Y+qakRy07y&#xA;zCdL05tirXdw3K/kHcNH6McQ/wBl/NiqhPpeo6R5+1PUdGUyS6hbRX0+mlgqXgiPoXCxk0WOaICF&#xA;42OzGRlfqHRVmGj61p+r2n1mzcngxjngkUpNDKtC0U0bfEjrXcH59MVQmreV7S8uv0jZyvpmtKoV&#xA;NStqB2C/ZSdD8E8f+S4NP2Srb4qx7UdfvEv9Gh1uFbTVtN1CJ3EbH0Lu3ukew9e2JJPFJbxDJG3x&#xA;RnrVeDsqnvnluXlW/tAaPqSrpsR8Hv3W1Vv9iZuR+WKoVr7U/MrvFo9w1joKsUm1iOhmuSNmSyqC&#xA;qx9jOa1/3WOjhVO9K0bTNJtzb6fbrAjtzlIqzyOesksjEvI57s5JPjiqX6xr863n6G0VFutbdQ0h&#xA;YFoLONuk10VIPT7EYPKQ9KLydVUn8geW7FvK9/Nds9+PM8091eXFweT3FvMPRhL7Cge2VG4D4VLE&#xA;KAKDFUu8lalfeWNDt7bVXafy/bPLZfpE0H1GWzla2kWcbH6tI8ReKSlIw3FuKBTir0MiKaIghZIp&#xA;FoQaMrKw+4gjFWNvoN9oH+keWE52K7zeXWbjCV6n6kzbW8nhH/dN0ohJcKqPlrXNP1HzNeXFk5Nt&#xA;qVlDLGjqySLc2cskF5HKjUZJIhJArKRUd8Vd5s1uwsNe0h72QrbWCXF+4jUySNOwWytoUjQF3eb6&#xA;3IEVRuVxVWj0LUdfIufMw9KxbeDy4jAwhe31512uH8Y/7odKPQPirI1WGCEKoWKGJaKooqqqjoOw&#xA;AGKvPvOd9d+avL91b6bK0GgXLRWUV8AQb6e6mW3j9Ko3s0aQO7dJlFB+7qXVTH8wPLdkPKtnJas9&#xA;iPLUsF1Z3NuQJLaCAelM0ddjwtmchWqrEAMCNsVTbR/MMxvRoutotpraqTEV2t72NBvNaklj/rxE&#xA;84z1qvF2VTDVtF0rV7YW+o2yXEasHiLVDxyD7MkUi0eORf2XQhh2OKpI+paj5XcDWbg3nl1iFi1d&#xA;x+/tCxoqXnEUeLt9Y24/7s7yYqivIpC+VbCz/b0xW0yQ+L2Dtasf9kYajFUj03X7uS/1iLRYVu9V&#xA;1LUJXUSMfQtLe1VLD17lga8Hls3Mca/FIelF5OqrIdJ8r2lndfpG8lfU9aZSr6lc0LqG+0kCD4II&#xA;/wDJQCv7RZt8VRes63p+j2gub1yA7COCFAXmmlb7MUMa/E7tTZR8+mKsPt9M1LV/P2majrKmOXT7&#xA;aa9h00MGSzEp+r26yFarJNMGmeRhspjVUrQu6qvrVx/h78x9L1ILx07zPCNK1JtgqXdu3OwkPctJ&#xA;60kJ/wBj2XFU21P/AHFeaLHVF2tNVC6ZqFBsso5SWUzHsORkh8WaRP5cVZDiqX+YNVOk6Leagsfr&#xA;TQRk29vWhlnb4YYgfGSRlQfPFUrnE/lfyUIrcrc6nFGkEDuKLcajdOEV5KdPWupeTntUnFVnkHRI&#xA;tHstRtImMii94mRq8nMNtBbmR/F39Hkx7kk4qitW/dea9BnANZUvbMmm3GREuDX6bQYqq6t5Ztry&#xA;6Go2k0mmawqhF1G24h3Va8Y50YNHNGORorqeNSVKnfFUMmr+Z9NXhrGm/X4l66jpI5DiP2pLORvW&#xA;T/ViabFUl856n5A8yaFNpmp6zDo90wLWU96Tp91bzUKLLHHdehL+1xYU3Ule+KsLX8w/L3ni50bR&#xA;tZ1qw0+30dWn81M11DDFcXql7SO2tnMg9SGakspZa/uzH0ZhRV6dH5z8vNCkejiXVkACwLpcDzw0&#xA;A+FROgFsm3TlIoxVpovNusfDMw8vae32o4mSfUHB7GQcoLfwPD1D/K6nFV2qW9h5W8m6vNpcAt0s&#xA;7S6vKrVpHlSJnaR3Y85JGK1Lu3I9ziqbaVYRadpdnp8IAhs4I7eMAUAWJAgoPkMVSvy2I/0l5ngX&#xA;eKPVAAhGw9WwtJnA67M8rN8ziqkPLmo6QxfyzPHFa7k6HdFvqdfC3kQM9r8lV4x2jrviq8ecEtRx&#xA;1vTrzSnH2pWia5tqDq31i29VEX3m4H2xVhvm/wAweU9L1mz88aNrNlMbGTh5hsra5hkM9jKqxyzh&#xA;ELMZLdfTlbju6IAa8UxVvypr/lPVddvPPWsaxZQJdEW/ly1uLmKMxWMPNI7lkcp+9uC8siEiqxvQ&#xA;U5OMVZk/m0XPwaJpt3qkh2WX0mtbUbbObi5EaunvCJD/AJJxVTby1fawwfzRPHcW1aroltyFltuP&#xA;rDNR7oj/ACwsf/FdRXFVXzJwOpeWYG/u5dUIKAbExWF3MldxSjxBu/TFU11Oxh1DTbuwmAMN3DJB&#xA;ICKjjKpQ1FR2OKpPpNvY+Z/Jejy6pD9YS8s7W7JYlZFlaJZBIkikOkik1DqwYHocVaEXmzR1CwMP&#xA;MNgvSOZ0g1BF7BZKLBceA5+mabs7HFW5fOnl5YXj1gS6UjApOuqQPBBQj4lNw4Ns4p14yEYq8yf8&#xA;w/L3ke61nR9G1mw1C31gLP5VZbqGWK3vWKWkltcuJD6cMNYpQTT92JOrKaqsz8mal5A8t6DDpmma&#xA;zFrF0oDX09kTqF1cTcQjSyR2vryfs8VFNlAXtiqdPq/mfUl4aPpv1CJumo6sOI4n9qOzjb1n/wBW&#xA;VocVROleWrazuv0hdzSanrBUodRuePNEanKOBFCxwoeIqqAcqDkWO+KqWkkS+bNfnNeUSWVmPDjG&#xA;klwPxujiqE8/6LDq9lptrK/pqb3iJB9pDNbT24dPB09bkh7MAcVVIBP5q8kmK4YWupzRPBNIgqLf&#xA;UbVyjPHXr6N1FyQ96A4qmnl/VTq2i2eoNH6M08YNxb1qYp1+GaInxjkVkPyxVAeYf9L1vQtI6o80&#xA;mpXKHo0OnheH0rdz27j5Yq1qv+nea9H07rDYpNqlzT+dR9XtkYeDGaRx/lR4qqeXHcaj5htmO0Go&#xA;gxV6lJrS3mrSg25u4+jFWtW/e+a9BgBNYkvbwiu3GNEtzX6bsYq6/wDMrm9l0vQ7X9KapDQXI5+l&#xA;a2xI5AXM9H4sQQfTRXfcHiFPLFVMeWL+9JfXdXubqvSzsWfT7Vfl6D/WHqOokmZT/KMVSjzYPJfk&#xA;3SZtQttAs59VkR/qVpDbxevcSKpqWfiX4Ly+NzXrQVZgpVYtF5QTyBc6Pr0tnHqU2qq9r5wSOFHM&#xA;k8nqXi3FvGq9ID6kSRru0fBAGZUxV6BD5R8l3cCXum2cFstygkjv9LY2byI4qrCe0aJ2Ug1+1TFW&#xA;ms/NmkgyWV1+nrRdzY3npxXYFd/RuUVI3oPsrKlSesoxVq9vbLzT5W1vT7Pml3La3FndWM6mK4hl&#xA;mhZQkqHda1qrCqsN1JG+KpzpOoR6jpVlqEX93eQRXCU6cZUDj9eKpV5daJb/AMz3ZYLBJqfL1WNF&#xA;pDYWsMhqQKBXhYH5YqpDX9Z1qg8swRLYn/peXoYwMPG1t0KSXA/yy8aHqrPiqqvk+2nPPWL681aQ&#xA;/aSaZoren8v1W39GBl8OaM3ucVYR5w8ueUNa1mx8j6TodhHDcy8/MF7BawqYLSBVlkt43QKVkm/d&#xA;xuVNY0kU9WU4q7yl5a8maLrd55G1bQdPkjt3E3l+9mtYXM1pcB3igld1YmaIpLGnI1dIyeqscVZu&#xA;fJtjAeekXl5o8nYWsxeADwFrcCe2H+xjB98VUpNc1rRKf4ggS504fb1uxRgkfvc2paSSJfGRGdRu&#xA;W4Liqpr81vLd+V75HWS1XUg6zowKEXFhdQxMCKhg7zKB88VTbVtQi03S7zUZqCKzgkuJCTQcYkLm&#xA;p+QxVJNPvrLyt5T0PT7z1Hu4rS3s7ayiUy3M8sMKqUjjUAmlKs2yqN2IG+Kr1s/NmrASXt1+gbRt&#xA;xY2fpy3ZFdvWuXV40qPtLElQekpxVubyj5LtIHvdSs4LlbZDJJf6oxvHjRBVmM920rqoAr9qmKvP&#xA;5fKC+f7nWNeis49Nm0pY7XyekkKIY54/TvGuLhGXpOfSieNt1j5oQGZ8VZR5SHkvznpMOoXWgWcG&#xA;rRon120mt4vXt5GUEFXKh+DcfgcU6UNGVlCqct5Yv7I+poWr3FrTc2d6z6hat8xM31hKfsiOZVH8&#xA;pxVfp/mWUXkema5afovVJiRbUf1bW5IBYi2uOKcm4gkxuqPsSFKjlirWk0i826/Aa8pY7K89uMiS&#xA;W4p9NocVX+YndtQ8v2ymgn1EmQDrwhtJ5q0oduaIPpxVS0r/AEHzXrGndIb5IdUtq/zsPq9yijwU&#xA;wxuf8qTFW/L3+ia3rukdESaPUrZB0WHUA3P6Wu4Lhz88Vdpw+tecdYvOsdjBa6dHX9mUhrucj/XS&#xA;4gr/AKuKu0AC517zBqRPL9/Dp8DDoYbOIOR/sbi5mGKuuG/R/nO3nba31y2+plt6LdWZknhUAd5Y&#xA;ZZiSf99geGKseurnVfMPnnVdP0id7S10yGDT77VkALQep/pNzFasQV9aZWgUnf0+BJ+LhVVm+maZ&#xA;YaZZRWNhAtvawghI18SeTMxNSzMxLMxNSdzviqT3XmwXUslj5ahXV75GMc06vxsbZgaN69wAwLL/&#xA;AL6j5PXqFHxBVK7/AMvJb3mkR3s51DVNX1GE6jfP8B9Oxjkvo44IqsIYFnt4xwU96sWYklVOPPSf&#xA;86pqNyK+ppyLqUIAJJlsHW7jFBXq8IGKqE+kapotzLfeXkFxZzuZb3QXcIpdjV5bN2PCKRiSWjak&#xA;btvVGLMyqZaR5i0rVS8dtIUvIQDc2E6mK5hrsPUhejgEjZqcW6qSMVUNe8vm9ePUdPlFnr1opFle&#xA;78WHX0LhQR6sDn7Snp9peLgMFUh8heZLa18q6nb6on6Pk8py3FvqFsx5fV7aFfXh4mgLxrbOqo9P&#xA;i41GKoPyVpV15j0OzutWj4aHK0l8NNahW8urqZrmWab+a3SWQiFOjgBztxAVZ/cXFvbQSXFxKkME&#xA;Sl5ZpGCIqjcszGgAGKscfVtW8xfuNA52OlN/e6/IgDOvhYwyD46/7+ccB1USdlWtC0uxtfNN1BZx&#xA;BLTSbCC2ttyzCa7llnuyzNVmeT04HdmPJjua4q7zNpVlda/pQvIvVtNRjudNnQVVvUCre28gdSGR&#xA;ofqkhRlIKs1QQaYquj1DWfLo9HWBLqmkJ/c6zChkuIkHRbyGMcmp/v6Jad3VKciqyCzvbO+to7qy&#xA;njurWUcop4XWSNh4qykg4qwLz1o2oaDpF7qOhxmXSI2S/uNGRRSG6tZluo7m26cUaWMfWI+lCXUc&#xA;uQkVRfn3zLbXXlTTINLT9Iv5slt7fT7ZDx+sW0y/WJ6mhKxtao6s9KLyqcVT/QfL5sZJNR1CX67r&#xA;12oF5emvFVG/oW6mvpQIfsqOv2mLMScVV9X8xaVpRSO5kL3kwJtrCBTLczU2PpwpVyATu1OK9WIG&#xA;KpbBpGqa1cxX3mFBb2cDiWy0FHDqHU1SW8dTwlkUgFY1rGjb1dgrKqr+RU/51TTrk19TUUbUpgQQ&#xA;RLfu13IKGnR5iMVSex8upcXmrR2c50/VNI1GY6bfoOZ9O+jjvpI54qqJYWnuZBwY9qqVYAhVNLXz&#xA;YLWWOx8ywrpF87COGdn5WNyxNF9C4IUBm/31JxevQMPiKqcanplhqdlLY38C3FrMAHjbxB5KykUK&#xA;srAMrA1B3G+KsHtbjVvLvnrS9P1edru11OGewsNWcUaf06XFtFdMKL60KrOoO3qcwQOQeirIbdjq&#xA;HnS4nXe20S2+pht6G6vDHPMtD3jhihIP/FhHjiq7X/8ARtd8v6iDxH1iXT52PT0buIuB8zcW8IGK&#xA;taiPqvnHR7zpHfQXWnSU/alAW7gJ/wBRLeen+tiq7yiBJbalekUlvNTvTIaHf6tM1lGd+v7q1TFX&#xA;eRqv5Wsrs7HUTLqVKUp9fme740Ph61MVUPzCY/4YnjgNNUmkhj0UjqNQMi/VW/1Ulo0n+QGrtXFW&#xA;EflvbfmEfKC29hqekrqVtdXMXmCCazmjul1L1ud0ZLgXN1G7SOzOr+jxZGUqqrQBVPDp2oIf+dws&#xA;NS1eEfbe3uEvbEL/ACyWVtFYyTV/lNrJ88VZjouoaLe2CPo80MtnF+7VbfiFjK/7rKCnAr3UgEYq&#xA;gdW5jzVoNSBEVvBQ0qZPTQrSu9eAfpiqK8zel/hvVvW5GH6nceoFpy4+k1aV70xVEaUCul2YIoRB&#xA;GCD1B4DFUj80Xfk6e5jsdRi/SGrW9JLa1s0eW/h9QUEiNB+9tw3T1CyL/lYqlMVn+ZSMG0VjbWvQ&#xA;WvmK4iuWQews45JX+b3ZOKvNPzOi8+P5mkEk+l3dpBZ2n+NltEu7aH6h9dR7VbyslyaKfWZigDCD&#xA;1eWxXFXpsg/OJlUAaJFZ8V5Cwadrnj/xSbhBBUClOYpirVs/lqC7in81LfR6gjq0Fx5gKNbJJ0jM&#xA;T25OmxyV2XhxkOKs7BBFRuD0OKpHoFf015l58Of1+HhSnP0v0fa05d/t86Yq35g9D9LeWfU+3+kp&#xA;PR6/b/Rt5X/hOWKp2SAKnYDqcVYNeSeVr6/mufLlpe3WqO9bjUNCPoRPINi09w7w2NwydCrmRh/L&#xA;ircNv+bUIci/0uO0C8hNqatdTqAK/H9UTTYR70r8/FV5j+W0HnpPNitDd6XDZXVreP5IN3bXRg+o&#xA;G9Z7xbOJZojGHYwuodmb0PT4/CrAKvSpbP8AMp2L60xubbobXy7cRWzOPcXkccifNLsHFU28r3nk&#xA;+G4ex06L9H6tNV7i1vEeK/m9PrI7T/vbkLWnqBnH+ViqeaqC2l3gAqTBIAB1J4HFUP5YMR8taSYg&#xA;RF9Tt/TDfa4+ktK070xVCaTzPmvXyCDEEshQEbSem5aoG9eBTriqP1rUNFsrB31iaGKzl/dstxxK&#xA;yFv91hDXmW7KAScVYcmnX7Ef4PsNS0eD/dbzzpZWPEdFjsrmK+khp/KLWP54qkf5k2/5hDyg1vf6&#xA;lpLajc3NtFoEENnPJdtqXrc7Qxzm5to0aN1Ds/o0VFYsrLUFVm/5esf8MQRzmuqQyTR60T1OoCRv&#xA;rTf6ry1aP/IK02piqv54BXyveXQ/6Vxh1GlCa/UJku6UG+/o0xV3m4CO2029ArLZ6nZGM0O31mZb&#xA;KQ7dP3V0+KoDR71tP/LCLVG+CRNLbUZK0SjyQm5epGw+Jjviqf6HYDTtF0/TwOIs7aG3CilB6UYS&#xA;m23btiqWSj6/52hhbeDQ7QXQXsbq+MkMbf60UMMo+UuKpJf6TqGm/mBeapooBvNRso7qWxZgqXot&#xA;GEFwjMdkkRJIDCx2BLg7OSFWWaNrmn6vbNNaMwkib07q1lHCeCUCpimjO6MK/IjcVBBxVDav5Ysr&#xA;65GoW8j6drKKFj1O2ospVdxHMD8E8X+RICO60ahCrHtS167iv9Gh1uNLbVdN1CJ29EsILu3ulfTx&#xA;Pblvi4rJeI0sTEmM9Sy8XZVOvPjcvKd/ZjZ9TVdMjPg1+62ob/YeryPsMVQ4vdS8zuV0uZ7Dy6po&#xA;2qx0E96B1Fod/ThPT16cm/3XQcZMVTvStH0zSbUWunW628NSzBalnc9Xkdqs7t3ZiSe5xVK9b8wX&#xA;bXL6J5eEdxrpUGaSQM1tZRv/ALuuStPipvHCCGk/yV5OqqV/l/5bsD5Tu3u+V+nmaSe7vZrg8muY&#xA;LgelEX6cedsqEqtFBJ4gDbFUu8lajf8AljRLe11R2uPLts0tj+kW+1YzWcrWzicf8s0jRGSOT/dY&#xA;bi1EAYKvQmWGeEqwWWGVaMpoysrDoexBGKsck0LUNA/0jyyvqWCbzeXHYLCVH/LCzbW7jtH/AHTd&#xA;KISXxVS8u6xZX3me8uLVmEGpWUEqQyKY5VubOWSG7SWNqMkkYlgVlIqMVd5q1mysvMOjrdM3pWaX&#xA;F/wjBeR5yos7eFEX4neb61JwUdSvtiqpFoF/r1LrzQvCzb4ofLiuGgUbU+usnw3MnilTEvYOQHxV&#xA;kv7qGL9mOKNfZVVVH3AAYq89853135p0C4g06R7fy9cvFYx3q/av5byVbZDEO9pG0vN2/wB2gUH7&#xA;updVMPzB8t2H+E7SS15WK+WZYLyymtzxe2gth6crJ15enbM5VWqpIHIEYqmmieYLtblNF8wiO210&#xA;A+jLGGW2vkX/AHbbFq/FQVkhJLR/5S8XZVNNV0fTNWtTa6jbrcQ1DKGqGRx0eN1oyOvZlII7HFUk&#xA;N7qXlhwuqTPf+XWNF1WShnsgeguzt6kI6evTkv8Auyo5SYqiPIjBfKlhZ1q+mK2mSE9S1g7Wpb/Z&#xA;+lyHscVSXTdeu5b/AFmHRI0udV1LUJXX1ixgtLe1VNPM9wV+Li0lm7RRKQZD0KrydVWQ6R5YsrG5&#xA;OoXEj6jrLqVk1O5o0oVtzHCB8EEX+RGAO7VapKqJ1nXNP0i2Wa7ZjJK3p2trEOc88pFRFDGN3Y0+&#xA;QG5oATirErDSr/UvzAs9T1kAXmnWUl1FYKwZLIXbGC3QMNnkkSO4MzDYkIBsgJVTyIfUPO00K7Qa&#xA;5aG6K9hdWJjhkb/WlhmiHyixVM9csBqOi6hp5HIXltNblTSh9WMpTfbv3xVIdZvm1H8sZtVHxyPp&#xA;a6jHTi1ZI4RcpSoC/aUb4qhLiOO0/JSWML6kVv5bZQr/ALSpYUo1KdQMVZtiqSaBG41jzJI9CX1C&#xA;IRnqeC6fa0H/AAZY/TirtXiZPMegXical7qycmvLhNAZyB/s7Ra4qqav5btb+4W+gml07V414Ral&#xA;alVl4Vr6cqsGjmjr+zIpA6rQ74qhl1XzRpx4appg1GAf9LDS6Vp/NLaTP6i/KJ5SfAYqkfnTVvy8&#xA;8x6BcaVrOsRaNI6lrWbUC2nXMEpVkWaOO7+rybVIPZgSDscVYRH+Yvlzzvd6No3mDWtP06DRFkn8&#xA;0s13DDDdXq+paR29s7SL6kEyCWZ6VHpMgNC2yr1KPznobxrHo0NxqwA4QDTrd3t247cVuiI7Raf5&#xA;UoGKtNbebNXIFzIug6cftwWzCa/kXsGnp6MHgwjEh/lkU4qu1iGz8seSdXk0qH6uljZXV0gUku0i&#xA;RNIZHdiXeRmFWdiWJ3JxVONNsYdP061sIBSC0hjgiA2ASNQi/gMVSny2I/0l5ngXeKPVAAhGw9Ww&#xA;tJnA67M8rN8ziqj/AIb1HRyX8rXEcFtXk2h3fI2XuLd0rJa18FDxjtHUk4qqDzd9WomtaZeaY/Qy&#xA;iI3dsfFhPa+qET3mEZ9sVYV5x8x+TdK1uy87aRrdg8tjKF8xWMFzEzz2UyiKWb0lYsZYFVJDQcnW&#xA;MKa8UAVXeU/Mvk7VdfvPO+ra1YwyXZFv5csp7mJHisIA6xzmJirerc+rJItRyWN+O3JgVWaN5sa5&#xA;+DRNMu9SkOwmeNrO1FejGe5EfNPeFZD7Yqpr5b1DVX9XzRcx3UHVNFtgy2K9x6xf47oj/LCp39ME&#xA;VxVV8y8DqXlmBv7uXVCCgGx9Kwu5kruOjxK30Yqm2pWMOoaddWE4rBdwyQSg7gpIpRvwOKpPo0Fl&#xA;5l8k6PJqkInS9srS6YMSGWR4lkDo6kMjqxqrqQQdwcVWrbebNIJFtIuvacPsQXLCG/jXuFnp6M/g&#xA;okEZ/mkY4q2/nTRI42TWIrnSP2ZxqNu8cC8tuLXSh7Q1/wAmUjFXl0n5i+W/JF3rGi+X9a0/UYNb&#xA;VJ/KzLdwzQ2t63p2klvcurt6cEKGKZOVB6auBUruqzbyZq/5e+XdAt9L0fWYtalRQ11Pp5bUbmeU&#xA;KqtNIlp9Yk3oAOwUBRsMVTxtV80aieGl6YNOgP8A0sNUpWn80VpC/qN8pXiI8DiqJ0jy1aWFy1/P&#xA;LJqOryJ6cmpXRVpeBNTHEqhY4Y6/sRqAaVap3xVZpETP5j168YCoe1skP7XCGATgH25XbUxVrX43&#xA;OseW5EoCmoSiQ9DwbT7qo/4MKfoxVO8VYTbxx3f5KRRlfTiuPLaqVT9lXsKUWtegOKuuJI7v8lJZ&#xA;A3pxXHltmDP+yr2FatSvQHFWbYqkeguw1vzLDI3xfXoZo0PaJ7C2QEexkik+7FXatK0nmfQbNT9n&#xA;63futBukEQt+v+teriq2/wDMsz3kmmaDajU9ShPG5kZzFZ2poDS4nCv8dDURRqz9OQVTyxVYnla8&#xA;vVDa/q1xesd2tbRnsLRT4BIW9ZxTqJZnHtiqUeapvJ3kvSprix0Ozk1aaKRrKwggiSW4MYBZnZV5&#xA;cF+Hkx70UVdlUqpB/h6+8j3Oka1JGdUl1sm287xonqG5uZOdzHdRJt/vO/qRRoqkshSMAlUxVm0P&#xA;lfyVqcEepWFnbKLtVmi1LTj9WlkVhUMtxbGOQgj/ACsVcbDzTpI56defpm0WldP1AqlwFH++btFF&#xA;aD9mZGLHrIvXFVO+vrTzT5X1vTLZZIb6SzntLvT7gencwSTwsqrInxfar8LryVuqlhiqd6TqEeo6&#xA;VZahF/d3kEVwlOnGVA4/XiqU+XpYI7zzRfO6x2r6kXaZmooFvY2sEjMTQAK8LA/LFVJdd1vXB/zr&#xA;kEdvpx6a3fI5SQeNrbAxvKp7SOyL0K8xiqsPJlhPVtYurvWnbZ0vJaW5HgbSAQ2p/wBlGT74qw3z&#xA;VovljVtZsvI2jaPZQ2txKX8xXVvbxxiO0hAmltUaMIQ8/JEkKmqLIK7upxVb5Z0fypomuXXkfWtI&#xA;sZLeF428uXtxbxP6tpPzkgtJHcP+8gaKVIuRq6pXqCSqzRvJmmwiukXF1org1QWMxWBfEC0l9W03&#xA;/wCMVcVUm1nX9E/470C32nDrrNhGymMeNzaEyOijvJGzjuyxqMVX69PbTXXle/ikSa0GpB0uEYMh&#xA;W4sbmCNlZaqwZ5lA374qm+rahHp2lXuoS/3dnBLcPXpxiQuf1Yqktje2nlbytommXIkmvorOC1td&#xA;PgHqXM7wQqjLGnw14/tO1FUbsVGKrxYeadWHPUbz9DWjVpp+nlXuCp/39duppUfswopU9JG64q6b&#xA;yv5K0yCTUr+zt2ForSy6lqJN1KiqKlmuboyyUA/ysVYT/h29883era2iHS5NEItvJMToIzbXMZS6&#xA;ku5Uof79xHHIhAKoHjYAs2Ksg8qy+T/Omkw3N/oVnHq0UUbXlhPBE8sBkB4sjMvLg3xcWHcMpo6s&#xA;oVTZ/K15ZgvoGrXFk/UWt2z39mT4GOZvWRadFhlQDwxVfYeZZkvI9M161GmalMeNtIrmWzujQmlv&#xA;OVT46CpikVX68Qyjliq/SZWj8z69Zs1eYtL9VoNlnia361/msjirWvSP+m/LUMZ+I300sqAV/cpY&#xA;XKFj7CSWMfTiqeYqwm3kjtPyUikLepFb+W1Ysn7SpYVqtadQMVRWj2Tah+WEWlt8cj6W2nSVo9Xj&#xA;hNs9QNj8SnbFU/0O/Go6Lp+oA8heW0NwGFKH1Yw9dtu/bFUsuz+j/OdndEfuNbtjYSv4XFoXuLYe&#xA;3KOS4qfEKMVSCS61HzF581Wx0yR7fT9Lgi06/wBUTZ4nk/0i4htX6erMrwqzDeMIejMhxVm2nabY&#xA;abZRWVhAtvawikcSCgFTUk9ySdyTuTucVSafzb9ekks/LES6tdoSkt5yIsLdgaH1bgAiRl3rFFya&#xA;uzcAeWKpZf8Al+O2vNHiu5zf6pq2oxNqV+4CuY7GOS9jjiQV9OBJ4EAjB7ksWYksqm/ntD/hLUbl&#xA;P77ToxqUAoTWWwdbuMUFTu8IBxVSn0XUtGupb/y6qyWs7GW+0Fiscbuxq81q+whmc7srfu3bc8GL&#xA;OVUfo/mTStVeSCB2hv4AGutNuFMN1CCaVeFvi4k/ZcVRv2WIxVZrmgC+eK/spRZa3aAizvwvL4Tu&#xA;0Mygr6kD/tJX/KUqwVgqx7yJ5mgtPK2qW2rR/o+fynJPBqFmSH9C2jX6xb8CAC8YtnVUfiOXHpiq&#xA;G8kaXd+YtEsr3WYvT0hna+g06vwXVzcyG5luZqfahE0rfV4/slaSNUlQirPLq6tbS3kubqZLe2iU&#xA;tLNKwREUdSzMQAPnirHX1PV/MRMGiCTT9IbabXJUKSyL0K2MUgr/AM95F4dCgetQq1oOl2Nr5ovI&#xA;LOIJaaVY29rbjkWZZrqWW4ui7MSzPKFgdmY8mO58Sq7zNpNhd6/pQvrcXFnqMdzptxEQaF+K3sEh&#xA;I3VovqknBwQVZqg1pira3+ueXf3WqrNq2jLX0tWgQyXcK9lu4I15SAdPViUn+dBQuVWQWOoWGoWq&#xA;XdhcxXdrJ/dzwOsiNTY0ZSRirB/O+jX2h6Lf6hoEJmsVZb+50hfsx3NtKt1Hc26/sqZYh68S/aFX&#xA;Uc6iRVW89eZ7e88q6Xb6RH+kZvNskEOnWgIX17aRfrFxzJBKRtbIyu9Dx5dMVZFoegCxklv72QXm&#xA;uXYAvb8rx+EGqwwqS3pwR1+BK+LMWYsxVVNX8yaVpUkdvPI0t/OK22nW6ma6lANCUhSrcQftOaIv&#xA;7RAxVLoNF1LWrmK/8xosdrA4lsdBUrJGjqapNdOKiaZCKqq/u0bcc2CuFVfyKn/Oqadcmvqaijal&#xA;MCCCJb92u5BQ06PMRiqUWHl6O4vNXitJzYanpOoyvpt/GAzrHfRx3skcqGnqQPPO4MZPYFSrBSFU&#xA;yg82fUZI7PzPEuk3bMI4rzkTYXDE0X0rg0CM3++peLV2XmPixVOdR02w1Kylsr+Bbi1mFJInFQaG&#xA;oI7gg7gjcHcYqwmO61Hy7570qx1OR7iw1SGXTrDVHNWleP8A0i3gum/37CqTKrdZA46srnFU/tD+&#xA;kPOl3dAfuNEthp8beNxdmO5uR78I47eh8WYYqmeuX407RdQ1AniLO2muCxpQelGXrvt274qkOs2L&#xA;ad+WM2lD4JE0tdOjpxWkkkItkpUlftMNsVR3lEiO21KyJrLZ6neiQVO31mZr2Mb9P3V0mKu8jkr5&#xA;Xs7U/wDSuM2nVqTX6hM9pWp339GuKqP5go0nle4gt/8AjqzPEmiHuuo8w1rJ/qxyqHftwDVBFcVY&#xA;N+Wtt5/k8mpa2Os6bHqFlcXEGuW8llKt2upCV2vGluWuruN2klYyB/QAZSCFUfCFU9k0u7VR/jHT&#xA;dQ1uHb1HiuFv7ML4S2NvFYer/wBIb4qzLR9S0i/slk0qaKa1j/dhYaARlR/dsgoUZe6kAjwxVL9W&#xA;5jzVoJJAi43goSN5DGhWgPfiHxVF+ZvS/wAN6t63Iw/U7j1AtOXH0mrSvemKojSgV0uzBFCIIwQe&#xA;oPAYqknmi78pXM0enahbfpTU4SJbeztY2mvIWYfDIrx0a15dpWdB/lYqlUGnfmIro2kStYWVRwtd&#xA;buo710AO/JYYZJX28b44q8z/ADStfOk3mMvJf6feWdla2n+OktLS6gt1sTeJJapdD61cvKEPrSsE&#xA;VGWD1Kkh1GKvTZYfzfkjQR3OiG0ZAS9kJ4J6UFPRadbyHcdOSUxVZat5ds7yG681Wt/DqETB4NQ1&#xA;xkuLZZBUepFJAz2Nsx6D4YmPhirPAQwBBqDuCOhGKpJoBP6a8yhyvL6/EUA+16Z0+1py/wBmHpir&#xA;vMHo/pby16gJf9JSeiRXZv0bebmn+TyxVOndERndgqKCWYmgAG5JJxVg96/lnVLqS98vafd32oS7&#xA;yatoz/U4nI2DSXheCC5Cn9mstP5cVVLez/NGDm82radBarVnlv0N86oBUk/Vo9HRae9fnirzH8s7&#xA;XznF5nM0Wp6db2Wo212/kVbvTrhbdrI3jy3iWsC3sbWwkYxSqr+oWh9PiVCMoVekz6d+YjO7avK1&#xA;/ZVPO10S6jsncE7cVmhjlTbwvhiqa+V7vylbTSadp9t+i9TmJluLO6jaG8mZR8UjPJVrrj3lV3H+&#xA;Viqd6qC2l3gAqTBIAB1J4HFUP5YMR8taSYgRF9Tt/TDfa4+ktK070xVCaTzPmrXiCDFxsxQEbSCN&#xA;y1QO/EpiqYaxqWkWFk0mqzRQ2sn7srNQiQsP7tUNS7N2UAk+GKsNj0u7ZT/g7TdQ0SHf03luFsLM&#xA;r4RWNxFf+l/0hpiqRfmVa+f4/Jz2l9rOmyahe3FvBodvHZStdtqRlVrRorlbq0jRo5VEhf0CFUEl&#xA;WHwlVnP5fI0fle3guP8AjqwvKmtnu2o8y13J/qySsXTtwK0AFMVVvPBLeV7y1H/SxMOnVqRT6/Ml&#xA;pWo329auKu83ESW2m2QNJbzU7IRip3+rTLeyDbr+6tXxVbpx+q+cdYs+kd9Ba6jHX9qUBrScD/US&#xA;3gr/AK2Ku0Ai217zBppHH9/DqECjoIbyIIT/ALK4tpjirpF/SHnWJGFbfQ7X1wDuDd3xaNGHg0UE&#xA;Ug+UuKpDd6RqNj541XUNB4DUriC1vpLWYlIr6Mc7ee3LAHg0Yhjkjenwu5r8LtirLdE17T9Yt3lt&#xA;SySwt6V3ZzL6dxbygVMc0Z3Vu47MKMpKkEqofV/LNnfXP6QtpG07WkXhFqltQSFRuI5lPwTx/wCR&#xA;ICB1Xi3xYqx7U9eu4b/R4dajS21XTdQikcwlhBd290j2Hr25bfikl2jSxsSY+5K8XZVOvPjcvKd/&#xA;ZjZ9TVdMjPg1+62ob/YeryPsMVQ31vU/NDldNnew8tg0bU4jS4vexFq3+6oe3rfabrHxHGQqp7pe&#xA;kabpVoLPTrdLa3BLlEH2nbdncnd3Y7szEknriqWatr873jaJoQS41kgfWJmBe3sUYVEtxxI+IjeO&#xA;GoZ/8leTqqlX5feXtPPlO6mnDXieZZZ727muDze5gufghaSlB8dsELKoCgk8QBtiqW+S7698raBB&#xA;BqDPdeX7R5rKW82ZrCWzla3cyKN/qkjRc0IH7kNQ/u6FFXoatFLEGUrJFItVYUZWVh1HYgjFWNy+&#xA;Xr3Q2N35WAW3FTP5eduFrIOpNqTtay+AX9237Sgn1FVUPLmu2Goeabya0Zlh1GyidYZFZJUubGaS&#xA;G8jljbeOSMT24I/hTFWvNuu2Fh5g0cXTMy2ST3yW8I5zS3MiiztYY06s8wuJuI/ySTsCQqiYfL15&#xA;rTC880ANCaNb+X1YNaxDsbmm1zL48qxqfsqSObKsid4YIWkkZYoYlLO7EKqqoqSSdgAMVee+cby/&#xA;806HPHYs1v5buWis4LmhWS+uLudLeORFYf7xxGT1Cf8Ad1P99f3iqZ/mB5dsD5VtZYA1mvlqWC9s&#xA;5bc8JLeC2+CZo61BKWxcqrAqSAGBG2KpppOvzpeLomuhLfWQD9XmUFLe+RRUy2/In4gN5Ialk/yl&#xA;4uyqZ6ppGm6raGz1G3S5tyQ4Rx9l13V0I3R1O6spBB6YqkZvNS8ruF1Kd7/y4TxXU5TW4sh0Aum/&#xA;3bD29b7SdZOQ5SBVEeQ24+U7CzO76YraZIfFrB2tS3+z9LkPY4qkum69dy3+sw6LElzqupahK6+q&#xA;WMFpb2qpp/r3HGh4tLZu0USkGTehC8nVVkOkeWbOxuf0hcyNqOtOvCXVLmhkCncxwqPggj/yIwAe&#xA;rcm+LFURrWu6fo9ukt0WeWZvTtLSEc57iWlRHDGN2agqeyirMQoJCrErTSNRvvPGlahr3A6lbwXV&#xA;9HawkvFYxnhbwW4Ygc2kE0kkj0+J0FPhRcVT2NTp/naVFFLbXLT1yBsBd2JWNmPi0sEsY+UWKt6+&#xA;Rc695f00Dl+/m1CdT0MNnEUB/wBjcXMJxV2on615x0ez6x2MF1qMlP2ZSFtIAf8AXS4np/q4q7zD&#xA;/omt6Fq/REmk025c9Fh1ALw+lruC3QfPFWtV/wBB816PqPSG+SbS7mn87D6xbOx8FMMiD/KkxVU8&#xA;tqzah5iuGUr62pUSv8sNpbw7Hw5RsfpOKt3cb/420uQAcBpuoq7VNamexKinQ/tYqq6v5bs7+4S+&#xA;illsNWiX04tStSFl4V5enIGDRzR1/YkVgOood8VQi6p5q00BNU00apCOuoaVRWp3aSzmfmv/ADyk&#xA;lJ8BiqS+ddU/L/zFoFxpWsaxFoszqWtZ78tp9xBKVKLNGl39XkP2qGmzKadDirCI/wAw/Lvni50f&#xA;RfMGtafp9towebzUWu4Yobu9UyWsVvbOzr6kEwWSZqA/u2jGzNsq9STzpoUkSro6T6utAsA02B5Y&#xA;GA6Bbmi2qj/WlAxVY1v5t1mgunXQNOb7cFu4m1Bx4NOB6Nv4MIxIf5ZFOKr9ahs/LfknWJNLhFul&#xA;lY3VygSpZpEiZzIztVndmFWdiSTuTiqcadYw2Gn2tjCKQ2kMcEY/yY1Cjx7DFUp8tlf0n5nhH93F&#xA;qigKeg9TT7SVqfNpCfpxVTPlq80yRpvLNylnGxLSaPOpaxdjufTC/HbMT3jqm5JjY74qvXzTcW3w&#xA;a1pF5YuNvXt42v7ZiOpR7ZXlVad5oo8VYL5382+SNK1mx856Zr2ni+06QJrumLdQrPc2Dj05m9As&#xA;JDNbrSULTk4QLvRKKrvJ3m/yNq2u3vnbUtd08Xd6Rb6Bpz3MJnt9Ph5JHJ6FfU9a5LSSUoWVH4bf&#xA;HVVnD+abq6+DRdIu71zsJ7lGsLZTSoLvcqsrKf5oonxVYvlm71J1m8z3KXyK3OLSYFMdihBBUyKx&#xA;Z7hlI6yHhXcRqd8VVPMxVtT8swuT6cuqNyTsxjsLuZK7jo8St8xiqbajZRX2n3NjMKw3UTwSAio4&#xA;yKVO3yOKpPosNn5k8k6PJqkIuEvbG1uXD1DLI8SuJFdaMjqxqrqQQdwcVWLb+bdGqLV11/Tl+xBc&#xA;OIdQQeCzkejceCiQRn+aRjiq9/OmhRxMusJPpC0KzjUoHigUHqGuaNasP9WUjFXlsn5ieXfI91rG&#xA;i6BrWn6hba0Em8qlbqGWG0vmMdrLb3Lq7enBCGjmWtB6auN2XdVm/krVPIHl7QbfStH1mLW5kUNd&#xA;z2BbUbmeUKEaaRLT6xIPs0FdlUU6DFU6bVPNOpDhpenDS4W6ahqlGb2aOzhfm3/PWSIjwOKovSPL&#xA;dnYXD30sst/q0q+nLqV0Q0vCvL04woWOGOv7EaqD1NTviqlaRv8A421SQgcDpunKjVNaie+LCnQf&#xA;s4q15kVl1Dy7cKpb0dSo9P5ZrS4h3PhykU/QMVU9K/07zXrGo9YbFIdLtq/zqPrFy6nwYzRof8qP&#xA;FW/L3+l63rur9UeaPTbZx0aHTw3P6Vu57hD8sVR/mDSjq2i3mnrJ6M08ZFvcUqYp1+KGUDxjkVXH&#xA;yxVK7gzeafJQltlFrqU0azQRuSRb6jauHVJKdfRuouLjvQjFVLyBrEerW2rXcfIRvfB1jcANGZrO&#xA;2uGiYDo0bzFGB/aBxVGXH7zz1Ycd/qul3nrGvT6zcWvp7e/1Z/uxVbeeZ5ZryXTfL9qNTv4G4Xc7&#xA;OYrK2bus04V6yD/fUas3TlxB5Yq0vle8vD6muatc3jH/AI9bRnsLRfkkD+s4I6iWZx7DFUk82z+T&#xA;fJunSy6foVlLrc0UsllZQW8YklMa1aSVlXkI1LDkx3JIUVdlUqsch8qy/l/caNrDW66m2r8rfzmi&#xA;Rq3rXTGS7ju4YwqisBaaJFAq0ZSNQWC4qzu18q+R9QtotR0uztoo7tVmh1DSybSSRGAKsLi0MTlS&#xA;P8rFW2svNmlHnYXY1uyWpawvuEd0ABsIbpAiNTssyEsesgxVbe31l5p8ra3p1pzS8ktJ7O6sJwYr&#xA;iCSaFlCSpuRWvwsKqw3UsN8VTnSNQj1LSbLUY/7u9giuE/1ZUDj9eKpRoVxa2915q1CeRYLP9JGR&#xA;7mVgsYWCwtYZXLNxCqjQsDU9sVWJq/mHXKHQoV0/Sz/0t7+NzJKvjbWlY24ntJKy+IR13xVWHknR&#xA;599XefXJD9v9JSetCe1fqqhLRT/qxDFWKeZLfTNV1e08iaDYw22l3DsPMlzbRrEgs4QHmskMfH+9&#xA;rHFP/KkgHVvhVd5bs9F0bWbzyHrNhbzaZGySeXLi4iWVWtLgMY7OVpA3xQtHLHDU1aNPEbqsrbyT&#xA;o0IrpLT6HIN0OmyGGIHxNqQ9q5/14jiqm+ra/oe+txLqGlqPi1eyjYSxDxubQF24+MkJbxKIorir&#xA;evXNrPc+VtRglSey/SQkS5jcNGy3FhdQRMrLVWDvMoG/fFU41bUI9O0q91CX+7s4Jbh69OMSFz+r&#xA;FUksr+y8q+VtE0275y3sVpBaWthApluJ5IIVUrGgpWlPiY0VRuxUb4qvSx82aqS+oXY0Wyb7FhYF&#xA;ZLkj/i+6kVlWo6rCgKnpI2KuuPKvkjTbaXUtSs7eRLRGlm1HU2N3JGir8TNcXZlkAC/5WKsEm8qy&#xA;+frjWdXFuumHSAtv5MjeNV9G7X07t7yaMqwrOVhjdSKrGHjYAlsVZF5Sn8m+ctOil1DQrKLW4Yop&#xA;L2ynt4zJEZFqskTMvIxsVPFhuCCpo6soVTt/K95aH1NC1e5smG/1W7Zr+0b2KTt6yADYCKZB7HFW&#xA;7PzPLDeRab5gtRpl/O3C0nVzLZXLdlhnKpSQ/wC+pFVuvHkByxVdb/u/PV/y2+taXZ+ia9fq1xde&#xA;pt7fWU+/FUH5/wBZTSbbSruTkY1vi7xoAWk9GzuLhYlB/akeEItN+RGKqsBn8q+STLcKLrU4Ynnm&#xA;jQ0FxqN05dkjr09a6l4oO1QMVTTy/pR0nRbPT2k9aaCMC4uKUMs7fFNKR4ySMzn54qmGKse00nS/&#xA;NF9pbbWmqhtT0/wEoKpexAdhyKTDuzSP2XFUn0e2/wAPfmXqWnluOn+Z7c6lp6kqFS7tnpexgdS0&#xA;n1hZv+C7LiqG0+51HzR5m8wDT5XtdKjnj0291OOqSPDZK3K1tiKFZDcTTepN+ynEJ8bco1WdWNjY&#xA;6bYxWdnClrZ268YokAVEUYqks/mibUJDaeWIV1GWvGTU3qNPg3oSZV/v3Xf93CTvszR1riqW3vl2&#xA;C0udItppmvtR1bUoZNU1GbiJpEsY5b2NVUCiQpPAgWNdhyJ3YsWVTfzyOHla+vNuWmKmpJUgVawk&#xA;W6AqaAcvRpiqHm0XUtEuZb7y3Gs1pO7TX2gswjR5HJZ5rWRvhilcmrI37tzueDFnKqY6P5l0jVnk&#xA;gtpTHfwAG6064Uw3UNdqyQvRuJPRxVW/ZJGKqeu+XxfSRahYyCz1y0UizvgKjiTUwzqCPUhc/aQn&#xA;/KUqwDBVIPIfmSC18r6nb6sn6Om8qy3EOo2ztyFvbRqbiDi2xaJbZ1VHoOQWoGKobyLpN7r2j2Oq&#xA;a7D6Vg0j6jZ6U26vcXMrXTXU4/aCyyH6uh2VQHb4yojVZzf6hYafaSXl/cxWlpCOUtxO6xxqPFmY&#xA;gDFUge/1rzFWHS1l0rRiaTatMhjup17rZwuOUanp60oH+QpqHCrtD06xtvNF3BZwrHZaRYW9paop&#xA;qUkuJJZ7mpNSWkCwMzMasdz44q7zLpllc6/pIvIhNaalHdaXcQkH4mZBeRPyWjKYvqb8GqOJao3p&#xA;irSXut+XP3WpibVtFUfutUiQy3cCjbjdQxjlKB/v2JSf51FC5VZBY6hYahapd2FzFd2sn93PA6yI&#xA;1NjRlJGKsH89aNfaLouoajoMJlsw6ahdaSnRLq2mW6S6gHYGWIG4iH21qy/HUSKq3nrzRBd+VNLh&#xA;0eP9Iz+bJIIdNtVPH17aRfrE/M0YpG1sjK78Tw5VpirItD0AWMkt/eyi91u7AF5flePwg1WGFSW9&#xA;OBK/Clf8pizEsVV+seZdI0l44LmUyX84JtdOt1M11NTascKVbiD1c0Vf2iBiqXQ6LqWt3MV95kjW&#xA;G0gdZrHQVYSIkiEMk11IvwyyoRVUX92h3HNgrhVX8i0fyrYXn7Wpq+puNjRr+Rroio/l9amKpTY+&#xA;XYLu61e3hmax1HSdSlk0vUYgvqxpfRxXsqMDtJC887ho22PEdGVWCqZQeaJtPkFp5nhXTpa8Y9TS&#xA;p0+fegIlb+4dtv3cxG+ytJSuKp1fWNjqVjLZ3kKXVncLxlicBkdTirBdQudR8r+ZvL41CV7rSpJ5&#xA;NNstTkq8iQ3qrxtbkmpaQXEMPpzftJyD/GvKRVE6zbf4h/MvTLANXT/K9uNS1BQVKvd3T0so2HUN&#xA;H9Xab/gezYqm+p11XzTY6WpraaUBqeoUOzSktHZRMO45CSb/ACWjTxxVkWKuxVJvNWl3N5YR3Vgv&#xA;LVtLlF7poJChpY1ZWhLHos8TvEx7Bq9QMVSfzbYXXnDyXDqHli7NnrcHHUfL14woYrtEZPSlRtgJ&#xA;Ed4JVboGO1RirH/I1t53PkvS4vLd9pSaZDF6H1aSzuLG9hmjJS4jnZ5tQQXCTBxKTGeT1PzVTI2H&#xA;pFT5y03U9VC053DSLqNhXoP9Ds0t+VP52stuvLrirNNL1HS9Qso7nS7iG6sj8EcluyvGOOxUFdhx&#xA;6EdsVS3VRJ/i3QTv6XpXvL+Xnxi4/TTlT6cVVfObRL5P11pqekNPujJy3HEQPWv0YqmtuJhBGJyG&#xA;mCqJWXoWp8RHTvirHPNF55PnuEsNRi/SGrQ0e3tLNHlv4efSRGg/e2wan94WQf5WKpTHZfmShD6I&#xA;7Wlt0S08w3MV0UHytI5pn/2d4Tirzb8zo/PL+aCZbzTJ7GztbVvOxtLa6WAaf9eSS0W8iM8pkCH1&#xA;ZGCMreh6vLZlBVenXFt+bcqil/pUluRy9XT1ks5z3+A3SapE21KVA+fgqtspPLenXsV15js7211K&#xA;M1h1TWmFzCrHYtDcxvLa21elP3Rb+XFWcghgCDUHcEdCMVSPQK/przLz4c/r8PClOfpfo+1py7/b&#xA;50xVvzB6P6W8teoCX/SUnokV2b9G3m5p/k8sVTskKCSaAbknoBirBr2bytqV7Jd+XrG8v9SYn1tT&#xA;0NxbRswoP3t20kFrccehQtIR/Liq63tPzVgVmbU9NitlUs0upA3sqjqeX1SLSY1p3+18++KvNfy4&#xA;i83ReaK2+o6db2t/bXL+RheWFwLZ7D648l8trEl2jQc29KVFYyEwenQgKyhV6NNYfmOzFtYdr21r&#xA;8dtoNzHZu4PgtzFHKn0XoOKpr5XufKFtO+n6db/ozVZhzuLS7jaK9mKfadnlq9zx7yK7j/KxVkcw&#xA;lMMghIWUqfTZugamxP04qlXkxom8n6E0NPSOn2pj47DiYEpT6MVUdK9T/F2vdfS9Kx49ePPjLyp2&#xA;rTjX6MVTPVNR0vT7KS51S4htbIfBJJcMqRnlsFJbY8ugHfFWFiw9UsfJum6npQavC4WRdOsK9D/o&#xA;d4lxxr/Otlv15dMVS3zxbed18l6pF5kvtKfTJovR+rR2dxfXs00hC28cDJNp6G4eYoIiIxxeh+Sr&#xA;IPKVhdeT/Jc2oeZ7s3mtz8tR8w3iiplu3RU9KJF2IjREgiVeoUbVOKpx5W0y5s7CS6vlC6tqkpvd&#xA;SAPILK6qqwhu6wRIkSnuFr1OKpzirsVdirGo2/w/5kMDfDo2vSs8DfswaiRyePrst0BzXb+8Db8p&#xA;FGKpH5hhv/JnmV/M+lQmfRNakjj8w6ahoBdUEcN3CGIRJJBSN9wGITl15oqzbStW07VrJL2wmE0D&#xA;kqTQqyupoySIwDI6nZlYAg7EYql2qeVLWe7fVNMlOla4QK38CikvH7K3UNVS4Tt8XxKK8GQ74qke&#xA;oa/N+ktFTV7cWOrabqEZuI1PKK4t7uN7FZ7Vzu0fr3MXNSOSHZhQqzKp154YN5aubGtG1VotNFOt&#xA;L2RYHYU3+CORnPgBXFUKL3U/M8hXS53sPLgNG1WOnr3tDuLQmvpw9vWpyb/ddBxkxVPNK0fTNJtR&#xA;a6dbrbw1LMFqWdz1eR2qzu3dmJJ7nFUs1rX7t7iTRfLwjuNcoPWlkDNbWSMKiW5K/tU3jhBDP/kr&#xA;ydVUr8geW7A+Vb2S6BvU8yy3F3eTXB5Pc29x+7haSlKepbKjMq0VSxCgDFUv8m3935W8v2sGoyNP&#xA;5ftmlspL4ipsZrSZ7eT1aAUtHaIsjU/cg8T+7oVVeggxyxggh43FQRQqykfiDirG5PL17oTG68rA&#xA;C1BrP5dYhbZ17m0J2tpO4UfumPVVLcwqp+XtYsr3zTezWzEQ6lZQypC4KSrcWcskN4ksZ3R4hLbq&#xA;wP8ATFXeadXsrPzBpH1tm9GwS4vxHGpeR7h1FnbQog3Z5Rcy8FHUr7YqqQ6Df64RdeaABbH4oPLy&#xA;MGt0Hb62y7XMnip/dL2DEcyqyMmGCGp4xQxLudlVVUfcABirzzzlfah5n0O4SwLQeW5zFaQXRHxa&#xA;hcXkqW0JRTuLSKSUOzH++pQfu6l1Uy/MDy5py+UbV4OdnH5Zkt7y0mtzwkt4LYenK0Z3FUti5VWB&#xA;UkDkCNsVTbSdeuEvF0XXQtvrAB+rzqCtvfIoqZLckmjAbyQk8k/ylo5VTPVNI03VbU2uo26XMHIO&#xA;quN1dd1kRh8SOp3VlIIPQ4qkX1vU/K7KupXD6h5cJ4rqcxrc2XZRdMP72Ht632k6ychykCqK8jsF&#xA;8tW1jWraU0ummvWllI0CMa7/ABxxq48Qa4qkthr8/wCktaTSLdb7VtSv5Pq8bHjFb29oiWLT3Tjd&#xA;Y/XtpeCgcnOyigZlVTzS/KttBdJqepynVtbWtL+cDjDy+0tpDVkt07fD8TCnNnIriqY6rq2naTZP&#xA;e38whgQhQaFmZ2NFSNFBZ3Y7KqgknYDFWFeX4NQ85eZV8zatCYNE0WSRPL2mswYG63imu5uJKNJG&#xA;OUabkKS3HpzdVO5G/wAQeZBAvxaNoMqvO37M+ogckj67rag822/vCu/KNhirJcVdirsVdiqE1bSr&#xA;PVdOn0+8Utb3C0YqSrqwIZHRhujowDIw3VgCNxiqUaNdPfQXnlrzAiT6jbRendh1Hp3tpLVEuVXp&#xA;xkAKyL+y9R9niSqkdtokmn6yNNN9Np+ryrTR9bWjrfwRLUW17G/wTzwItKt+8aMc0cH1OKqfLrfm&#xA;DT/g1nSmniB31DSq3EfEH7T2zUuUJ/ljWX/WxVJPOV55G81aJJplzrcGlakQzadNct9Uu7e44lVc&#xA;Q3Hoy9yGWgqtRt1xVho8/wDl3z1qOk6Vr2qWWk2uiRtN5nt5rqGJZ9RYyWgtIHLgSQlVld2WoaN4&#xA;/wCbZV6avnXQpEVNJWfVzQeiNNheaFvAC5AW1X/ZSjFVjW/m3WaC6ddA05vtwW7ibUHHg04Ho2/g&#xA;wjEh/lkU4qqaxFZeWvJery6ZCLdLGyurpeFS5kSJpDIzseTyMwqzseRO5OKptpljDp+m2lhCAIbS&#xA;GOCMAUHGJQgoKnsMVSvy2EXUPMkCkGOLUxSOh+Ey2NrM43/meVm28cVUR5avtIZpPLFwkFuas2iX&#xA;NTZEk1PoMoMlrX/IDRjr6dd8VVB5sNr8GtaZeadINjLHE95bN4ss1qJOKe8yxn2xVhHnTzP5L0rW&#xA;bHzvpeu2BnsJFi8wWMdzEz3FjN+4eT0gWf1bfaSgFXCcTUqgCq/yn5k8napr97531XWrGOW7P1fy&#xA;5ZS3MQkhsIeSRzekSrercmR5FBHJUk47FmGKs0bzXLdVj0TSrvUJD0nmjextVJ6FprlUZ0P80Mcn&#xA;yxVb/hq71SRZvMtwl3EpDR6PACtihBqDKG+O5ZfGSibAiNW3xVU8yBW1Dy5bsVEUup/Ehr8Xo2Vz&#xA;OgFNtniVt/DFU21CyhvrC5spxWG6ieGUeKyKVb8DiqS6Lb2XmbyPo76tAtyl9Y2ly6vXksjxLIHV&#xA;xRkdWNVdSCDuKYq0LfzZo4ItXGv6cv2Le4cQ36L4LOR6U9OiiQI3dpGOKrj500NFZNWWfSCAfWGp&#xA;QPDCBTcG5o1q3vxlOKvMz+YHlzyNqWraZoWqWWrWuuIs3lm3huopVg1JfTtDaTuHb04QrROjNQJG&#xA;jj9jdVmPk288jeVdEj0y21uDVdSAVtRmtm+t3dxccQrOYbf1pewCrQ0Wg364qnb635h1AFNF0pre&#xA;M9NR1WsEfE/tJaqTcuR/JIIv9bFUhudEk1DWTpovptQ1eJaaxrbURbCCVam2so0+CCedGpVf3ixn&#xA;m7k+nyVT3WLprGGz8teX0WDULmL07UIq+nZWkVEe5ZelIwQsaftPQfZ5EKptpOlWeladBp9mpW3t&#xA;1opYlnZiSzu7Hd3diWdjuzEk7nFUXirsVdirsVdiqU+YdEl1COG6sZhaazYln068I5KCwHOKVRQv&#xA;DLxAkX2DCjKpCqEhl0/zZo89lfQyWV9buEvLUOBc2d0nxJJFIB1GzxSgUYUPiMVX6NrN3FdroeuM&#xA;q6uqlrW6UcIr6JOssQ/ZkX/dsX7PUVUg4qnrKrKVYBlYUZTuCD2OKsO17QNM0bU5PMtvpkE9nLEI&#xA;fMFqkCu7QR/Yuo0Cku8IqHUCrx+JRFKqYxeT/J1zAl3ptnDaLcKJY73SnayeRXHJW9a0aJnU1ruS&#xA;Dirja+a9JBe1uP09ZjraXXpwXij/AIquEVIZKDosiKT+1JiqzUb2y80+UtbsbFnFzNZ3FpcWcimK&#xA;5glmhZQksbDkjfFVTSjDdaqQcVTrSr+LUdLs9QhIMN5BHcRkGoKyoHFD8jiqV+X5YlufMl85SK2f&#xA;UWb1WIUcbezt7eRnJJHwvAwr4DFVBde1vXKf4bgjg049NcvlYxyL/NaWylHmU9pHZE6MnqDFVZfJ&#xA;ljOK6zd3WtORR1vJaW7DwNpAIbY/7KMn3xVhnm3RvLer6rZeRdF0izgs7qevmO6t4I4/TtYV9eW2&#xA;QxhDzmDKkjKaosg7uCFXeWdJ8raJrl35G1vSbKS1ikR/Ld3cW8TiW0uA8kNpIzh/3kLQyxx8jV0T&#xA;xUkqszPkrTIADpE91orr/drYzFYFHcC0l9W03/4xV8MVUW1rzBof/KQQJe6avXWrBGHpL/NdWhMj&#xA;oo7yRM47ssajFVXXrm3kn8tahC6T2Y1FWE6EOpW5s7i3iZGBp8TzoKjscVTfVNQh07TLvUJyBDZw&#xA;yXEpJoOMSF2qe2wxVJNOvbLyt5R0SxvmdrqGzt7O3s4lMlxPLDCqlIolHJj8NTtRRu1ACcVXi181&#xA;6sA91cfoGzPS0tfTnvGH/Ftw6vDHUdVjRiP2ZMVbk8neTreF7rUbOK8Fuple91VmvXjVByZvWu2l&#xA;ZFFK7EAYqlug6Bpms6nH5luNMggs4ojD5ftXgVHWCT7d1IhUFHmFAikVSPwLuoVZiqqqhVAVVFFU&#xA;bAAdhiqRazrN3Ldtoehsrauyhrq6Yc4rGJ+kso/akb/dUX7XU0UE4qsml0/yno8FlYwyXt9cOUs7&#xA;UuDc3l0/xPJLIR1O7yykUUVPgMVRfl7RJdPjmur6YXes3xV9RvAOKkqDwiiU1KQxciI19yxqzMSq&#xA;m2KuxV2KuxV2KuxV2KpH5g8v3N1cwavpE62eu2alI5HBMNxCTya2uVXcxk7qw+KNviX9pWVUoptH&#xA;82afNY3sD299ZSIbqzc8LqzuQCY5Y3XoepilQ0YdD1GKrbPW77SLmHS/Mkgb1WEWn65RUhuSdkjn&#xA;ChVhuD0pQJIfsUJ9NVWR4qxp9I1LQZ5Lvy/F9a06Zmlu9CLhKOxq0tk7kJGzftRMRGx3BQ8iyqaa&#xA;P5g0rVlcWkpFxDT6zZzK0VzCTWglhkCyJWmxIow3FRviqhrmgNdzx6np0i2eu2q8ba8Iqrx15G3u&#xA;FFPUhY9uqn4lo2Ksf8ieZ7a28oaimpxNp8nlSS4ttQs3PJ7eCBfXhWu3qKts6BXGz0qu2KoXyRo9&#xA;15h0Oxu9ZiKaQWa+h04n4Lu7uZWuZrqYDZ4fWlb6vH9krSQ1qgRVnt1dWtpbyXN1MlvbRKWlmlYI&#xA;iKOpZmIAHzxVj0mpav5iHoaL6mnaQ202tyLwllQ7FbGJxXf/AH9IvHoUD1qqq3Q9KsbTzVcwWcXC&#xA;00nT4be23LES3k0s12Wdqs7yejA7sTUnc1JxVrzPpOn3fmDSVv4FuLLUo7nTZ4SDvIFW9gk5LQq0&#xA;X1OQow3VmqCDiq9L/WfLo9HVhNqujp/daxEnO5hQdryGMVen+/ol/wBdVoXKqf2GoWGoWkd5YXMV&#xA;3aTDlFcQOskbDxVlJBxVg3njRb7RNFv7/QImlsQy31xpKk8Ybm2kF1FdWy/sr60SmeIbMKuo58hI&#xA;qiPPXme1uvJ2nrpaNqEnmt7e3060jPF7iC4X1plrvwVrVXDORxStW2xVkGiaA1rM+p6jIt5rtyvG&#xA;4u6UWNK1EFupr6cK+HVj8TVbFVfWPMGlaSqC7lJuJq/VrOFWluZiKVEUMYaR6V3IFFG5oN8VStNI&#xA;1LXp47vzBF9V06FlltNCDh6upqst66EpIy/sxKTGp3Jc8SqrJcVY5ea3favczaX5bkC+kxi1DXKK&#xA;8NsRs8cAYMs1wOlKFIz9upHpsqulm0fynp8NjZQPcX17I5tbNDzury5IBklkdup6GWVzRR1PQYqq&#xA;6BoF1a3M+ravOt5rl4OEkiAiG3hBqttbKdxGp3Zj8UjfE1PhVVU8xV2KuxV2KuxV2KuxV2KuxVKd&#xA;b8vR6hLDfWsxsdZtARZ6iihiFbdopUqvqwuR8UZI8VKsAwVQdrrMF87+X/MtnFbajOjIbST97aXs&#xA;dPia2dwBItPtRsOa9xxoxVUxa655bBNiJdZ0NRtp7NyvrZf+KJZCPrEY/wB9yNzH7LN8KYqnWlaz&#xA;pmrWxuNPnE0asY5VoUkjkX7UcsbhXjda7o4BHhiqnq3l/RtW9M39ssk0Ffq9ypaK4hLdTDPGUliJ&#xA;8UYHFUANB8wWn/HN1+VkGywalDHeRqvgGjNrcN83lbFXnv5oeS/OMrrrf17T301/qsHmu3S3uIEu&#xA;rG3nWZZJVEs5C27cufFqmJnBJoBirKJo/wA4GICy6KtjQ72PrR3XH9n0muVngrT+ZaYq1Zf4at76&#xA;CbzNBfRaqrhre714rLCsvRWgkhZ9OgkYmiiPg5/lxVnWKpHoAb9NeZWdVVvr8Kow6tGNPtSCd/52&#xA;cYq35g9D9LeWfU+3+kpPR6/b/Rt5X/hOWKp3irCtTbylLqc50aO6m17mTcyaASjeqNv9LlBSyLjs&#xA;t01fAYqpwp+baEGCfTo7Hq8us/vrxQDvyXT1trfpXo2KsY/LPyV5yiuJdd/SGmjTh9Zi8rQG0naG&#xA;1tLqYzyyW8InipHcScTGGclYlQAgErir0E6D5gu/+Olr8qodmg02GOzjZfAtIbq4X5pKuKo/SfL+&#xA;jaT6hsLZY5p6fWLli0txMV6GaeQvLKR4uxOKqmq6zpmk2wuNQnEMbMI4loXkkkb7McUaBnkdqbIg&#xA;JPhiqSm11zzGAb5ZdH0Nxvp6txvrkH/f8sZ/0eM/77jbmf2mX4kxVUutZgsXTy/5as4rnUYEVBaR&#xA;/urSyjp8LXLoCI1p9mNRzbsONWCqM0Ty9Hp8s19dTG+1m7AF5qLqFJVd1iiSrelChPwxgnxYsxLF&#xA;VNsVdirsVdirsVdirsVdirsVdirsVQmq6Tp2q2bWeoQLcW7EMFNQyupqro6kMjod1dSGU7gg4qkq&#xA;yeZPL/wziXXtGX7M6KDqMC7f3iLQXSjf4kpJ0+GRqtiq86d5d8yBNb0q7MN8v7tdW09wk44HeGYE&#xA;MsgU9Yp0YKf2QcVbOq+YtJourWR1K0rT9JaZGzSKPGayJeX2/cGQn+VRiqaaVrekatA02m3cV3Gh&#xA;4y+mwLRv3SRftI47qwBGKoxlVlKsAysKMp3BB7HFWKQXDeT5ksbvbym3w2GoO21gzNRbWck7Qb0h&#xA;k6L9hqfCWVZVJHHLG0cih43BV0YAqykUIIPUHFWNSaLqHl4/WfLitPpq73Hl5m+AKB1sGbaFx2iJ&#xA;9Jug9Mktiqn5a1nTtQ8x311YSF7TU7K2uoSylGM9vJNbXSOjBXR4aQq6Nup2OKrvNWs6fY67pL38&#xA;4t7LTo7nU7iX4jRgq2UMfBAWdpTeN6aAEsVoATTFV8em6t5iIuNZMmn6O28GhxuUllXqGvpUNd/9&#xA;8I3Hs5etAqyC2tbOytY7e1ijtrSBeMUMSrHGiL2VVoqgYqxmaV/OUgtraq+UlP8Apl30GpUG0MBB&#xA;r9Wr/eSdJPsrVCxxVlgAUAAUA2AHQDFUFqut6RpMCzaldxWkbnjF6jANI/ZI1+07nsqgk4qlY1Xz&#xA;Fq1V0myOm2lafpLU42WRh4w2QKS+378xkfysMVaGneXfLatrWrXZnviPSbV9QdXnPM7QwhQqxhz0&#xA;igRQx/ZJxVY0nmTzB8MAl0HRm+1O6gajOu/92jVFqp2+J6ydfhjajYqnWl6Tp2lWa2enwLb26ksV&#xA;WpLOxqzuxqzu53Z2JZjuTXFUXirsVdirsVdirsVdirsVdirsVdirsVdirsVSbVPKtheXLX9rJLpe&#xA;rNQHUrIrHKwUUUTKyvFOo7LKjAdqHfFUP+k/NGlfDqliNVtBQfpDTFpKo7tNZSMWoP8AimSRmP7C&#xA;4qsEHknzVO1xEYptTtQEkmgd7XUbcHf03ZDFdQ17o1K9xiqp+ivNdj/xztYS+hG/1bVIQz+ypc2/&#xA;olR7vHI2KtPretRxPFq3lyZ4ypEsljLDewFSKEcXNvcN8hBirHk1yw0AU0bUEttOWnHQ9dS402NA&#xA;TSlnc3USNGN6LGysnRV9MYqm2nfmj5OulH1i9TTnpVjdPGIBUVFLuJpbR6jeiyk4qlPmhLTR9ZsP&#xA;zA0qZJdLicweZVgYPGbS5Co14CtVBgZInmPVo03PwDFVLy+2n6zrd9+YOtXUVvofJbXy0lw4ihNv&#xA;al1F85chSZZHlaA0FI2rvyHFVOtQ/M/yvApFnONQalRLG8cVpSleRvJ2itqDqeLs1OinFUrbVtL1&#xA;xw2uammpWXUaFoUdxqFrtsfrc1tHI9zQ/slUj7MjEVxVkS67rc6qmmeXp1Sg4TX8sNnDxH+ShuLh&#xA;fkYRirX6K8133/HR1hLGE7/VtLhCv7q9zcesWHukcbYqpmDyT5VnW4lMUOp3QKRzTu91qNwBv6aM&#xA;5lupqdkWtOwxVf8ApPzPqhppliNKszsdQ1MVmYdmhs42DUPjM8bKf2GxVEaZ5WsLO5W+upJdU1ZQ&#xA;QNSvSryqG+0IVVUigU91iRQe9Tiqc4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUv1&#xA;Xy/ourGNtQs455oa/V7gjjPET1MUy8ZIz7owxVAf4e1u0/45GuzIg2S21KMahCo/1+UF2x93uDir&#xA;hqPnG1/3s0eC+jG3qaddASt7mC7W3RPl67YquHm62jAF7pup2cppWM2U1zTem8lkt1Ft/r4qgb3W&#xA;vyy1BqapNpbyPt6eorDHIea1I4XIVt16imKpYNG/IW9Qstl5WuUHwFhFpzgd+NQD44q2dJ/IexTm&#xA;bLytao3wcvS06MHvxrQYqmVjrP5Y6c1NKm0tJE29PTlhkkHFSacLYM32TttiqOPm62kBFlpup3ko&#xA;rSMWU1tXem0l6trFv/r4qtOo+cbr/ePR4LGM7epqN0DKvuILRbhH+Xrrirv8Pa3d/wDHX12Z0Oz2&#xA;2mxjT4WH+vynu1PulwMVR+leX9F0kyNp9nHBNNT6xcAcp5SOhlmblJIfd2OKphirsVdirsVdirsV&#xA;dirsVdirsVf/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:319B5F64E0ABE4119528C5E6D14672D4</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:339B5F64E0ABE4119528C5E6D14672D4</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:309B5F64E0ABE4119528C5E6D14672D4</stRef:instanceID>
            <stRef:documentID>uuid:2F9B5F64E0ABE4119528C5E6D14672D4</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>800.000000</stDim:w>
            <stDim:h>800.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Výchozí skupina vzorků</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Bílá</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>255</xapG:red>
                           <xapG:green>255</xapG:green>
                           <xapG:blue>255</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Černá</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>0</xapG:green>
                           <xapG:blue>0</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB červená</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>228</xapG:red>
                           <xapG:green>35</xapG:green>
                           <xapG:blue>34</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB žlutá</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>244</xapG:red>
                           <xapG:green>229</xapG:green>
                           <xapG:blue>0</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB zelená</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>103</xapG:red>
                           <xapG:green>175</xapG:green>
                           <xapG:blue>36</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB azurová</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>110</xapG:red>
                           <xapG:green>198</xapG:green>
                           <xapG:blue>216</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB modrá</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>50</xapG:red>
                           <xapG:green>74</xapG:green>
                           <xapG:blue>151</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB purpurová</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>178</xapG:red>
                           <xapG:green>83</xapG:green>
                           <xapG:blue>150</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=193 G=39 B=45</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>193</xapG:red>
                           <xapG:green>39</xapG:green>
                           <xapG:blue>45</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=237 G=28 B=36</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>228</xapG:red>
                           <xapG:green>37</xapG:green>
                           <xapG:blue>40</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=241 G=90 B=36</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>233</xapG:red>
                           <xapG:green>91</xapG:green>
                           <xapG:blue>42</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=247 G=147 B=30</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>242</xapG:red>
                           <xapG:green>146</xapG:green>
                           <xapG:blue>35</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=251 G=176 B=59</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>247</xapG:red>
                           <xapG:green>175</xapG:green>
                           <xapG:blue>61</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=252 G=238 B=33</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>248</xapG:red>
                           <xapG:green>232</xapG:green>
                           <xapG:blue>46</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=217 G=224 B=33</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>215</xapG:red>
                           <xapG:green>218</xapG:green>
                           <xapG:blue>46</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=140 G=198 B=63</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>143</xapG:red>
                           <xapG:green>190</xapG:green>
                           <xapG:blue>67</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=57 G=181 B=74</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>73</xapG:red>
                           <xapG:green>170</xapG:green>
                           <xapG:blue>76</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=146 B=69</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>147</xapG:green>
                           <xapG:blue>69</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=104 B=55</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>104</xapG:green>
                           <xapG:blue>54</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=34 G=181 B=115</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>55</xapG:red>
                           <xapG:green>171</xapG:green>
                           <xapG:blue>113</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=169 B=157</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>169</xapG:green>
                           <xapG:blue>157</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=41 G=171 B=226</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>49</xapG:red>
                           <xapG:green>170</xapG:green>
                           <xapG:blue>221</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=113 B=188</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>17</xapG:red>
                           <xapG:green>112</xapG:green>
                           <xapG:blue>179</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=46 G=49 B=146</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>51</xapG:red>
                           <xapG:green>54</xapG:green>
                           <xapG:blue>138</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=27 G=20 B=100</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>37</xapG:red>
                           <xapG:green>37</xapG:green>
                           <xapG:blue>88</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=102 G=45 B=145</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>99</xapG:red>
                           <xapG:green>50</xapG:green>
                           <xapG:blue>135</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=147 G=39 B=143</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>143</xapG:red>
                           <xapG:green>46</xapG:green>
                           <xapG:blue>134</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=158 G=0 B=93</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>157</xapG:red>
                           <xapG:green>15</xapG:green>
                           <xapG:blue>94</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=212 G=20 B=90</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>212</xapG:red>
                           <xapG:green>17</xapG:green>
                           <xapG:blue>90</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=237 G=30 B=121</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>229</xapG:red>
                           <xapG:green>39</xapG:green>
                           <xapG:blue>121</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=199 G=178 B=153</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>199</xapG:red>
                           <xapG:green>178</xapG:green>
                           <xapG:blue>153</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=153 G=134 B=117</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>153</xapG:red>
                           <xapG:green>134</xapG:green>
                           <xapG:blue>118</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=115 G=99 B=87</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>115</xapG:red>
                           <xapG:green>99</xapG:green>
                           <xapG:blue>87</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=83 G=71 B=65</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>83</xapG:red>
                           <xapG:green>70</xapG:green>
                           <xapG:blue>65</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=198 G=156 B=109</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>198</xapG:red>
                           <xapG:green>156</xapG:green>
                           <xapG:blue>108</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=166 G=124 B=82</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>166</xapG:red>
                           <xapG:green>124</xapG:green>
                           <xapG:blue>82</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=140 G=98 B=57</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>139</xapG:red>
                           <xapG:green>98</xapG:green>
                           <xapG:blue>56</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=117 G=76 B=36</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>116</xapG:red>
                           <xapG:green>76</xapG:green>
                           <xapG:blue>36</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=96 G=56 B=19</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>96</xapG:red>
                           <xapG:green>57</xapG:green>
                           <xapG:blue>21</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=66 G=33 B=11</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>65</xapG:red>
                           <xapG:green>34</xapG:green>
                           <xapG:blue>17</xapG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Grayscale</xapG:groupName>
                  <xapG:groupType>1</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=90</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>229</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=80</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>204</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=70</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>178</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=60</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>153</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=50</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>127</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=40</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>101</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=30</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>76</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=20</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>50</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=10</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>25</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=241 G=241  B=242</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>12</xapG:gray>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -642.766 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 642.766 li
642.766 642.766 li
642.766 0 li
cp
clp
[1 0 0 1 0 0 ]ct
320.954 120.492 mo
321.382 120.235 li
320.954 120.492 li
320.954 120.492 li
cp
315.167 134.492 mo
311.841 143.362 308.515 155.953 308.517 170.833 cv
308.517 170.833 li
308.517 185.512 311.747 202.418 321.418 220.206 cv
321.418 220.206 li
322.486 218.519 325.306 213.812 328.135 206.767 cv
328.135 206.767 li
331.727 197.827 335.316 185.166 335.316 170.291 cv
335.316 170.291 li
335.313 155.614 331.824 138.779 321.379 121.202 cv
321.379 121.202 li
320.384 122.879 317.78 127.523 315.167 134.492 cv
315.167 134.492 li
cp
320.946 221.424 mo
310.877 203.213 307.516 185.862 307.516 170.833 cv
307.516 170.833 li
307.52 140.771 320.936 120.008 320.962 119.963 cv
320.962 119.963 li
321.396 119.292 li
321.811 119.975 li
332.684 137.968 336.316 155.255 336.316 170.291 cv
336.316 170.291 li
336.313 200.365 321.823 221.42 321.794 221.465 cv
321.794 221.465 li
321.335 222.133 li
320.946 221.424 li
320.946 221.424 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
320.954 18.7568 mo
321.382 18.4995 li
320.954 18.7568 li
320.954 18.7568 li
cp
315.169 32.9604 mo
311.843 41.9458 308.515 54.6831 308.517 69.6821 cv
308.517 69.6821 li
308.517 84.4736 311.749 101.465 321.415 119.251 cv
321.415 119.251 li
322.482 117.538 325.304 112.755 328.135 105.617 cv
328.135 105.617 li
331.727 96.5596 335.316 83.752 335.316 68.7593 cv
335.316 68.7593 li
335.313 53.9683 331.825 37.0508 321.383 19.4731 cv
321.383 19.4731 li
320.389 21.1758 317.784 25.8955 315.169 32.9604 cv
315.169 32.9604 li
cp
320.946 120.476 mo
310.875 102.266 307.516 84.8271 307.516 69.6821 cv
307.516 69.6821 li
307.52 39.3882 320.936 18.2769 320.96 18.2314 cv
320.96 18.2314 li
321.393 17.5498 li
321.811 18.2397 li
332.684 36.2329 336.316 53.6084 336.316 68.7593 cv
336.316 68.7593 li
336.313 99.0659 321.823 120.469 321.796 120.515 cv
321.796 120.515 li
321.339 121.19 li
320.946 120.476 li
320.946 120.476 li
cp
f
326.653 127.635 mo
329.942 132.231 334.975 138.376 341.941 144.558 cv
341.941 144.558 li
355.749 156.807 377.126 169.195 407.62 169.977 cv
407.62 169.977 li
407.009 168.796 405.623 166.263 403.371 162.918 cv
403.371 162.918 li
400.211 158.229 395.363 151.973 388.615 145.721 cv
388.615 145.721 li
375.116 133.213 354.048 120.714 323.634 120.71 cv
323.634 120.71 li
323.162 120.71 322.688 120.713 322.214 120.719 cv
322.214 120.719 li
322.854 121.872 324.305 124.352 326.653 127.635 cv
326.653 127.635 li
cp
408.432 170.997 mo
345.992 169.823 320.962 120.515 320.936 120.46 cv
320.936 120.46 li
320.576 119.75 li
321.372 119.733 li
322.13 119.719 322.884 119.71 323.634 119.71 cv
323.634 119.71 li
385.064 119.725 408.873 170.232 408.896 170.282 cv
408.896 170.282 li
409.238 171.011 li
408.432 170.997 li
408.432 170.997 li
cp
f
239.804 77.6211 mo
243.069 82.1914 248.071 88.2993 255.005 94.4419 cv
255.005 94.4419 li
268.75 106.62 290.067 118.933 320.562 119.715 cv
320.562 119.715 li
319.955 118.54 318.583 116.023 316.349 112.702 cv
316.349 112.702 li
313.213 108.042 308.395 101.823 301.68 95.606 cv
301.68 95.606 li
288.245 83.1719 267.242 70.7461 236.836 70.7441 cv
236.836 70.7441 li
236.36 70.7441 235.882 70.7466 235.402 70.7529 cv
235.402 70.7529 li
236.038 71.8999 237.475 74.3628 239.804 77.6211 cv
239.804 77.6211 li
cp
321.373 120.735 mo
258.934 119.563 234.151 70.5469 234.126 70.4932 cv
234.126 70.4932 li
233.769 69.7842 li
234.562 69.7676 li
235.325 69.751 236.083 69.7427 236.836 69.7427 cv
236.836 69.7427 li
298.247 69.7573 321.813 119.97 321.836 120.021 cv
321.836 120.021 li
322.177 120.749 li
321.373 120.735 li
321.373 120.735 li
cp
f
322.87 119.76 mo
331.748 119.756 378.74 117.469 407.596 70.3125 cv
407.596 70.3125 li
407.047 70.2886 406.229 70.2642 405.172 70.2642 cv
405.172 70.2642 li
392.788 70.27 348.09 73.5898 322.219 119.756 cv
322.219 119.756 li
322.405 119.758 322.622 119.76 322.87 119.76 cv
322.87 119.76 li
cp
322.87 120.759 mo
321.892 120.759 321.364 120.734 321.356 120.732 cv
321.356 120.732 li
320.558 120.693 li
320.945 119.993 li
347.014 72.6802 392.585 69.2583 405.172 69.2646 cv
405.172 69.2646 li
407.293 69.2646 408.483 69.3604 408.496 69.3623 cv
408.496 69.3623 li
409.3 69.4268 li
408.883 70.1187 li
379.811 118.362 332.01 120.759 322.895 120.759 cv
322.895 120.759 li
322.887 120.759 322.878 120.759 322.87 120.759 cv
322.87 120.759 li
cp
f
235.876 170.171 mo
244.651 170.167 291.633 167.902 320.521 120.687 cv
320.521 120.687 li
319.982 120.664 319.183 120.64 318.151 120.64 cv
318.151 120.64 li
305.856 120.646 261.162 123.946 235.261 170.167 cv
235.261 170.167 li
235.438 170.169 235.643 170.171 235.876 170.171 cv
235.876 170.171 li
cp
235.876 171.17 mo
234.923 171.17 234.407 171.145 234.398 171.145 cv
234.398 171.145 li
233.601 171.102 li
233.987 170.403 li
260.089 123.036 305.653 119.633 318.151 119.639 cv
318.151 119.639 li
320.24 119.639 321.412 119.734 321.424 119.736 cv
321.424 119.736 li
322.226 119.802 li
321.811 120.492 li
292.704 168.795 244.912 171.17 235.9 171.17 cv
235.9 171.17 li
235.893 171.17 235.884 171.17 235.876 171.17 cv
235.876 171.17 li
cp
f
320.954 221.44 mo
321.382 221.183 li
320.954 221.44 li
320.954 221.44 li
cp
315.167 235.249 mo
311.841 244.006 308.515 256.459 308.517 271.229 cv
308.517 271.229 li
308.517 285.798 311.749 302.625 321.421 320.412 cv
321.421 320.412 li
322.489 318.75 325.308 314.113 328.137 307.16 cv
328.137 307.16 li
331.727 298.331 335.316 285.808 335.316 271.046 cv
335.316 271.046 li
335.313 256.477 331.824 239.723 321.376 222.146 cv
321.376 222.146 li
320.38 223.798 317.778 228.37 315.167 235.249 cv
315.167 235.249 li
cp
320.946 321.625 mo
310.877 303.416 307.516 286.147 307.516 271.229 cv
307.516 271.229 li
307.52 241.386 320.938 220.955 320.964 220.907 cv
320.964 220.907 li
321.398 220.244 li
321.811 220.924 li
332.684 238.915 336.316 256.119 336.316 271.046 cv
336.316 271.046 li
336.313 300.899 321.821 321.623 321.792 321.668 cv
321.792 321.668 li
321.333 322.325 li
320.946 321.625 li
320.946 321.625 li
cp
f
326.65 228.474 mo
329.939 233.009 334.972 239.07 341.938 245.168 cv
341.938 245.168 li
355.745 257.25 377.12 269.471 407.615 270.252 cv
407.615 270.252 li
407.001 269.083 405.618 266.589 403.374 263.3 cv
403.374 263.3 li
400.216 258.675 395.368 252.505 388.624 246.334 cv
388.624 246.334 li
375.13 233.994 354.067 221.661 323.662 221.659 cv
323.662 221.659 li
323.183 221.659 322.702 221.662 322.219 221.667 cv
322.219 221.667 li
322.862 222.81 324.311 225.249 326.65 228.474 cv
326.65 228.474 li
cp
408.434 271.271 mo
345.996 270.101 320.963 221.466 320.938 221.412 cv
320.938 221.412 li
320.573 220.699 li
321.371 220.682 li
322.14 220.666 322.904 220.657 323.662 220.657 cv
323.662 220.657 li
385.065 220.672 408.872 270.504 408.895 270.556 cv
408.895 270.556 li
409.243 271.287 li
408.434 271.271 li
408.434 271.271 li
cp
f
239.681 178.089 mo
242.96 182.713 247.98 188.893 254.932 195.108 cv
254.932 195.108 li
268.718 207.427 290.068 219.881 320.564 220.665 cv
320.564 220.665 li
319.956 219.48 318.575 216.928 316.324 213.559 cv
316.324 213.559 li
313.174 208.845 308.337 202.556 301.602 196.267 cv
301.602 196.267 li
288.125 183.691 267.08 171.124 236.663 171.122 cv
236.663 171.122 li
236.194 171.122 235.724 171.125 235.251 171.13 cv
235.251 171.13 li
235.888 172.287 237.334 174.784 239.681 178.089 cv
239.681 178.089 li
cp
321.373 221.682 mo
258.93 220.508 234.003 170.922 233.978 170.869 cv
233.978 170.869 li
233.623 170.162 li
234.414 170.146 li
235.168 170.129 235.919 170.123 236.663 170.123 cv
236.663 170.123 li
298.101 170.137 321.813 220.919 321.836 220.971 cv
321.836 220.971 li
322.177 221.698 li
321.373 221.682 li
321.373 221.682 li
cp
f
322.595 220.701 mo
330.729 220.699 378.414 218.613 407.581 170.953 cv
407.581 170.953 li
407.096 170.934 406.403 170.917 405.52 170.917 cv
405.52 170.917 li
393.669 170.922 348.349 174.079 322.223 220.699 cv
322.223 220.699 li
322.335 220.7 322.459 220.701 322.595 220.701 cv
322.595 220.701 li
cp
322.595 221.703 mo
321.795 221.7 321.367 221.682 321.359 221.682 cv
321.359 221.682 li
320.557 221.644 li
320.945 220.94 li
347.272 173.165 393.469 169.911 405.52 169.917 cv
405.52 169.917 li
407.412 169.917 408.47 169.996 408.479 169.998 cv
408.479 169.998 li
409.29 170.058 li
408.87 170.754 li
379.475 219.533 330.946 221.703 322.606 221.703 cv
322.606 221.703 li
322.604 221.703 322.599 221.703 322.595 221.703 cv
322.595 221.703 li
cp
f
236.043 271.146 mo
244.723 271.141 291.606 268.896 320.522 221.635 cv
320.522 221.635 li
319.989 221.612 319.206 221.589 318.194 221.59 cv
318.194 221.59 li
305.985 221.594 261.383 224.878 235.461 271.142 cv
235.461 271.142 li
235.63 271.144 235.824 271.146 236.043 271.146 cv
236.043 271.146 li
cp
236.043 272.146 mo
235.11 272.145 234.606 272.12 234.598 272.12 cv
234.598 272.12 li
233.798 272.079 li
234.185 271.38 li
260.309 223.971 305.783 220.583 318.194 220.589 cv
318.194 220.589 li
320.254 220.589 321.412 220.684 321.422 220.684 cv
321.422 220.684 li
322.228 220.748 li
321.811 221.44 li
292.665 269.809 244.945 272.146 236.055 272.146 cv
236.055 272.146 li
236.051 272.146 236.047 272.146 236.043 272.146 cv
236.043 272.146 li
cp
f
320.955 321.641 mo
321.383 321.383 li
320.955 321.641 li
320.955 321.641 li
cp
315.167 335.382 mo
311.842 344.102 308.517 356.504 308.517 371.233 cv
308.517 371.233 li
308.517 385.767 311.75 402.562 321.422 420.353 cv
321.422 420.353 li
322.49 418.699 325.308 414.088 328.136 407.165 cv
328.136 407.165 li
331.728 398.375 335.317 385.902 335.315 371.177 cv
335.315 371.177 li
335.315 356.643 331.825 339.92 321.375 322.343 cv
321.375 322.343 li
320.379 323.986 317.778 328.534 315.167 335.382 cv
315.167 335.382 li
cp
320.944 421.562 mo
310.876 403.354 307.516 386.112 307.516 371.233 cv
307.516 371.233 li
307.52 341.469 320.938 321.154 320.965 321.106 cv
320.965 321.106 li
321.402 320.449 li
321.81 321.125 li
332.683 339.113 336.318 356.289 336.316 371.177 cv
336.316 371.177 li
336.312 400.954 321.82 421.562 321.791 421.607 cv
321.791 421.607 li
321.331 422.263 li
320.944 421.562 li
320.944 421.562 li
cp
f
326.652 328.653 mo
329.941 333.175 334.976 339.221 341.94 345.302 cv
341.94 345.302 li
355.752 357.354 377.13 369.541 407.625 370.322 cv
407.625 370.322 li
407.01 369.154 405.626 366.669 403.383 363.393 cv
403.383 363.393 li
400.225 358.778 395.378 352.622 388.631 346.47 cv
388.631 346.47 li
375.134 334.161 354.07 321.862 323.665 321.859 cv
323.665 321.859 li
323.186 321.859 322.704 321.862 322.22 321.868 cv
322.22 321.868 li
322.865 323.008 324.313 325.439 326.652 328.653 cv
326.652 328.653 li
cp
408.444 371.34 mo
346.007 370.168 320.964 321.667 320.939 321.612 cv
320.939 321.612 li
320.571 320.899 li
321.371 320.883 li
322.142 320.866 322.906 320.86 323.665 320.86 cv
323.665 320.86 li
385.065 320.873 408.881 370.573 408.903 370.626 cv
408.903 370.626 li
409.255 371.356 li
408.444 371.34 li
408.444 371.34 li
cp
f
239.804 278.708 mo
243.069 283.284 248.071 289.402 255.005 295.556 cv
255.005 295.556 li
268.752 307.75 290.069 320.081 320.563 320.865 cv
320.563 320.865 li
319.958 319.69 318.584 317.167 316.349 313.838 cv
316.349 313.838 li
313.211 309.171 308.395 302.942 301.678 296.717 cv
301.678 296.717 li
288.243 284.265 267.24 271.82 236.832 271.818 cv
236.832 271.818 li
236.356 271.818 235.88 271.821 235.401 271.827 cv
235.401 271.827 li
236.036 272.975 237.474 275.442 239.804 278.708 cv
239.804 278.708 li
cp
321.373 321.883 mo
258.934 320.709 234.151 271.623 234.126 271.568 cv
234.126 271.568 li
233.769 270.86 li
234.56 270.842 li
235.323 270.826 236.079 270.817 236.832 270.817 cv
236.832 270.817 li
298.245 270.833 321.813 321.118 321.836 321.172 cv
321.836 321.172 li
322.177 321.897 li
321.373 321.883 li
321.373 321.883 li
cp
f
322.659 320.904 mo
330.979 320.899 378.489 318.767 407.581 271.227 cv
407.581 271.227 li
407.08 271.207 406.358 271.188 405.434 271.188 cv
405.434 271.188 li
393.451 271.194 348.285 274.391 322.222 320.902 cv
322.222 320.902 li
322.353 320.903 322.498 320.904 322.659 320.904 cv
322.659 320.904 li
cp
322.659 321.903 mo
321.82 321.903 321.367 321.882 321.359 321.882 cv
321.359 321.882 li
320.557 321.845 li
320.945 321.141 li
347.208 273.478 393.252 270.182 405.434 270.188 cv
405.434 270.188 li
407.381 270.188 408.47 270.271 408.479 270.273 cv
408.479 270.273 li
409.29 270.334 li
408.87 271.03 li
379.563 319.66 331.242 321.903 322.683 321.903 cv
322.683 321.903 li
322.675 321.903 322.667 321.903 322.659 321.903 cv
322.659 321.903 li
cp
f
236.196 371.183 mo
245.253 371.181 291.771 368.819 320.523 321.833 cv
320.523 321.833 li
319.957 321.808 319.105 321.781 317.998 321.781 cv
317.998 321.781 li
305.517 321.787 261.244 325.155 235.459 371.179 cv
235.459 371.179 li
235.666 371.182 235.912 371.184 236.196 371.183 cv
236.196 371.183 li
cp
236.196 372.184 mo
235.164 372.184 234.605 372.154 234.597 372.154 cv
234.597 372.154 li
233.798 372.111 li
234.185 371.414 li
260.171 324.252 305.31 320.775 317.998 320.78 cv
317.998 320.78 li
320.184 320.782 321.413 320.883 321.425 320.885 cv
321.425 320.885 li
322.226 320.951 li
321.812 321.64 li
292.839 369.72 245.514 372.184 236.219 372.184 cv
236.219 372.184 li
236.212 372.184 236.203 372.184 236.196 372.184 cv
236.196 372.184 li
cp
f
320.955 421.578 mo
321.382 421.321 li
320.955 421.578 li
320.955 421.578 li
cp
315.167 435.556 mo
311.84 444.409 308.517 456.983 308.517 471.852 cv
308.517 471.852 li
308.517 486.517 311.75 503.412 321.418 521.202 cv
321.418 521.202 li
322.485 519.519 325.305 514.819 328.135 507.785 cv
328.135 507.785 li
331.726 498.858 335.317 486.215 335.315 471.354 cv
335.315 471.354 li
335.315 456.689 331.824 439.864 321.379 422.287 cv
321.379 422.287 li
320.384 423.96 317.781 428.596 315.167 435.556 cv
315.167 435.556 li
cp
320.944 522.418 mo
310.876 504.207 307.516 486.865 307.516 471.852 cv
307.516 471.852 li
307.521 441.816 320.936 421.094 320.963 421.048 cv
320.963 421.048 li
321.397 420.378 li
321.81 421.063 li
332.685 439.055 336.317 456.333 336.317 471.354 cv
336.317 471.354 li
336.312 501.401 321.822 522.416 321.795 522.46 cv
321.795 522.46 li
321.336 523.126 li
320.944 522.418 li
320.944 522.418 li
cp
f
326.652 428.691 mo
329.941 433.271 334.974 439.393 341.938 445.552 cv
341.938 445.552 li
355.748 457.757 377.124 470.098 407.621 470.881 cv
407.621 470.881 li
407.008 469.704 405.623 467.181 403.371 463.851 cv
403.371 463.851 li
400.212 459.179 395.363 452.946 388.618 446.716 cv
388.618 446.716 li
375.12 434.254 354.052 421.8 323.64 421.796 cv
323.64 421.796 li
323.166 421.796 322.69 421.798 322.214 421.805 cv
322.214 421.805 li
322.855 422.953 324.306 425.423 326.652 428.691 cv
326.652 428.691 li
cp
408.433 471.898 mo
345.994 470.726 320.963 421.601 320.938 421.547 cv
320.938 421.547 li
320.578 420.839 li
321.371 420.82 li
322.133 420.803 322.889 420.797 323.64 420.797 cv
323.64 420.797 li
385.063 420.812 408.873 471.134 408.894 471.185 cv
408.894 471.185 li
409.239 471.913 li
408.433 471.898 li
408.433 471.898 li
cp
f
239.805 378.631 mo
243.07 383.209 248.07 389.33 255.003 395.485 cv
255.003 395.485 li
268.75 407.686 290.069 420.021 320.563 420.802 cv
320.563 420.802 li
319.957 419.626 318.584 417.104 316.348 413.774 cv
316.348 413.774 li
313.212 409.105 308.395 402.875 301.68 396.646 cv
301.68 396.646 li
288.242 384.19 267.239 371.741 236.833 371.738 cv
236.833 371.738 li
236.356 371.738 235.879 371.741 235.4 371.747 cv
235.4 371.747 li
236.035 372.896 237.473 375.364 239.805 378.631 cv
239.805 378.631 li
cp
321.374 421.819 mo
258.932 420.649 234.151 371.543 234.126 371.487 cv
234.126 371.487 li
233.771 370.781 li
234.561 370.763 li
235.323 370.746 236.082 370.74 236.833 370.738 cv
236.833 370.738 li
298.244 370.752 321.814 421.058 321.835 421.107 cv
321.835 421.107 li
322.177 421.836 li
321.374 421.819 li
321.374 421.819 li
cp
f
322.773 420.843 mo
331.401 420.841 378.632 418.618 407.594 371.293 cv
407.594 371.293 li
407.065 371.271 406.29 371.249 405.293 371.251 cv
405.293 371.251 li
393.085 371.256 348.178 374.52 322.222 420.841 cv
322.222 420.841 li
322.382 420.843 322.566 420.844 322.773 420.843 cv
322.773 420.843 li
cp
322.773 421.844 mo
321.86 421.844 321.364 421.819 321.358 421.819 cv
321.358 421.819 li
320.555 421.781 li
320.944 421.078 li
347.101 373.609 392.884 370.244 405.293 370.25 cv
405.293 370.25 li
407.336 370.25 408.48 370.342 408.493 370.342 cv
408.493 370.342 li
409.298 370.406 li
408.882 371.1 li
379.702 419.516 331.665 421.844 322.797 421.844 cv
322.797 421.844 li
322.789 421.844 322.78 421.844 322.773 421.844 cv
322.773 421.844 li
cp
f
236.019 471.107 mo
245.143 471.105 291.786 468.743 320.525 421.769 cv
320.525 421.769 li
320.506 421.768 320.487 421.767 320.468 421.766 cv
320.468 421.766 li
319.896 421.741 319.055 421.716 317.971 421.718 cv
317.971 421.718 li
305.424 421.724 261.038 425.098 235.262 471.104 cv
235.262 471.104 li
235.474 471.106 235.727 471.108 236.019 471.107 cv
236.019 471.107 li
cp
236.019 472.108 mo
234.972 472.108 234.406 472.079 234.398 472.079 cv
234.398 472.079 li
233.598 472.035 li
233.986 471.338 li
259.962 424.192 305.219 420.711 317.971 420.717 cv
317.971 420.717 li
320.173 420.717 321.412 420.822 321.425 420.822 cv
321.425 420.822 li
322.225 420.889 li
321.81 421.58 li
292.853 469.636 245.403 472.108 236.042 472.108 cv
236.042 472.108 li
236.035 472.108 236.026 472.108 236.019 472.108 cv
236.019 472.108 li
cp
f
320.954 522.436 mo
321.383 522.178 li
320.954 522.436 li
320.954 522.436 li
cp
315.168 536.729 mo
311.842 545.766 308.517 558.569 308.517 573.621 cv
308.517 573.621 li
308.517 588.464 311.748 605.493 321.413 623.281 cv
321.413 623.281 li
322.479 621.559 325.301 616.741 328.134 609.557 cv
328.134 609.557 li
331.727 600.447 335.316 587.572 335.316 572.529 cv
335.316 572.529 li
335.314 557.685 331.826 540.728 321.384 523.154 cv
321.384 523.154 li
320.391 524.867 317.784 529.619 315.168 536.729 cv
315.168 536.729 li
cp
320.943 624.508 mo
310.876 606.295 307.515 588.817 307.517 573.621 cv
307.517 573.621 li
307.519 543.225 320.933 521.956 320.958 521.909 cv
320.958 521.909 li
321.391 521.225 li
321.811 521.918 li
332.684 539.909 336.318 557.325 336.316 572.529 cv
336.316 572.529 li
336.313 602.939 321.824 624.5 321.798 624.544 cv
321.798 624.544 li
321.34 625.227 li
320.943 624.508 li
320.943 624.508 li
cp
f
326.691 529.531 mo
330.006 534.102 335.073 540.214 342.071 546.36 cv
342.071 546.36 li
355.946 558.54 377.387 570.859 407.882 571.644 cv
407.882 571.644 li
407.263 570.467 405.865 567.949 403.598 564.63 cv
403.598 564.63 li
400.415 559.967 395.534 553.744 388.756 547.525 cv
388.756 547.525 li
375.191 535.087 354.06 522.656 323.646 522.654 cv
323.646 522.654 li
323.171 522.654 322.695 522.655 322.22 522.662 cv
322.22 522.662 li
322.867 523.81 324.33 526.272 326.691 529.531 cv
326.691 529.531 li
cp
408.699 572.66 mo
346.261 571.488 320.965 522.461 320.938 522.406 cv
320.938 522.406 li
320.573 521.696 li
321.37 521.677 li
322.135 521.66 322.893 521.653 323.646 521.653 cv
323.646 521.653 li
385.069 521.667 409.139 571.894 409.159 571.944 cv
409.159 571.944 li
409.511 572.677 li
408.699 572.66 li
408.699 572.66 li
cp
f
239.68 479.033 mo
242.961 483.661 247.98 489.849 254.933 496.07 cv
254.933 496.07 li
268.716 508.405 290.067 520.874 320.565 521.659 cv
320.565 521.659 li
319.958 520.475 318.577 517.92 316.324 514.544 cv
316.324 514.544 li
313.173 509.824 308.335 503.526 301.6 497.231 cv
301.6 497.231 li
288.125 484.641 267.077 472.058 236.662 472.056 cv
236.662 472.056 li
236.193 472.056 235.723 472.059 235.252 472.064 cv
235.252 472.064 li
235.888 473.222 237.333 475.722 239.68 479.033 cv
239.68 479.033 li
cp
321.373 522.676 mo
258.93 521.501 234.003 471.857 233.979 471.803 cv
233.979 471.803 li
233.625 471.098 li
234.412 471.081 li
235.168 471.062 235.918 471.056 236.662 471.056 cv
236.662 471.056 li
298.099 471.07 321.815 521.913 321.836 521.966 cv
321.836 521.966 li
322.175 522.692 li
321.373 522.676 li
321.373 522.676 li
cp
f
322.519 521.693 mo
330.428 521.691 378.321 519.666 407.578 471.856 cv
407.578 471.856 li
407.112 471.839 406.454 471.822 405.621 471.824 cv
405.621 471.824 li
393.931 471.829 348.423 474.938 322.223 521.692 cv
322.223 521.692 li
322.314 521.692 322.412 521.693 322.519 521.693 cv
322.519 521.693 li
cp
322.519 522.693 mo
321.769 522.693 321.369 522.677 321.36 522.677 cv
321.36 522.677 li
320.554 522.641 li
320.946 521.936 li
347.345 474.02 393.733 470.818 405.621 470.822 cv
405.621 470.822 li
407.451 470.824 408.469 470.898 408.48 470.9 cv
408.48 470.9 li
409.29 470.959 li
408.87 471.656 li
379.397 520.561 330.698 522.693 322.543 522.693 cv
322.543 522.693 li
322.535 522.693 322.526 522.693 322.519 522.693 cv
322.519 522.693 li
cp
f
236.043 572.142 mo
244.721 572.138 291.606 569.893 320.523 522.628 cv
320.523 522.628 li
319.989 522.604 319.207 522.582 318.195 522.584 cv
318.195 522.584 li
305.988 522.59 261.384 525.874 235.459 572.139 cv
235.459 572.139 li
235.628 572.141 235.823 572.142 236.043 572.142 cv
236.043 572.142 li
cp
236.043 573.142 mo
235.108 573.142 234.606 573.116 234.598 573.116 cv
234.598 573.116 li
233.797 573.076 li
234.185 572.375 li
260.308 524.964 305.785 521.577 318.195 521.582 cv
318.195 521.582 li
320.257 521.584 321.412 521.677 321.422 521.679 cv
321.422 521.679 li
322.228 521.743 li
321.81 522.436 li
292.663 570.806 244.941 573.142 236.055 573.142 cv
236.055 573.142 li
236.051 573.142 236.047 573.142 236.043 573.142 cv
236.043 573.142 li
cp
f
408.015 170.754 mo
408.443 170.496 li
408.015 170.754 li
408.015 170.754 li
cp
402.227 184.583 mo
398.902 193.351 395.575 205.817 395.577 220.597 cv
395.577 220.597 li
395.577 235.179 398.807 252.013 408.48 269.802 cv
408.48 269.802 li
409.549 268.139 412.367 263.495 415.195 256.528 cv
415.195 256.528 li
418.787 247.688 422.377 235.153 422.375 220.378 cv
422.375 220.378 li
422.375 205.798 418.884 189.038 408.438 171.46 cv
408.438 171.46 li
407.44 173.115 404.838 177.694 402.227 184.583 cv
402.227 184.583 li
cp
408.004 271.013 mo
397.935 252.804 394.576 235.528 394.576 220.597 cv
394.576 220.597 li
394.58 190.734 407.996 170.268 408.025 170.222 cv
408.025 170.222 li
408.458 169.558 li
408.87 170.238 li
419.744 188.229 423.379 205.443 423.376 220.378 cv
423.376 220.378 li
423.372 250.255 408.88 271.011 408.852 271.057 cv
408.852 271.057 li
408.392 271.717 li
408.004 271.013 li
408.004 271.013 li
cp
f
408.027 70.1187 mo
408.456 69.8604 li
408.027 70.1187 li
408.027 70.1187 li
cp
402.235 84.0425 mo
398.907 92.8667 395.579 105.404 395.579 120.242 cv
395.579 120.242 li
395.579 134.872 398.813 151.739 408.479 169.523 cv
408.479 169.523 li
409.548 167.846 412.368 163.167 415.199 156.156 cv
415.199 156.156 li
418.791 147.261 422.386 134.655 422.384 119.823 cv
422.384 119.823 li
422.384 105.195 418.892 88.3999 408.451 70.8262 cv
408.451 70.8262 li
407.455 72.4932 404.851 77.1089 402.235 84.0425 cv
402.235 84.0425 li
cp
408.004 170.738 mo
397.938 152.535 394.578 135.221 394.578 120.242 cv
394.578 120.242 li
394.582 90.2651 408.009 69.6338 408.035 69.5879 cv
408.035 69.5879 li
408.469 68.9175 li
408.883 69.6025 li
419.753 87.5889 423.387 104.836 423.385 119.823 cv
423.385 119.823 li
423.381 149.814 408.881 170.735 408.854 170.781 cv
408.854 170.781 li
408.392 171.443 li
408.004 170.738 li
408.004 170.738 li
cp
f
413.716 177.884 mo
417.008 182.473 422.043 188.608 429.012 194.779 cv
429.012 194.779 li
442.823 207.009 464.206 219.374 494.7 220.157 cv
494.7 220.157 li
494.088 218.978 492.701 216.449 490.447 213.112 cv
490.447 213.112 li
487.287 208.43 482.435 202.184 475.687 195.942 cv
475.687 195.942 li
462.183 183.454 441.109 170.976 410.699 170.972 cv
410.699 170.972 li
410.226 170.972 409.751 170.975 409.275 170.981 cv
409.275 170.981 li
409.916 172.133 411.368 174.608 413.716 177.884 cv
413.716 177.884 li
cp
495.514 221.175 mo
433.074 220.003 408.021 170.776 407.997 170.722 cv
407.997 170.722 li
407.636 170.014 li
408.432 169.996 li
409.191 169.979 409.947 169.972 410.699 169.972 cv
410.699 169.972 li
472.122 169.987 495.952 220.411 495.975 220.463 cv
495.975 220.463 li
496.319 221.191 li
495.514 221.175 li
495.514 221.175 li
cp
f
410.156 170.03 mo
419.574 170.026 466.016 167.578 494.635 120.812 cv
494.635 120.812 li
494.037 120.783 493.122 120.753 491.924 120.753 cv
491.924 120.753 li
479.159 120.759 434.953 124.199 409.277 170.022 cv
409.277 170.022 li
409.519 170.026 409.812 170.03 410.156 170.03 cv
410.156 170.03 li
cp
410.156 171.029 mo
409.033 171.029 408.424 170.996 408.414 170.996 cv
408.414 170.996 li
407.62 170.949 li
408.004 170.254 li
433.879 123.293 478.953 119.747 491.924 119.753 cv
491.924 119.753 li
494.224 119.753 495.521 119.865 495.533 119.865 cv
495.533 119.865 li
496.336 119.932 li
495.92 120.621 li
467.082 168.478 419.834 171.029 410.18 171.029 cv
410.18 171.029 li
410.173 171.029 410.164 171.029 410.156 171.029 cv
410.156 171.029 li
cp
f
495.063 120.623 mo
495.492 120.364 li
495.063 120.623 li
495.063 120.623 li
cp
489.288 134.451 mo
485.968 143.219 482.648 155.684 482.648 170.462 cv
482.648 170.462 li
482.648 185.056 485.881 201.904 495.561 219.704 cv
495.561 219.704 li
496.629 218.037 499.442 213.394 502.265 206.432 cv
502.265 206.432 li
505.849 197.593 509.434 185.056 509.432 170.284 cv
509.432 170.284 li
509.432 155.691 505.939 138.916 495.485 121.327 cv
495.485 121.327 li
494.492 122.983 491.896 127.563 489.288 134.451 cv
489.288 134.451 li
cp
495.084 220.918 mo
485.009 202.697 481.647 185.405 481.647 170.462 cv
481.647 170.462 li
481.652 140.604 495.045 120.135 495.072 120.091 cv
495.072 120.091 li
495.507 119.422 li
495.919 120.105 li
506.799 138.108 510.436 155.334 510.433 170.284 cv
510.433 170.284 li
510.429 200.156 495.962 220.916 495.935 220.962 cv
495.935 220.962 li
495.472 221.623 li
495.084 220.918 li
495.084 220.918 li
cp
f
500.888 127.614 mo
504.255 132.127 509.393 138.163 516.465 144.231 cv
516.465 144.231 li
530.477 156.257 552.063 168.42 582.554 169.205 cv
582.554 169.205 li
581.916 168.036 580.493 165.558 578.199 162.294 cv
578.199 162.294 li
574.966 157.69 570.017 151.546 563.168 145.404 cv
563.168 145.404 li
549.467 133.12 528.192 120.842 497.781 120.84 cv
497.781 120.84 li
497.304 120.84 496.823 120.842 496.343 120.849 cv
496.343 120.849 li
497.01 121.989 498.499 124.413 500.888 127.614 cv
500.888 127.614 li
cp
583.385 170.223 mo
520.952 169.052 495.078 120.653 495.051 120.598 cv
495.051 120.598 li
494.667 119.883 li
495.479 119.864 li
496.252 119.847 497.02 119.84 497.781 119.84 cv
497.781 119.84 li
559.192 119.853 583.82 169.448 583.843 169.501 cv
583.843 169.501 li
584.21 170.24 li
583.385 170.223 li
583.385 170.223 li
cp
f
413.724 77.2998 mo
417.009 81.9189 422.04 88.0957 429.002 94.3062 cv
429.002 94.3062 li
442.804 106.616 464.177 119.062 494.673 119.846 cv
494.673 119.846 li
494.063 118.662 492.677 116.113 490.421 112.747 cv
490.421 112.747 li
487.265 108.035 482.417 101.749 475.673 95.4653 cv
475.673 95.4653 li
462.177 82.8994 441.112 70.3398 410.696 70.3374 cv
410.696 70.3374 li
410.228 70.3374 409.757 70.3403 409.285 70.3462 cv
409.285 70.3462 li
409.924 71.5029 411.373 73.9971 413.724 77.2998 cv
413.724 77.2998 li
cp
495.482 120.864 mo
433.039 119.69 408.033 70.1382 408.009 70.0854 cv
408.009 70.0854 li
407.651 69.3779 li
408.445 69.3613 li
409.199 69.3447 409.95 69.3359 410.696 69.3359 cv
410.696 69.3359 li
472.131 69.353 495.921 120.1 495.944 120.152 cv
495.944 120.152 li
496.284 120.878 li
495.482 120.864 li
495.482 120.864 li
cp
f
326.658 26.0747 mo
329.947 30.7744 334.983 37.0576 341.95 43.376 cv
341.95 43.376 li
355.764 55.8999 377.146 68.5547 407.641 69.3413 cv
407.641 69.3413 li
407.033 68.1431 405.644 65.5425 403.376 62.1064 cv
403.376 62.1064 li
400.214 57.3154 395.36 50.9219 388.607 44.5308 cv
388.607 44.5308 li
375.096 31.749 354.016 18.979 323.588 18.9771 cv
323.588 18.9771 li
323.127 18.9771 322.667 18.9795 322.205 18.9849 cv
322.205 18.9849 li
322.841 20.1548 324.295 22.7002 326.658 26.0747 cv
326.658 26.0747 li
cp
408.445 70.3594 mo
345.996 69.1851 320.959 18.7734 320.935 18.7217 cv
320.935 18.7217 li
320.585 18.0171 li
321.371 17.9985 li
322.115 17.9839 322.854 17.9775 323.588 17.9756 cv
323.588 17.9756 li
385.059 17.9941 408.889 69.603 408.909 69.6504 cv
408.909 69.6504 li
409.246 70.376 li
408.445 70.3594 li
408.445 70.3594 li
cp
f
408.014 271.029 mo
408.442 270.771 li
408.014 271.029 li
408.014 271.029 li
cp
402.23 284.801 mo
398.908 293.538 395.583 305.963 395.585 320.709 cv
395.585 320.709 li
395.585 335.263 398.815 352.075 408.491 369.872 cv
408.491 369.872 li
409.56 368.215 412.376 363.592 415.203 356.654 cv
415.203 356.654 li
418.791 347.847 422.379 335.351 422.377 320.611 cv
422.377 320.611 li
422.377 306.057 418.885 289.315 408.436 271.732 cv
408.436 271.732 li
407.44 273.38 404.841 277.939 402.23 284.801 cv
402.23 284.801 li
cp
408.017 371.082 mo
397.945 352.866 394.584 335.611 394.584 320.709 cv
394.584 320.709 li
394.588 290.912 407.997 270.542 408.024 270.497 cv
408.024 270.497 li
408.459 269.834 li
408.871 270.513 li
419.744 288.508 423.38 305.701 423.378 320.611 cv
423.378 320.611 li
423.374 350.421 408.891 371.082 408.863 371.128 cv
408.863 371.128 li
408.401 371.785 li
408.017 371.082 li
408.017 371.082 li
cp
f
413.718 278.138 mo
417.011 282.715 422.047 288.835 429.016 294.989 cv
429.016 294.989 li
442.832 307.189 464.216 319.524 494.711 320.307 cv
494.711 320.307 li
494.097 319.129 492.71 316.607 490.458 313.281 cv
490.458 313.281 li
487.296 308.611 482.443 302.382 475.693 296.155 cv
475.693 296.155 li
462.187 283.698 441.113 271.251 410.701 271.248 cv
410.701 271.248 li
410.228 271.248 409.753 271.251 409.276 271.257 cv
409.276 271.257 li
409.918 272.406 411.37 274.874 413.718 278.138 cv
413.718 278.138 li
cp
495.524 321.327 mo
433.085 320.153 408.022 271.052 407.997 271 cv
407.997 271 li
407.634 270.288 li
408.432 270.271 li
409.193 270.256 409.949 270.248 410.701 270.248 cv
410.701 270.248 li
472.122 270.263 495.965 320.56 495.986 320.61 cv
495.986 320.61 li
496.332 321.341 li
495.524 321.327 li
495.524 321.327 li
cp
f
410.194 270.306 mo
419.699 270.303 466.084 267.831 494.667 221.122 cv
494.667 221.122 li
494.631 221.12 494.593 221.118 494.554 221.116 cv
494.554 221.116 li
493.949 221.089 493.057 221.062 491.91 221.064 cv
491.91 221.064 li
479.079 221.068 434.923 224.534 409.277 270.297 cv
409.277 270.297 li
409.527 270.302 409.833 270.306 410.194 270.306 cv
410.194 270.306 li
cp
410.194 271.305 mo
409.046 271.305 408.425 271.271 408.414 271.271 cv
408.414 271.271 li
407.62 271.225 li
408.005 270.53 li
433.849 223.624 478.872 220.056 491.91 220.063 cv
491.91 220.063 li
494.238 220.063 495.553 220.176 495.565 220.178 cv
495.565 220.178 li
496.365 220.245 li
495.95 220.934 li
467.147 268.73 419.96 271.305 410.218 271.305 cv
410.218 271.305 li
410.211 271.305 410.202 271.305 410.194 271.305 cv
410.194 271.305 li
cp
f
408.025 371.1 mo
408.453 370.842 li
408.025 371.1 li
408.025 371.1 li
cp
402.232 385.003 mo
398.906 393.814 395.577 406.336 395.579 421.163 cv
395.579 421.163 li
395.579 435.781 398.811 452.641 408.479 470.427 cv
408.479 470.427 li
409.548 468.753 412.368 464.081 415.2 457.08 cv
415.2 457.08 li
418.793 448.197 422.386 435.604 422.383 420.786 cv
422.383 420.786 li
422.383 406.167 418.894 389.379 408.448 371.806 cv
408.448 371.806 li
407.453 373.469 404.849 378.077 402.232 385.003 cv
402.232 385.003 li
cp
408.005 471.641 mo
397.937 453.435 394.579 436.13 394.579 421.163 cv
394.579 421.163 li
394.581 391.208 408.007 370.613 408.034 370.567 cv
408.034 370.567 li
408.47 369.902 li
408.882 370.582 li
419.752 388.568 423.386 405.811 423.384 420.786 cv
423.384 420.786 li
423.38 450.751 408.882 471.639 408.853 471.683 cv
408.853 471.683 li
408.395 472.348 li
408.005 471.641 li
408.005 471.641 li
cp
f
413.727 378.284 mo
417.017 382.907 422.05 389.089 429.019 395.306 cv
429.019 395.306 li
442.828 407.623 464.209 420.077 494.704 420.863 cv
494.704 420.863 li
494.093 419.679 492.705 417.128 490.447 413.759 cv
490.447 413.759 li
487.287 409.045 482.436 402.755 475.686 396.466 cv
475.686 396.466 li
462.183 383.888 441.109 371.319 410.69 371.317 cv
410.69 371.317 li
410.223 371.317 409.753 371.319 409.282 371.325 cv
409.282 371.325 li
409.921 372.481 411.374 374.978 413.727 378.284 cv
413.727 378.284 li
cp
495.514 421.882 mo
433.072 420.706 408.03 371.12 408.006 371.065 cv
408.006 371.065 li
407.652 370.358 li
408.442 370.341 li
409.196 370.324 409.947 370.318 410.69 370.316 cv
410.69 370.316 li
472.131 370.333 495.955 421.119 495.976 421.17 cv
495.976 421.17 li
496.317 421.896 li
495.514 421.882 li
495.514 421.882 li
cp
f
408.015 471.656 mo
408.442 471.399 li
408.015 471.656 li
408.015 471.656 li
cp
402.325 485.528 mo
399.05 494.321 395.771 506.813 395.773 521.596 cv
395.773 521.596 li
395.773 536.309 399.013 553.289 408.743 571.185 cv
408.743 571.185 li
409.8 569.507 412.577 564.846 415.362 557.868 cv
415.362 557.868 li
418.903 549 422.443 536.434 422.443 521.652 cv
422.443 521.652 li
422.443 506.943 418.942 490.041 408.44 472.367 cv
408.44 472.367 li
407.457 474.035 404.896 478.63 402.325 485.528 cv
402.325 485.528 li
cp
408.271 572.403 mo
398.141 554.086 394.771 536.656 394.771 521.596 cv
394.771 521.596 li
394.776 491.732 407.995 471.173 408.022 471.129 cv
408.022 471.129 li
408.455 470.453 li
408.87 471.14 li
419.802 489.229 423.446 506.588 423.444 521.652 cv
423.444 521.652 li
423.439 551.539 409.148 572.398 409.123 572.443 cv
409.123 572.443 li
408.661 573.113 li
408.271 572.403 li
408.271 572.403 li
cp
f
413.797 478.85 mo
417.138 483.479 422.238 489.667 429.271 495.889 cv
429.271 495.889 li
443.215 508.221 464.727 520.69 495.221 521.479 cv
495.221 521.479 li
494.597 520.29 493.184 517.737 490.893 514.367 cv
490.893 514.367 li
487.683 509.647 482.765 503.349 475.949 497.053 cv
475.949 497.053 li
462.313 484.46 441.104 471.878 410.68 471.874 cv
410.68 471.874 li
410.215 471.874 409.747 471.877 409.279 471.883 cv
409.279 471.883 li
409.932 473.042 411.41 475.541 413.797 478.85 cv
413.797 478.85 li
cp
496.038 522.495 mo
433.595 521.32 408.024 471.681 407.997 471.628 cv
407.997 471.628 li
407.633 470.918 li
408.431 470.898 li
409.185 470.882 409.935 470.876 410.68 470.874 cv
410.68 470.874 li
472.131 470.891 496.476 521.73 496.497 521.779 cv
496.497 521.779 li
496.849 522.512 li
496.038 522.495 li
496.038 522.495 li
cp
f
410.272 470.934 mo
419.944 470.932 466.157 468.414 494.666 421.829 cv
494.666 421.829 li
494.047 421.798 493.083 421.764 491.815 421.766 cv
491.815 421.766 li
478.863 421.77 434.861 425.271 409.277 470.926 cv
409.277 470.926 li
409.545 470.931 409.877 470.934 410.272 470.934 cv
410.272 470.934 li
cp
410.272 471.935 mo
409.073 471.935 408.425 471.896 408.414 471.896 cv
408.414 471.896 li
407.62 471.853 li
408.005 471.156 li
433.787 424.362 478.655 420.758 491.815 420.764 cv
491.815 420.764 li
494.203 420.764 495.553 420.884 495.567 420.884 cv
495.567 420.884 li
496.365 420.952 li
495.95 421.64 li
467.225 469.311 420.207 471.935 410.296 471.935 cv
410.296 471.935 li
410.288 471.935 410.28 471.935 410.272 471.935 cv
410.272 471.935 li
cp
f
495.095 220.934 mo
495.523 220.675 li
495.095 220.934 li
495.095 220.934 li
cp
489.311 234.726 mo
485.988 243.473 482.663 255.915 482.665 270.672 cv
482.665 270.672 li
482.665 285.238 485.897 302.063 495.572 319.856 cv
495.572 319.856 li
496.641 318.195 499.457 313.565 502.283 306.619 cv
502.283 306.619 li
505.873 297.799 509.461 285.289 509.459 270.536 cv
509.459 270.536 li
509.459 255.973 505.966 239.221 495.517 221.638 cv
495.517 221.638 li
494.521 223.288 491.921 227.854 489.311 234.726 cv
489.311 234.726 li
cp
495.097 321.067 mo
485.024 302.853 481.664 285.586 481.664 270.672 cv
481.664 270.672 li
481.668 240.853 495.078 220.448 495.105 220.401 cv
495.105 220.401 li
495.54 219.739 li
495.95 220.417 li
506.826 238.413 510.462 255.616 510.46 270.536 cv
510.46 270.536 li
510.456 300.371 495.972 321.067 495.944 321.112 cv
495.944 321.112 li
495.483 321.772 li
495.097 321.067 li
495.097 321.067 li
cp
f
500.792 228.002 mo
504.082 232.555 509.114 238.644 516.081 244.768 cv
516.081 244.768 li
529.889 256.902 551.266 269.176 581.761 269.958 cv
581.761 269.958 li
581.146 268.785 579.763 266.278 577.516 262.974 cv
577.516 262.974 li
574.356 258.328 569.509 252.129 562.763 245.933 cv
562.763 245.933 li
549.265 233.542 528.198 221.155 497.792 221.152 cv
497.792 221.152 li
497.316 221.152 496.837 221.155 496.357 221.161 cv
496.357 221.161 li
497.001 222.306 498.45 224.759 500.792 228.002 cv
500.792 228.002 li
cp
582.577 270.979 mo
520.14 269.803 495.103 220.957 495.077 220.904 cv
495.077 220.904 li
494.714 220.193 li
495.512 220.177 li
496.275 220.16 497.035 220.153 497.792 220.153 cv
497.792 220.153 li
559.203 220.166 583.015 270.21 583.037 270.263 cv
583.037 270.263 li
583.384 270.993 li
582.577 270.979 li
582.577 270.979 li
cp
f
496.686 220.194 mo
504.737 220.192 553.261 218.157 582.512 170.367 cv
582.512 170.367 li
582.036 170.35 581.361 170.333 580.505 170.333 cv
580.505 170.333 li
568.636 170.338 522.561 173.458 496.362 220.193 cv
496.362 220.193 li
496.461 220.193 496.569 220.194 496.686 220.194 cv
496.686 220.194 li
cp
496.686 221.193 mo
495.919 221.193 495.508 221.176 495.501 221.176 cv
495.501 221.176 li
494.695 221.14 li
495.083 220.434 li
521.483 172.534 568.441 169.328 580.505 169.334 cv
580.505 169.334 li
582.365 169.334 583.403 169.411 583.413 169.411 cv
583.413 169.411 li
584.227 169.468 li
583.804 170.168 li
554.325 219.082 504.957 221.193 496.698 221.193 cv
496.698 221.193 li
496.693 221.193 496.689 221.193 496.686 221.193 cv
496.686 221.193 li
cp
f
495.105 321.084 mo
495.534 320.826 li
495.105 321.084 li
495.105 321.084 li
cp
489.313 334.985 mo
485.986 343.8 482.659 356.322 482.659 371.146 cv
482.659 371.146 li
482.659 385.765 485.892 402.625 495.56 420.408 cv
495.56 420.408 li
496.629 418.734 499.45 414.063 502.279 407.062 cv
502.279 407.062 li
505.873 398.179 509.465 385.587 509.463 370.769 cv
509.463 370.769 li
509.463 356.15 505.974 339.363 495.529 321.792 cv
495.529 321.792 li
494.533 323.456 491.929 328.063 489.313 334.985 cv
489.313 334.985 li
cp
495.084 421.624 mo
485.019 403.419 481.657 386.115 481.657 371.146 cv
481.657 371.146 li
481.662 341.192 495.088 320.599 495.115 320.552 cv
495.115 320.552 li
495.551 319.886 li
495.963 320.567 li
506.832 338.553 510.467 355.792 510.464 370.769 cv
510.464 370.769 li
510.46 400.733 495.961 421.622 495.934 421.666 cv
495.934 421.666 li
495.473 422.328 li
495.084 421.624 li
495.084 421.624 li
cp
f
500.803 328.15 mo
504.091 332.705 509.123 338.792 516.088 344.914 cv
516.088 344.914 li
529.893 357.051 551.267 369.322 581.762 370.104 cv
581.762 370.104 li
581.148 368.933 579.765 366.425 577.518 363.118 cv
577.518 363.118 li
574.358 358.475 569.512 352.275 562.768 346.081 cv
562.768 346.081 li
549.272 333.688 528.212 321.305 497.803 321.303 cv
497.803 321.303 li
497.328 321.303 496.85 321.305 496.369 321.312 cv
496.369 321.312 li
497.013 322.456 498.461 324.908 500.803 328.15 cv
500.803 328.15 li
cp
582.577 371.122 mo
520.14 369.949 495.115 321.107 495.09 321.052 cv
495.09 321.052 li
494.727 320.344 li
495.524 320.327 li
496.288 320.31 497.048 320.301 497.803 320.301 cv
497.803 320.301 li
559.212 320.316 583.015 370.356 583.037 370.407 cv
583.037 370.407 li
583.384 371.137 li
582.577 371.122 li
582.577 371.122 li
cp
f
497.045 320.353 mo
505.978 320.349 552.895 318.036 581.726 270.929 cv
581.726 270.929 li
581.172 270.905 580.346 270.88 579.274 270.881 cv
579.274 270.881 li
566.854 270.885 522.221 274.217 496.371 320.348 cv
496.371 320.348 li
496.563 320.351 496.788 320.353 497.045 320.353 cv
497.045 320.353 li
cp
497.045 321.352 mo
496.055 321.352 495.516 321.325 495.509 321.325 cv
495.509 321.325 li
494.711 321.282 li
495.096 320.584 li
521.145 273.308 566.649 269.874 579.274 269.88 cv
579.274 269.88 li
581.412 269.88 582.615 269.977 582.626 269.979 cv
582.626 269.979 li
583.432 270.043 li
583.014 270.734 li
553.967 318.937 506.241 321.352 497.069 321.352 cv
497.069 321.352 li
497.062 321.352 497.053 321.352 497.045 321.352 cv
497.045 321.352 li
cp
f
410.284 370.377 mo
419.96 370.373 466.174 367.854 494.678 321.272 cv
494.678 321.272 li
494.057 321.241 493.094 321.208 491.825 321.209 cv
491.825 321.209 li
478.876 321.213 434.87 324.715 409.289 370.367 cv
409.289 370.367 li
409.557 370.373 409.889 370.377 410.284 370.377 cv
410.284 370.377 li
cp
410.284 371.376 mo
409.085 371.376 408.434 371.341 408.426 371.341 cv
408.426 371.341 li
407.63 371.297 li
408.017 370.6 li
433.797 323.806 478.665 320.201 491.825 320.208 cv
491.825 320.208 li
494.213 320.208 495.564 320.327 495.577 320.327 cv
495.577 320.327 li
496.377 320.396 li
495.962 321.083 li
467.241 368.75 420.221 371.376 410.308 371.376 cv
410.308 371.376 li
410.3 371.376 410.292 371.376 410.284 371.376 cv
410.284 371.376 li
cp
f
495.095 421.641 mo
495.522 421.382 li
495.095 421.641 li
495.095 421.641 li
cp
489.502 435.396 mo
486.271 444.119 483.042 456.519 483.045 471.209 cv
483.045 471.209 li
483.045 485.958 486.294 503.018 496.08 521.018 cv
496.08 521.018 li
497.127 519.346 499.861 514.728 502.605 507.814 cv
502.605 507.814 li
506.1 499.012 509.594 486.534 509.594 471.837 cv
509.594 471.837 li
509.592 457.095 506.083 440.123 495.521 422.354 cv
495.521 422.354 li
494.548 424.016 492.03 428.566 489.502 435.396 cv
489.502 435.396 li
cp
495.608 522.237 mo
485.42 503.814 482.042 486.307 482.042 471.209 cv
482.042 471.209 li
482.046 441.532 495.075 421.158 495.101 421.112 cv
495.101 421.112 li
495.534 420.436 li
495.951 421.123 li
506.942 439.311 510.595 456.739 510.595 471.837 cv
510.595 471.837 li
510.59 501.552 496.488 522.231 496.461 522.277 cv
496.461 522.277 li
496.002 522.949 li
495.608 522.237 li
495.608 522.237 li
cp
f
501.09 428.739 mo
504.563 433.318 509.841 439.439 517.051 445.598 cv
517.051 445.598 li
531.34 457.797 553.197 470.131 583.687 470.923 cv
583.687 470.923 li
583.024 469.739 581.545 467.222 579.175 463.905 cv
579.175 463.905 li
575.837 459.235 570.748 453.003 563.759 446.773 cv
563.759 446.773 li
549.777 434.312 528.217 421.861 497.782 421.857 cv
497.782 421.857 li
497.317 421.857 496.852 421.86 496.384 421.866 cv
496.384 421.866 li
497.075 423.021 498.623 425.484 501.09 428.739 cv
501.09 428.739 li
cp
584.528 471.939 mo
522.093 470.766 495.112 421.675 495.085 421.622 cv
495.085 421.622 li
494.69 420.9 li
495.512 420.882 li
496.273 420.864 497.031 420.858 497.782 420.858 cv
497.782 420.858 li
559.245 420.875 584.959 471.165 584.982 471.214 cv
584.982 471.214 li
585.366 471.956 li
584.528 471.939 li
584.528 471.939 li
cp
f
496.674 420.9 mo
504.628 420.896 552.481 418.86 581.723 371.078 cv
581.723 371.078 li
581.253 371.061 580.589 371.044 579.745 371.044 cv
579.745 371.044 li
568.021 371.051 522.551 374.17 496.363 420.899 cv
496.363 420.899 li
496.459 420.899 496.563 420.9 496.674 420.9 cv
496.674 420.9 li
cp
496.674 421.899 mo
495.914 421.899 495.507 421.88 495.501 421.88 cv
495.501 421.88 li
494.694 421.845 li
495.085 421.14 li
521.474 373.251 567.824 370.039 579.745 370.045 cv
579.745 370.045 li
581.586 370.045 582.613 370.121 582.624 370.124 cv
582.624 370.124 li
583.435 370.183 li
583.014 370.881 li
553.56 419.756 504.896 421.899 496.698 421.899 cv
496.698 421.899 li
496.69 421.899 496.682 421.899 496.674 421.899 cv
496.674 421.899 li
cp
f
239.81 580.006 mo
243.075 584.758 248.079 591.113 255.011 597.5 cv
255.011 597.5 li
268.761 610.166 290.079 622.961 320.577 623.748 cv
320.577 623.748 li
319.979 622.542 318.6 619.907 316.339 616.42 cv
316.339 616.42 li
313.199 611.574 308.377 605.11 301.655 598.651 cv
301.655 598.651 li
288.206 585.728 267.186 572.815 236.754 572.813 cv
236.754 572.813 li
236.299 572.813 235.844 572.816 235.386 572.822 cv
235.386 572.822 li
236.013 573.999 237.456 576.58 239.81 580.006 cv
239.81 580.006 li
cp
321.373 624.766 mo
258.921 623.591 234.145 572.606 234.122 572.556 cv
234.122 572.556 li
233.783 571.854 li
234.559 571.837 li
235.298 571.82 236.03 571.813 236.754 571.813 cv
236.754 571.813 li
298.238 571.831 321.818 624.011 321.837 624.06 cv
321.837 624.06 li
322.164 624.78 li
321.373 624.766 li
321.373 624.766 li
cp
f
322.234 623.762 mo
329.239 623.64 378.204 621.051 407.835 572.638 cv
407.835 572.638 li
407.66 572.635 407.458 572.634 407.23 572.634 cv
407.23 572.634 li
398.203 572.638 349.59 574.963 322.234 623.762 cv
322.234 623.762 li
cp
321.656 624.767 mo
321.475 624.767 321.378 624.765 321.376 624.765 cv
321.376 624.765 li
320.539 624.756 li
320.943 624.025 li
348.503 574.02 398.027 571.629 407.23 571.634 cv
407.23 571.634 li
408.2 571.634 408.727 571.661 408.735 571.661 cv
408.735 571.661 li
409.567 571.704 li
409.137 572.42 li
378.255 623.657 326.038 624.767 321.668 624.767 cv
321.668 624.767 li
321.664 624.767 321.66 624.767 321.656 624.767 cv
321.656 624.767 li
cp
f
582.158 370.88 mo
582.587 370.623 li
582.158 370.88 li
582.158 370.88 li
cp
577.087 384.238 mo
574.116 392.724 571.146 404.79 571.146 419.113 cv
571.146 419.113 li
571.146 434.225 574.448 451.844 584.561 470.442 cv
584.561 470.442 li
585.55 468.776 588.057 464.3 590.573 457.624 cv
590.573 457.624 li
593.81 449.043 597.046 436.866 597.044 422.503 cv
597.044 422.503 li
597.044 407.423 593.482 389.93 582.598 371.615 cv
582.598 371.615 li
581.683 373.269 579.39 377.665 577.087 384.238 cv
577.087 384.238 li
cp
584.1 471.682 mo
573.576 452.651 570.145 434.575 570.145 419.113 cv
570.145 419.113 li
570.148 390.19 582.135 370.408 582.158 370.363 cv
582.158 370.363 li
582.587 369.656 li
583.014 370.363 li
594.341 389.103 598.047 407.062 598.045 422.503 cv
598.045 422.503 li
598.041 451.534 584.984 471.667 584.956 471.712 cv
584.956 471.712 li
584.502 472.413 li
584.1 471.682 li
584.1 471.682 li
cp
f
582.157 270.736 mo
582.586 270.477 li
582.157 270.736 li
582.157 270.736 li
cp
576.371 284.529 mo
573.045 293.28 569.72 305.722 569.72 320.482 cv
569.72 320.482 li
569.72 335.046 572.95 351.863 582.625 369.652 cv
582.625 369.652 li
583.694 367.992 586.512 363.361 589.34 356.413 cv
589.34 356.413 li
592.931 347.592 596.521 335.08 596.52 320.327 cv
596.52 320.327 li
596.52 305.766 593.028 289.018 582.579 271.44 cv
582.579 271.44 li
581.583 273.09 578.981 277.658 576.371 284.529 cv
576.371 284.529 li
cp
582.148 370.864 mo
572.08 352.653 568.719 335.393 568.719 320.482 cv
568.719 320.482 li
568.723 290.656 582.14 270.25 582.168 270.203 cv
582.168 270.203 li
582.604 269.54 li
583.014 270.22 li
593.887 288.21 597.522 305.409 597.521 320.327 cv
597.521 320.327 li
597.517 350.163 583.024 370.862 582.996 370.909 cv
582.996 370.909 li
582.535 371.565 li
582.148 370.864 li
582.148 370.864 li
cp
f
583.068 169.779 mo
583.498 169.522 li
583.068 169.779 li
583.068 169.779 li
cp
576.941 184.054 mo
573.445 193.085 569.95 205.898 569.952 221.019 cv
569.952 221.019 li
569.952 235.493 573.15 252.08 582.628 269.512 cv
582.628 269.512 li
583.731 267.82 586.701 263.014 589.68 255.807 cv
589.68 255.807 li
593.441 246.714 597.2 233.846 597.198 218.753 cv
597.198 218.753 li
597.198 204.268 593.74 187.732 583.487 170.479 cv
583.487 170.479 li
582.455 172.163 579.704 176.913 576.941 184.054 cv
576.941 184.054 li
cp
582.148 270.719 mo
572.276 252.87 568.951 235.841 568.951 221.019 cv
568.951 221.019 li
568.955 190.467 583.054 169.291 583.081 169.244 cv
583.081 169.244 li
583.517 168.587 li
583.925 169.263 li
594.6 186.925 598.201 203.911 598.199 218.753 cv
598.199 218.753 li
598.193 249.274 583.021 270.721 582.994 270.766 cv
582.994 270.766 li
582.533 271.418 li
582.148 270.719 li
582.148 270.719 li
cp
f
497.407 521.517 mo
506.076 521.517 554.636 519.341 583.678 471.896 cv
583.678 471.896 li
583.152 471.874 582.383 471.854 581.393 471.854 cv
581.393 471.854 li
569.02 471.858 522.912 475.089 496.888 521.515 cv
496.888 521.515 li
497.04 521.516 497.213 521.517 497.407 521.517 cv
497.407 521.517 li
cp
497.407 522.518 mo
496.512 522.518 496.032 522.496 496.023 522.496 cv
496.023 522.496 li
495.222 522.458 li
495.609 521.754 li
521.834 474.167 568.822 470.849 581.393 470.853 cv
581.393 470.853 li
583.426 470.853 584.564 470.94 584.578 470.942 cv
584.578 470.942 li
585.386 471.002 li
584.966 471.699 li
555.696 520.267 506.292 522.518 497.419 522.518 cv
497.419 522.518 li
497.416 522.518 497.41 522.518 497.407 522.518 cv
497.407 522.518 li
cp
f
410.401 571.693 mo
419.8 571.688 466.539 569.26 495.191 522.443 cv
495.191 522.443 li
495.16 522.441 495.129 522.44 495.097 522.438 cv
495.097 522.438 li
494.505 522.413 493.63 522.386 492.505 522.388 cv
492.505 522.388 li
479.732 522.393 435.251 525.82 409.546 571.686 cv
409.546 571.686 li
409.781 571.69 410.067 571.693 410.401 571.693 cv
410.401 571.693 li
cp
410.401 572.693 mo
409.292 572.693 408.689 572.661 408.682 572.661 cv
408.682 572.661 li
407.885 572.615 li
408.271 571.92 li
434.176 524.907 479.528 521.379 492.505 521.388 cv
492.505 521.388 li
494.789 521.388 496.077 521.496 496.09 521.498 cv
496.09 521.498 li
496.891 521.563 li
496.476 522.255 li
467.607 570.161 420.06 572.693 410.426 572.693 cv
410.426 572.693 li
410.418 572.693 410.409 572.693 410.401 572.693 cv
410.401 572.693 li
cp
f
220.468 220.566 mo
220.466 242.664 228.513 259.718 232.529 266.847 cv
232.529 266.847 li
233.296 268.208 233.912 269.202 234.298 269.804 cv
234.298 269.804 li
243.988 251.981 247.224 235.131 247.226 220.552 cv
247.226 220.552 li
247.226 198.449 239.777 181.558 236.06 174.511 cv
236.06 174.511 li
235.357 173.176 234.791 172.2 234.433 171.605 cv
234.433 171.605 li
223.96 189.216 220.468 205.989 220.468 220.566 cv
220.468 220.566 li
cp
233.929 271.058 mo
233.9 271.011 219.471 250.358 219.467 220.566 cv
219.467 220.566 li
219.465 205.635 223.102 188.409 233.997 170.387 cv
233.997 170.387 li
234.407 169.707 li
234.842 170.371 li
234.869 170.416 248.221 190.779 248.226 220.552 cv
248.226 220.552 li
248.226 235.478 244.86 252.77 234.777 271.013 cv
234.777 271.013 li
234.389 271.716 li
233.929 271.058 li
233.929 271.058 li
cp
f
220.416 119.784 mo
220.414 142.093 228.539 159.412 232.593 166.659 cv
232.593 166.659 li
233.371 168.049 233.995 169.064 234.385 169.675 cv
234.385 169.675 li
244.033 151.925 247.264 135.072 247.264 120.438 cv
247.264 120.438 li
247.266 98.1152 239.738 80.9551 235.983 73.7876 cv
235.983 73.7876 li
235.267 72.4238 234.692 71.4268 234.331 70.8218 cv
234.331 70.8218 li
223.904 88.3652 220.417 105.148 220.416 119.784 cv
220.416 119.784 li
cp
234.013 170.929 mo
233.986 170.884 219.419 149.859 219.416 119.784 cv
219.416 119.784 li
219.413 104.793 223.042 87.5557 233.896 69.6011 cv
233.896 69.6011 li
234.308 68.9204 li
234.744 69.5869 li
234.771 69.6338 248.26 90.3696 248.264 120.438 cv
248.264 120.438 li
248.266 135.418 244.906 152.718 234.862 170.886 cv
234.862 170.886 li
234.471 171.593 li
234.013 170.929 li
234.013 170.929 li
cp
f
232.164 171.122 mo
186.559 171.122 161.863 199.127 152.346 213.135 cv
152.346 213.135 li
150.088 216.46 148.697 218.979 148.082 220.157 cv
148.082 220.157 li
193.956 218.983 219.291 191.659 229.137 178.007 cv
229.137 178.007 li
231.491 174.744 232.949 172.278 233.593 171.13 cv
233.593 171.13 li
233.19 171.125 232.789 171.122 232.39 171.122 cv
232.39 171.122 li
232.314 171.122 232.239 171.122 232.164 171.122 cv
232.164 171.122 li
cp
146.807 220.462 mo
146.829 220.409 170.744 170.135 232.164 170.121 cv
232.164 170.121 li
232.915 170.121 233.671 170.127 234.436 170.146 cv
234.436 170.146 li
234.424 170.646 li
234.436 170.146 li
235.233 170.162 li
234.869 170.872 li
234.843 170.927 209.706 220.004 147.267 221.176 cv
147.267 221.176 li
146.459 221.19 li
146.807 220.462 li
146.807 220.462 li
cp
f
232.849 170.175 mo
233.133 170.175 233.379 170.173 233.587 170.169 cv
233.587 170.169 li
207.789 124.134 163.229 120.768 150.683 120.762 cv
150.683 120.762 li
149.571 120.762 148.716 120.789 148.148 120.814 cv
148.148 120.814 li
176.908 167.815 223.747 170.171 232.849 170.175 cv
232.849 170.175 li
cp
146.861 120.622 mo
146.446 119.932 li
147.248 119.865 li
147.26 119.863 148.492 119.761 150.683 119.761 cv
150.683 119.761 li
163.433 119.755 208.863 123.225 234.862 170.403 cv
234.862 170.403 li
234.425 170.645 li
234.862 170.403 li
235.249 171.101 li
234.452 171.144 li
234.443 171.146 233.882 171.174 232.849 171.174 cv
232.849 171.174 li
223.565 171.178 175.863 168.758 146.861 120.622 cv
146.861 120.622 li
cp
f
133.345 170.285 mo
133.343 192.441 141.413 209.571 145.442 216.735 cv
145.442 216.735 li
146.212 218.104 146.83 219.104 147.218 219.708 cv
147.218 219.708 li
156.896 201.907 160.131 185.057 160.131 170.461 cv
160.131 170.461 li
160.133 148.297 152.661 131.329 148.933 124.246 cv
148.933 124.246 li
148.225 122.902 147.655 121.92 147.296 121.322 cv
147.296 121.322 li
136.839 138.914 133.347 155.689 133.345 170.285 cv
133.345 170.285 li
cp
146.847 220.961 mo
146.818 220.917 132.35 200.157 132.346 170.285 cv
132.346 170.285 li
132.344 155.335 135.977 138.107 146.861 120.105 cv
146.861 120.105 li
147.271 119.425 li
147.708 120.089 li
147.734 120.136 161.128 140.605 161.132 170.461 cv
161.132 170.461 li
161.132 185.405 157.77 202.695 147.696 220.918 cv
147.696 220.918 li
147.306 221.621 li
146.847 220.961 li
146.847 220.961 li
cp
f
64.5713 162.286 mo
62.2778 165.552 60.8525 168.028 60.2163 169.196 cv
60.2163 169.196 li
106.087 168.02 131.838 141.074 141.891 127.613 cv
141.891 127.613 li
144.282 124.411 145.774 121.988 146.44 120.848 cv
146.44 120.848 li
145.957 120.842 145.475 120.84 144.996 120.84 cv
144.996 120.84 li
99.3916 120.84 74.291 148.469 64.5713 162.286 cv
64.5713 162.286 li
cp
58.9297 169.492 mo
58.9541 169.441 83.5864 119.854 144.996 119.839 cv
144.996 119.839 li
145.759 119.839 146.526 119.847 147.301 119.863 cv
147.301 119.863 li
147.289 120.364 li
147.301 119.863 li
148.114 119.881 li
147.73 120.6 li
147.702 120.652 121.821 169.043 59.3877 170.214 cv
59.3877 170.214 li
58.5625 170.23 li
58.9297 169.492 li
58.9297 169.492 li
cp
f
152.359 112.747 mo
150.102 116.113 148.715 118.662 148.106 119.846 cv
148.106 119.846 li
193.977 118.669 219.245 91.083 229.057 77.2998 cv
229.057 77.2998 li
231.409 73.9946 232.861 71.5015 233.499 70.3462 cv
233.499 70.3462 li
233.025 70.3398 232.553 70.3374 232.083 70.3374 cv
232.083 70.3374 li
186.472 70.3374 161.844 98.6045 152.359 112.747 cv
152.359 112.747 li
cp
146.837 120.151 mo
146.857 120.1 170.647 69.353 232.083 69.3369 cv
232.083 69.3369 li
232.828 69.3369 233.578 69.3447 234.335 69.3613 cv
234.335 69.3613 li
234.325 69.8613 li
234.335 69.3613 li
235.13 69.3755 li
234.772 70.0854 li
234.746 70.1382 209.739 119.691 147.299 120.863 cv
147.299 120.863 li
146.496 120.877 li
146.837 120.151 li
146.837 120.151 li
cp
f
239.401 62.1074 mo
237.134 65.5459 235.743 68.145 235.137 69.3423 cv
235.137 69.3423 li
281.007 68.1621 306.29 40.1001 316.11 26.0742 cv
316.11 26.0742 li
318.47 22.6997 319.926 20.1558 320.562 18.9858 cv
320.562 18.9858 li
320.098 18.9795 319.637 18.9771 319.177 18.9771 cv
319.177 18.9771 li
273.549 18.9771 248.897 47.7222 239.401 62.1074 cv
239.401 62.1074 li
cp
233.871 69.6504 mo
233.892 69.6011 257.709 17.9946 319.177 17.9761 cv
319.177 17.9761 li
319.909 17.9761 320.647 17.9844 321.394 17.9985 cv
321.394 17.9985 li
321.383 18.5 li
321.394 17.9985 li
322.179 18.0151 li
321.83 18.7222 li
321.805 18.7734 296.783 69.1855 234.333 70.3594 cv
234.333 70.3594 li
233.536 70.376 li
233.871 69.6504 li
233.871 69.6504 li
cp
f
220.401 320.609 mo
220.399 342.72 228.476 359.783 232.509 366.915 cv
232.509 366.915 li
233.279 368.278 233.897 369.273 234.286 369.875 cv
234.286 369.875 li
243.961 352.078 247.194 335.263 247.194 320.709 cv
247.194 320.709 li
247.197 298.59 239.715 281.69 235.984 274.639 cv
235.984 274.639 li
235.276 273.302 234.706 272.325 234.346 271.73 cv
234.346 271.73 li
223.893 289.313 220.401 306.056 220.401 320.609 cv
220.401 320.609 li
cp
233.918 371.128 mo
233.889 371.082 219.404 350.42 219.4 320.609 cv
219.4 320.609 li
219.398 305.701 223.032 288.507 233.91 270.513 cv
233.91 270.513 li
234.319 269.834 li
234.755 270.496 li
234.783 270.544 248.191 290.913 248.195 320.709 cv
248.195 320.709 li
248.195 335.61 244.834 352.867 234.766 371.082 cv
234.766 371.082 li
234.377 371.786 li
233.918 371.128 li
233.918 371.128 li
cp
f
152.322 313.282 mo
150.068 316.61 148.68 319.132 148.067 320.309 cv
148.067 320.309 li
193.94 319.132 219.235 291.794 229.064 278.139 cv
229.064 278.139 li
231.412 274.873 232.865 272.405 233.507 271.257 cv
233.507 271.257 li
233.029 271.25 232.553 271.248 232.08 271.248 cv
232.08 271.248 li
186.475 271.248 161.821 299.267 152.322 313.282 cv
152.322 313.282 li
cp
146.794 320.61 mo
146.817 320.561 170.658 270.263 232.08 270.249 cv
232.08 270.249 li
232.83 270.247 233.584 270.255 234.349 270.271 cv
234.349 270.271 li
234.339 270.771 li
234.349 270.271 li
235.146 270.288 li
234.785 271 li
234.758 271.053 209.695 320.152 147.257 321.326 cv
147.257 321.326 li
146.449 321.34 li
146.794 320.61 li
146.794 320.61 li
cp
f
232.586 270.306 mo
232.947 270.306 233.253 270.303 233.502 270.298 cv
233.502 270.298 li
207.856 224.525 163.7 221.069 150.87 221.063 cv
150.87 221.063 li
149.65 221.063 148.72 221.094 148.116 221.124 cv
148.116 221.124 li
176.695 267.832 223.078 270.302 232.586 270.306 cv
232.586 270.306 li
cp
146.829 220.934 mo
146.416 220.248 li
147.215 220.178 li
147.227 220.176 148.541 220.064 150.87 220.062 cv
150.87 220.062 li
163.905 220.058 208.927 223.623 234.776 270.531 cv
234.776 270.531 li
234.339 270.771 li
234.776 270.531 li
235.161 271.228 li
234.366 271.27 li
234.357 271.27 233.732 271.305 232.586 271.307 cv
232.586 271.307 li
222.894 271.309 175.651 268.768 146.829 220.934 cv
146.829 220.934 li
cp
f
220.417 420.756 mo
220.417 443.055 228.539 460.356 232.594 467.599 cv
232.594 467.599 li
233.371 468.986 233.994 470 234.384 470.61 cv
234.384 470.61 li
244.033 452.858 247.264 436.007 247.264 421.38 cv
247.264 421.38 li
247.266 399.068 239.739 381.926 235.983 374.766 cv
235.983 374.766 li
235.27 373.404 234.696 372.409 234.334 371.805 cv
234.334 371.805 li
223.905 389.348 220.419 406.127 220.417 420.756 cv
220.417 420.756 li
cp
234.013 471.863 mo
233.986 471.819 219.423 450.816 219.418 420.756 cv
219.418 420.756 li
219.417 405.77 223.045 388.537 233.9 370.583 cv
233.9 370.583 li
234.313 369.9 li
234.746 370.568 li
234.773 370.614 248.26 391.328 248.264 421.38 cv
248.264 421.38 li
248.264 436.355 244.906 453.648 234.861 471.821 cv
234.861 471.821 li
234.474 472.528 li
234.013 471.863 li
234.013 471.863 li
cp
f
232.088 371.318 mo
186.475 371.318 161.829 399.605 152.333 413.76 cv
152.333 413.76 li
150.074 417.129 148.684 419.681 148.074 420.865 cv
148.074 420.865 li
193.944 419.685 219.233 392.077 229.054 378.285 cv
229.054 378.285 li
231.409 374.979 232.863 372.482 233.501 371.325 cv
233.501 371.325 li
233.119 371.32 232.737 371.317 232.357 371.317 cv
232.357 371.317 li
232.267 371.317 232.177 371.318 232.088 371.318 cv
232.088 371.318 li
cp
146.804 421.17 mo
146.827 421.118 170.649 370.332 232.088 370.317 cv
232.088 370.317 li
232.831 370.317 233.582 370.323 234.339 370.343 cv
234.339 370.343 li
234.327 370.842 li
234.339 370.343 li
235.13 370.359 li
234.774 371.066 li
234.749 371.12 209.71 420.706 147.266 421.882 cv
147.266 421.882 li
146.463 421.896 li
146.804 421.17 li
146.804 421.17 li
cp
f
220.397 521.864 mo
220.395 543.966 228.332 561.071 232.294 568.227 cv
232.294 568.227 li
233.048 569.589 233.654 570.584 234.037 571.188 cv
234.037 571.188 li
243.782 553.258 247.029 536.263 247.029 521.558 cv
247.029 521.558 li
247.031 499.46 239.691 482.523 236.028 475.453 cv
236.028 475.453 li
235.337 474.12 234.781 473.144 234.428 472.546 cv
234.428 472.546 li
223.901 490.253 220.399 507.164 220.397 521.864 cv
220.397 521.864 li
cp
233.661 572.443 mo
233.634 572.398 219.401 551.657 219.397 521.864 cv
219.397 521.864 li
219.397 506.808 223.042 489.441 233.996 471.321 cv
233.996 471.321 li
234.409 470.633 li
234.846 471.309 li
234.871 471.354 248.027 491.794 248.029 521.558 cv
248.029 521.558 li
248.031 536.611 244.656 554.05 234.511 572.403 cv
234.511 572.403 li
234.119 573.113 li
233.661 572.443 li
233.661 572.443 li
cp
f
151.902 514.397 mo
149.606 517.753 148.187 520.294 147.561 521.479 cv
147.561 521.479 li
193.43 520.296 219.063 492.759 229.057 479.001 cv
229.057 479.001 li
231.448 475.708 232.933 473.22 233.588 472.063 cv
233.588 472.063 li
233.116 472.058 232.647 472.055 232.18 472.055 cv
232.18 472.055 li
186.559 472.055 161.567 500.277 151.902 514.397 cv
151.902 514.397 li
cp
146.285 521.779 mo
146.308 521.729 170.733 471.071 232.18 471.055 cv
232.18 471.055 li
232.926 471.057 233.677 471.061 234.436 471.08 cv
234.436 471.08 li
234.425 471.579 li
234.436 471.08 li
235.236 471.097 li
234.867 471.809 li
234.842 471.861 209.185 521.32 146.744 522.495 cv
146.744 522.495 li
145.931 522.51 li
146.285 521.779 li
146.285 521.779 li
cp
f
232.767 471.109 mo
233.086 471.11 233.36 471.108 233.587 471.104 cv
233.587 471.104 li
207.858 425.188 163.442 421.78 150.754 421.774 cv
150.754 421.774 li
149.591 421.774 148.7 421.803 148.115 421.831 cv
148.115 421.831 li
176.795 468.698 223.471 471.107 232.767 471.109 cv
232.767 471.109 li
cp
146.829 421.641 mo
146.415 420.951 li
147.214 420.883 li
147.227 420.883 148.498 420.775 150.754 420.773 cv
150.754 420.773 li
163.648 420.768 208.933 424.282 234.863 471.338 cv
234.863 471.338 li
234.425 471.579 li
234.863 471.338 li
235.248 472.035 li
234.453 472.079 li
234.444 472.079 233.854 472.11 232.767 472.11 cv
232.767 472.11 li
223.288 472.114 175.751 469.638 146.829 421.641 cv
146.829 421.641 li
cp
f
133.32 270.536 mo
133.318 292.665 141.395 309.752 145.428 316.894 cv
145.428 316.894 li
146.199 318.26 146.818 319.257 147.207 319.86 cv
147.207 319.86 li
156.881 302.065 160.113 285.241 160.115 270.674 cv
160.115 270.674 li
160.115 248.535 152.636 231.61 148.902 224.548 cv
148.902 224.548 li
148.195 223.21 147.625 222.231 147.266 221.635 cv
147.266 221.635 li
136.811 239.22 133.322 255.971 133.32 270.536 cv
133.32 270.536 li
cp
146.836 321.112 mo
146.808 321.067 132.325 300.37 132.319 270.536 cv
132.319 270.536 li
132.319 255.615 135.951 238.413 146.83 220.417 cv
146.83 220.417 li
147.239 219.738 li
147.675 220.402 li
147.704 220.447 161.11 240.851 161.114 270.674 cv
161.114 270.674 li
161.116 285.586 157.752 302.853 147.684 321.067 cv
147.684 321.067 li
147.295 321.77 li
146.836 321.112 li
146.836 321.112 li
cp
f
65.2651 262.973 mo
63.0142 266.282 61.6289 268.789 61.0161 269.96 cv
61.0161 269.96 li
106.89 268.787 132.168 241.588 141.987 228.002 cv
141.987 228.002 li
144.33 224.759 145.782 222.307 146.424 221.162 cv
146.424 221.162 li
145.943 221.156 145.465 221.152 144.988 221.152 cv
144.988 221.152 li
99.3882 221.152 74.7534 249.029 65.2651 262.973 cv
65.2651 262.973 li
cp
59.7432 270.263 mo
59.7637 270.211 83.5771 220.167 144.988 220.153 cv
144.988 220.153 li
145.742 220.153 146.502 220.159 147.268 220.176 cv
147.268 220.176 li
147.258 220.676 li
147.268 220.176 li
148.067 220.192 li
147.704 220.903 li
147.677 220.958 122.64 269.805 60.2026 270.978 cv
60.2026 270.978 li
59.396 270.992 li
59.7432 270.263 li
59.7432 270.263 li
cp
f
146.102 220.193 mo
146.215 220.193 146.32 220.193 146.417 220.192 cv
146.417 220.192 li
120.211 173.443 74.1108 170.33 62.2549 170.326 cv
62.2549 170.326 li
61.4019 170.326 60.7305 170.341 60.2568 170.359 cv
60.2568 170.359 li
89.5146 218.162 138.07 220.191 146.102 220.193 cv
146.102 220.193 li
cp
58.9653 170.159 mo
58.5469 169.462 li
59.3574 169.402 li
59.3696 169.402 60.4009 169.325 62.2549 169.325 cv
62.2549 169.325 li
74.3062 169.32 121.291 172.521 147.695 220.435 cv
147.695 220.435 li
147.259 220.677 li
147.695 220.435 li
148.085 221.14 li
147.279 221.176 li
147.273 221.176 146.863 221.192 146.102 221.194 cv
146.102 221.194 li
137.898 221.196 88.4648 219.111 58.9653 170.159 cv
58.9653 170.159 li
cp
f
133.315 370.771 mo
133.313 392.998 141.4 410.218 145.438 417.42 cv
145.438 417.42 li
146.209 418.799 146.829 419.806 147.218 420.413 cv
147.218 420.413 li
156.887 402.626 160.119 385.765 160.119 371.145 cv
160.119 371.145 li
160.121 348.909 152.631 331.852 148.894 324.729 cv
148.894 324.729 li
148.184 323.377 147.613 322.389 147.252 321.788 cv
147.252 321.788 li
136.806 339.362 133.315 356.149 133.315 370.771 cv
133.315 370.771 li
cp
146.846 421.666 mo
146.819 421.622 132.319 400.734 132.314 370.771 cv
132.314 370.771 li
132.313 355.793 135.946 338.553 146.819 320.566 cv
146.819 320.566 li
147.229 319.886 li
147.666 320.552 li
147.693 320.598 161.116 341.191 161.12 371.145 cv
161.12 371.145 li
161.12 386.113 157.759 403.417 147.695 421.624 cv
147.695 421.624 li
147.306 422.331 li
146.846 421.666 li
146.846 421.666 li
cp
f
65.2632 363.119 mo
63.0156 366.425 61.6299 368.931 61.0166 370.104 cv
61.0166 370.104 li
106.89 368.932 132.161 341.737 141.977 328.15 cv
141.977 328.15 li
144.319 324.906 145.771 322.456 146.414 321.312 cv
146.414 321.312 li
145.932 321.306 145.453 321.303 144.976 321.303 cv
144.976 321.303 li
99.3774 321.303 74.7495 349.176 65.2632 363.119 cv
65.2632 363.119 li
cp
59.7432 370.407 mo
59.7637 370.355 83.5664 320.316 144.976 320.302 cv
144.976 320.302 li
145.729 320.302 146.49 320.31 147.257 320.327 cv
147.257 320.327 li
147.247 320.825 li
147.257 320.327 li
148.056 320.341 li
147.691 321.053 li
147.667 321.108 122.64 369.95 60.2046 371.123 cv
60.2046 371.123 li
59.396 371.135 li
59.7432 370.407 li
59.7432 370.407 li
cp
f
145.734 320.353 mo
145.992 320.353 146.217 320.351 146.409 320.348 cv
146.409 320.348 li
120.558 274.216 75.9258 270.885 63.5054 270.879 cv
63.5054 270.879 li
62.4331 270.879 61.6064 270.904 61.0522 270.928 cv
61.0522 270.928 li
89.8809 318.044 136.799 320.349 145.734 320.353 cv
145.734 320.353 li
cp
59.7661 270.735 mo
59.3511 270.044 li
60.1528 269.979 li
60.165 269.979 61.3657 269.88 63.5054 269.88 cv
63.5054 269.88 li
76.1274 269.874 121.631 273.309 147.685 320.585 cv
147.685 320.585 li
147.247 320.825 li
147.685 320.585 li
148.071 321.284 li
147.272 321.325 li
147.264 321.325 146.727 321.354 145.734 321.354 cv
145.734 321.354 li
136.617 321.356 88.8354 318.978 59.7661 270.735 cv
59.7661 270.735 li
cp
f
232.497 370.379 mo
232.893 370.379 233.226 370.374 233.495 370.368 cv
233.495 370.368 li
207.908 324.71 163.904 321.215 150.953 321.207 cv
150.953 321.207 li
149.686 321.207 148.722 321.24 148.103 321.271 cv
148.103 321.271 li
176.604 367.854 222.818 370.374 232.497 370.379 cv
232.497 370.379 li
cp
146.819 321.085 mo
146.405 320.398 li
147.204 320.328 li
147.216 320.326 148.566 320.208 150.953 320.208 cv
150.953 320.208 li
164.111 320.202 208.979 323.807 234.766 370.6 cv
234.766 370.6 li
234.327 370.842 li
234.766 370.6 li
235.15 371.295 li
234.356 371.34 li
234.348 371.34 233.694 371.377 232.497 371.377 cv
232.497 371.377 li
222.633 371.38 175.561 368.788 146.819 321.085 cv
146.819 321.085 li
cp
f
133.185 471.835 mo
133.185 493.879 141.052 510.939 144.978 518.073 cv
144.978 518.073 li
145.722 519.427 146.32 520.417 146.699 521.021 cv
146.699 521.021 li
156.484 503.02 159.736 485.961 159.736 471.212 cv
159.736 471.212 li
159.738 449.176 152.468 432.292 148.841 425.244 cv
148.841 425.244 li
148.159 423.919 147.609 422.947 147.259 422.351 cv
147.259 422.351 li
136.696 440.119 133.187 457.092 133.185 471.835 cv
133.185 471.835 li
cp
146.322 522.277 mo
146.294 522.231 132.19 501.55 132.185 471.835 cv
132.185 471.835 li
132.185 456.737 135.836 439.308 146.829 421.123 cv
146.829 421.123 li
147.244 420.434 li
147.678 421.112 li
147.706 421.158 160.732 441.534 160.737 471.212 cv
160.737 471.212 li
160.737 486.31 157.356 503.814 147.172 522.237 cv
147.172 522.237 li
146.779 522.949 li
146.322 522.277 li
146.322 522.277 li
cp
f
63.5923 463.905 mo
61.2192 467.223 59.7373 469.739 59.0767 470.922 cv
59.0767 470.922 li
104.943 469.734 131.322 442.397 141.687 428.739 cv
141.687 428.739 li
144.156 425.484 145.706 423.021 146.398 421.866 cv
146.398 421.866 li
145.929 421.86 145.462 421.858 144.997 421.858 cv
144.997 421.858 li
144.994 421.858 144.994 421.858 144.991 421.858 cv
144.991 421.858 li
99.3569 421.859 73.6216 449.887 63.5923 463.905 cv
63.5923 463.905 li
cp
57.7808 471.212 mo
57.8062 471.163 83.5347 420.874 144.997 420.859 cv
144.997 420.859 li
145.746 420.859 146.504 420.864 147.268 420.883 cv
147.268 420.883 li
147.257 421.383 li
147.268 420.883 li
148.09 420.899 li
147.695 421.622 li
147.667 421.674 120.672 470.766 58.2354 471.94 cv
58.2354 471.94 li
57.3999 471.953 li
57.7808 471.212 li
57.7808 471.212 li
cp
f
146.106 420.901 mo
146.218 420.901 146.322 420.9 146.418 420.899 cv
146.418 420.899 li
120.228 374.172 74.7583 371.051 63.0347 371.045 cv
63.0347 371.045 li
62.1909 371.045 61.5269 371.062 61.0566 371.079 cv
61.0566 371.079 li
90.2939 418.858 138.149 420.896 146.106 420.901 cv
146.106 420.901 li
cp
59.7656 370.88 mo
59.3472 370.186 li
60.1567 370.123 li
60.167 370.123 61.1929 370.046 63.0347 370.044 cv
63.0347 370.044 li
74.9541 370.04 121.306 373.253 147.696 421.141 cv
147.696 421.141 li
147.257 421.382 li
147.696 421.141 li
148.085 421.846 li
147.28 421.881 li
147.271 421.881 146.863 421.899 146.106 421.899 cv
146.106 421.899 li
137.976 421.901 89.2456 419.805 59.7656 370.88 cv
59.7656 370.88 li
cp
f
45.7305 422.52 mo
45.728 444.058 53.0073 460.679 56.6396 467.625 cv
56.6396 467.625 li
57.3096 468.906 57.8516 469.854 58.2026 470.444 cv
58.2026 470.444 li
68.3159 451.838 71.6196 434.211 71.6216 419.096 cv
71.6216 419.096 li
71.6216 404.778 68.6528 392.715 65.686 384.233 cv
65.686 384.233 li
63.3853 377.661 61.0996 373.264 60.1841 371.611 cv
60.1841 371.611 li
49.293 389.933 45.7305 407.433 45.7305 422.52 cv
45.7305 422.52 li
cp
57.8062 471.712 mo
57.7808 471.666 44.7339 451.542 44.7295 422.52 cv
44.7295 422.52 li
44.7295 407.072 48.4331 389.109 59.7656 370.364 cv
59.7656 370.364 li
60.1929 369.656 li
60.6221 370.362 li
60.647 370.408 72.6182 390.184 72.6221 419.096 cv
72.6221 419.096 li
72.6221 434.563 69.189 452.644 58.6646 471.683 cv
58.6646 471.683 li
58.2603 472.415 li
57.8062 471.712 li
57.8062 471.712 li
cp
f
46.2588 320.327 mo
46.2568 342.457 54.3394 359.547 58.3745 366.69 cv
58.3745 366.69 li
59.1455 368.058 59.7646 369.055 60.1528 369.657 cv
60.1528 369.657 li
69.8262 351.866 73.0596 335.046 73.0596 320.482 cv
73.0596 320.482 li
73.0596 298.341 65.5742 281.415 61.8413 274.351 cv
61.8413 274.351 li
61.1318 273.01 60.5615 272.031 60.2017 271.435 cv
60.2017 271.435 li
49.7495 289.015 46.2588 305.762 46.2588 320.327 cv
46.2588 320.327 li
cp
59.7852 370.908 mo
59.7563 370.862 45.2642 350.163 45.2578 320.327 cv
45.2578 320.327 li
45.2578 305.408 48.8896 288.21 59.7666 270.219 cv
59.7666 270.219 li
60.1743 269.541 li
60.6128 270.202 li
60.6396 270.248 74.0562 290.657 74.0586 320.482 cv
74.0586 320.482 li
74.0605 335.392 70.6973 352.653 60.6313 370.864 cv
60.6313 370.864 li
60.2446 371.567 li
59.7852 370.908 li
59.7852 370.908 li
cp
f
45.5742 218.74 mo
45.5718 241.382 54.0386 259.026 58.2661 266.414 cv
58.2661 266.414 li
59.0869 267.851 59.7437 268.895 60.1494 269.515 cv
60.1494 269.515 li
69.6245 252.084 72.8232 235.499 72.8252 221.024 cv
72.8252 221.024 li
72.8252 198.341 64.957 180.837 61.0283 173.521 cv
61.0283 173.521 li
60.2705 172.108 59.6626 171.081 59.2856 170.465 cv
59.2856 170.465 li
49.0313 187.718 45.5742 204.252 45.5742 218.74 cv
45.5742 218.74 li
cp
59.7861 270.766 mo
59.7573 270.721 44.5791 249.268 44.5728 218.74 cv
44.5728 218.74 li
44.5728 203.896 48.1709 186.914 58.8462 169.253 cv
58.8462 169.253 li
59.2529 168.579 li
59.6899 169.234 li
59.7188 169.279 73.8203 190.467 73.8242 221.024 cv
73.8242 221.024 li
73.8267 235.847 70.498 252.872 60.6318 270.719 cv
60.6318 270.719 li
60.2456 271.42 li
59.7861 270.766 li
59.7861 270.766 li
cp
f
145.375 521.517 mo
145.569 521.517 145.742 521.516 145.895 521.515 cv
145.895 521.515 li
119.868 475.088 73.7485 471.857 61.373 471.854 cv
61.373 471.854 li
60.3823 471.854 59.6133 471.874 59.0879 471.896 cv
59.0879 471.896 li
88.1274 519.341 136.701 521.517 145.375 521.517 cv
145.375 521.517 li
cp
57.7993 471.699 mo
57.3799 471.004 li
58.189 470.941 li
58.1992 470.941 59.3389 470.854 61.373 470.853 cv
61.373 470.853 li
73.9448 470.849 120.946 474.166 147.173 521.754 cv
147.173 521.754 li
146.735 521.996 li
147.173 521.754 li
147.563 522.458 li
146.756 522.495 li
146.75 522.495 146.268 522.517 145.375 522.517 cv
145.375 522.517 li
136.529 522.521 87.0786 520.286 57.7993 471.699 cv
57.7993 471.699 li
cp
f
232.379 571.693 mo
232.714 571.693 233 571.69 233.237 571.686 cv
233.237 571.686 li
207.527 525.82 163.046 522.393 150.275 522.386 cv
150.275 522.386 li
149.09 522.386 148.185 522.416 147.592 522.444 cv
147.592 522.444 li
176.238 569.261 222.981 571.688 232.379 571.693 cv
232.379 571.693 li
cp
146.307 522.255 mo
145.892 521.565 li
146.693 521.498 li
146.706 521.496 147.992 521.388 150.275 521.386 cv
150.275 521.386 li
163.253 521.379 208.603 524.907 234.51 571.92 cv
234.51 571.92 li
234.074 572.161 li
234.51 571.92 li
234.896 572.617 li
234.099 572.661 li
234.091 572.661 233.489 572.693 232.379 572.693 cv
232.379 572.693 li
222.798 572.697 175.194 570.199 146.307 522.255 cv
146.307 522.255 li
cp
f
107.565 107.565 mo
52.8442 162.287 18.9995 237.881 18.9995 321.384 cv
18.9995 321.384 li
18.9995 404.885 52.8442 480.477 107.565 535.2 cv
107.565 535.2 li
162.287 589.921 237.881 623.766 321.382 623.766 cv
321.382 623.766 li
404.885 623.766 480.477 589.921 535.2 535.2 cv
535.2 535.2 li
589.921 480.477 623.766 404.885 623.766 321.384 cv
623.766 321.384 li
623.766 237.881 589.921 162.287 535.2 107.565 cv
535.2 107.565 li
480.477 52.8442 404.885 18.9995 321.382 18.9995 cv
321.382 18.9995 li
237.879 18.9995 162.287 52.8442 107.565 107.565 cv
107.565 107.565 li
cp
17.9995 321.384 mo
17.9995 153.828 153.828 17.9995 321.382 17.9995 cv
321.382 17.9995 li
488.936 17.9995 624.766 153.828 624.766 321.384 cv
624.766 321.384 li
624.766 488.936 488.936 624.766 321.382 624.766 cv
321.382 624.766 li
153.828 624.766 17.9995 488.936 17.9995 321.384 cv
17.9995 321.384 li
cp
f
94.8379 94.8379 mo
36.8604 152.818 1 232.909 1 321.383 cv
1 321.383 li
1 409.854 36.8604 489.947 94.8379 547.927 cv
94.8379 547.927 li
152.818 605.905 232.909 641.764 321.383 641.764 cv
321.383 641.764 li
409.854 641.764 489.947 605.905 547.927 547.927 cv
547.927 547.927 li
605.905 489.947 641.764 409.854 641.764 321.383 cv
641.764 321.383 li
641.764 232.909 605.905 152.818 547.927 94.8379 cv
547.927 94.8379 li
489.947 36.8604 409.854 1 321.383 1 cv
321.383 1 li
232.909 1 152.818 36.8604 94.8379 94.8379 cv
94.8379 94.8379 li
cp
0 321.383 mo
0 143.888 143.888 0 321.383 0 cv
321.383 0 li
498.877 0 642.763 143.888 642.766 321.383 cv
642.766 321.383 li
642.763 498.877 498.877 642.763 321.383 642.766 cv
321.383 642.766 li
143.886 642.763 0 498.877 0 321.383 cv
0 321.383 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.1
%%For: (Honza) ()
%%Title: (09.eps)
%%CreationDate: 2/3/2015 9:10 PM
%AI9_DataStream
%Gb",KH!_6,oC2@\T9&FaY,gPJR'V,D4NN?a$47iT.#)8_84YFi]C)_LWk,gRHU7eoWa?Bf_sCj2l)?l3Y-+AO\5D[R\ug/MT\TEW
%\\KH[TBG25=0LDhn[SNI)2pF%17*@M?dC>#OVd6mpfOrU*$$E_iF]jV9Ep,AYLDeJQ4&uHNGd^#irJL($@a@m:@IX<\^P45_)%o8
%iGQ?b8a="gEFW*Y77R@V?1IFM!B^Mkn?[^2kr(Vu<jE%X-`nc:E.9"un6PS)<\bZ3R%[Rt8+^PuC_(-gi.u1-_lMjk4W*l34$7Vr
%n14E])r$^N0\Q%uEmj/1L@&:`0EO#>(>reuRd;t&SY7$$_6efT_qP>_EOW/lJrkP.MEu0`\/]Y5^YD?^kZW)u5L\uk-iE<Gr'DP'
%g"`Z<+.d;aS3de(D,3=QT'?;!$Y#4-OP@nI8Z+::"F1*i.>A!jNo@J?R@42.6o3HfMQZ.#n;CW6p]VF%'#5_uA<,]M-O_@JhqH30
%bD!u.UQtHd_+Xac<r65HCudSN^B2.gFcuaiDL2X^k6Y6AM=J718ii-0lLB1uJMaeO8GlL?[N#0tA-b<Ql\po@b>p8L7`XhSmn&!o
%#ija#PGGhHHQra+kkf6P?sWhsFT\!NP-E#:=B5[Z4na7j4&.pHqC;E!$rKkL*/V'0XLZ_s+1/Z'1ePKoeo/#+^Of9Nns@-qN3*%h
%qHj[KVEZ%I?(-?1m8fet9L-AU>M*_ngT'n+OU`ca2p/r->nDcdmm,\dIu&H%@W\?A+TT,-HLO23MhnQCGp2WF]:5?'gg'1>7OM!C
%qn9%3(.t^c?;fEl$kGY0PAY/T]<LdR`t-tAkZ`8Ok@*>Zf,Ac=WZ?39*=[5j0SFW8m;Ii-Wn;!WgchX"Xma;W]hWon%$0,(n*mg#
%QNbc[^X7^['fPd",Y\j,Kf@-$Yh*gn$^q7u;Ra,)m9u.]h'S;\hqdM=<ToJJLP>,%YB/hum!,[glOXJgAmpc8^AZgP+!kB2rLlV:
%l[A*==o622L5#URDX;V^*lS!K>\S:@m=TlJjKRIagA/(0G\"SF4IXe"'U2`i"59CY4<X%n-LiJ]]8uu(P,P6cT<&]OebaOjj*&0p
%ROH#4'02%hp;_]*hf!_T65>0d,Do5,OKq:J4oEmpbHBe>[]Wi:ZcisX#4QR?Oj7E6][]#/I9,Z_900bMUsS>6$?$m^P>',le*+Y^
%`Jl<0iQU$5Dug?eNR$C)4Z/pk2]JF[9i'_#=:3dq/2!N2,D&7mCU[F32d1&P6Hb(:BDp4$a<-2"SA9%jBcctO"W'4gH;"#qjjqs4
%+0Jq\J+\\O5Ha$.JJ1)giD/a(S?c(5C/,d#[c[j4k]/V&A%1Nbh25EZl^e3Yc3"gg][1.pjMbHI.si#7l;b#onS2CdGC7a2rP3&0
%pERH6Qi2eKokT">E!%c_K-1F%(@WFV8jPJ9"P'.\e3bU*6SASN$X(Qg.#c&A=Li`(XG/Up0UI(/B-CcDZ\ZT%`6,0uWiX5*gu70[
%o72UdE=U8m$s/:PH%f=FNRoC&ElI-/IK](F'LZBJ,%qf^;&kjq10g*C)V(R.$qh/D0ha(j@i/Sn`m>SGN+2]6`FZP/E>>Vp>kJ^\
%f[VJu=Ip-V6ch!tPY*Y!&hCd08q=PW&!cX^$s*V8C8hD=]i6XHiduk9_ZK+Q@C`OI.Ds#e6b$MB34uQ\\1E`+nYZFi's:`N?ER@[
%A/-4_`N-dP<s$%;??p55fMbb8FH/2SX+Jo_TXG@I;OhHi'@glMmRVU?S#/>E;.!5X<O<8Oocl]02un6>Z$8NQ!AO=[4pW`8.#/Pu
%KWks!5hlo!IMh7(g=7^2/!)E3i!c)68t%[AGA-segnAtF$/Ud!Jc#Or#lGi*A0R(fJk%)QPQ[=P"IIUHQREpF"ciY5!7rpD+iG="
%_&JOnL_l-\R,W^"d(WtfSq4mq.MJA8b*(%$-/XU25\"G#c4-n4g-kD9-sfmf#M0lmDJ1)Js2X4c9mK*QU;!;8huKE7crfjhjFVA8
%:qAs^J^b4O$2D9o#K[RR01o<L#ehG,OICfH"1c;cgd1j(*'uc>3^d]pbp?Gp!1ueWEV(X9iYp5ta>m0U9T$j)nE7YB])!%5#!@fK
%)edN^]SkPQRR-K4\=O&IppR'e;BY`L\Q.o@jAP&8jA51G7c7#%9XI6eKc';&Ea]\Bcir86Ja6e'[jpm8.kD/H4GE]4#<i4$&#:iZ
%QdfE)IKX(BE'att8*f+8D&H0U%+M>1Zj.`61!"MQ,h`pc49kV`_1__Y#jbHh<%>;5VK':UYLT]H$4(jT*Wm'q@,S71eGZs[GO&#+
%?E;VV[7[P0-6rdbj.PbU=oaH1X1:*c>-HMWeS56r6O=Xol4m-!]ZNK]!Y@i)l;jHJ*I=eR^LcUlL,!WYQ4PU%&(\Y#31sDhTOB=C
%BhC)5#fb(rj8nHgYYeer*7.M>cr:aI<s`ITJ`nd!dJu+n#<L.elbKu0i8HG1Et#+c@80)HGTXHQN?++@Ra@oHO;X-@=M5!kOF^pG
%&Z3=ua8rtZ""C=%7$^)#,*5b..j#$7G.@^<>m#s`5h8RnT*VC6J5u\I$oN[\*7,BWTOJ(<=TXIM5Z\0>%=lG>:tc6@TQR9-IEFhT
%=D/raqC)EIn:3HJ*W8$4Y:=Ka=`@(D$@mbh$\=Xli$d3$]K5O`'tC=Rg_L"<ER9pnE1d`3LoHn*E+Tj[Zg=!,'9+60nLp_X)?#t1
%6X`8fUoofA?UeCu0)1,b8RFhj8R%kX:J_ia;<7:T5i[]#rZB5O:Xf,(amkd`()Hlc8Ff//rm.qe1_'jOG0>:G7U^m'`69Mm0N#?\
%!Ta@70DUChR/7X)>El080VmXpLB9YXHGJ]P^rPelcPYQg#5S"]r(DQ;M`(nqMQ[_%'O`H/,f\&+f1)!%Qn?4W`#/[r7,%u)M)>St
%M)G[L'Q5GY.,m*1i_mij,")Q&-3?Z>"?mNnUbBYm"IU*7L_-pCKYJ^_O-3BAYm<lgN!--\09@V:#_<7dHkGFc,*]peOd?DrC-l'j
%X-121"^u`-e5`u\oM<&hq4#r@>_!D8:f/%F.oS(ta6qFA#r%g>WY;O,5P?YnFU'Sk)>V:,9uM#=O'"\</n1KWnC5E(>^YNGd01@3
%l\_TFV5[OAr"<O#Nu7RJBq_S+a>0:pfbX+,L+GeTWhl)k@U`LL2,#n9N.Qn#.B94l#0"!7du]]ob\N`/D)&Z]$2Z*F>Ee0apbin.
%=k6HQaEUgLY,e=')<kV3)p3CA,$^(P\Vb`FjK#"^Po$-p@U7OVV,qX6a$&U+cG!i?!A&)rX*4IGf%Kt$rTO]3/mtdYr0?grAhg_9
%G6qMr*Jj.;+1/^Incbl1O3Ao`5k5#R(FX\s-MT;lSj$cPWlbF.rZ?H:daJI$:O%@(jo(HtpD5=JcU[F7r4e]is/I:1M=q94MQo&u
%2/PBhC%XUa8h"]MU\0Vn6Kt+`24$($;_Bn`[VD-noa-7.h!\C4YHPaQ6Fsu+0^I_t/$c<;Fd5^-A\%kOR?lGsZ$Rrd`iR+i8ZS>6
%BrD^1,qIMG(F`5fhG&l,-dYLelFa9_jsE6+-V3:H$$,Nj[*fcM=&p-J0d8F:W]^DbBi(.q.o]TC/mhmNUB*j1V&pp>R[<YHeQ9`$
%b1<DZ.85#X;@f-E_t9>OTYY.UVSY#!L.PWDK2E7TVSGk,XD2UnO=;]:0F3Y@3ZTluQSMjEP-K0K^7O&?!TO;,I!S`2;<di>gG1\=
%KW1asL6Iiu'o@./TEt$tLke8;L3YQ$o>PW0FX)N&$LhPfRPo_h$NFKcHjTpT(aoJP)%+Mo:kjT:'S\Y&oV>?j&clPP&61b6&h-GU
%GplKoUNf5s7oaMZEhd&/\4V50^J#n@@5>V!^9E\OWV6^joU+3sT]@G8%nhD&>h`G81^H0cnYo\;:?rM-3(]lY9iA1YX/`AWWQY2>
%+/J@.MXsn\e0rcIU"PK=>L(<i@D2o0gZcB)l&<f1cGd5u-LW-601&?)1<YF*(LiA&mPnM&+1s)o!fWD'=2l>tBRWSRiJPZ/^c;%s
%g,UVHX#tQ*`ieU+X#>-P*!+'d>WH<Gl(?GMY]!mA1?@<Xp_?Q6fVse$^&TD0-4R+tPG/,l]&(bTe?5[^9-s>3bRWh2:/smTW7\9d
%?=?k&Gh.P\44_-DVtS/Z]gj\L]Y&K([p89dK<1=1T"3VqXfB)+Rbg,mNdu3UUcT^nc)"WpNWEEnGCVp=?@&DmKQtW:<4([.GLu5_
%Y4pZ#FnNmFpYMB[q<)+8n]\V3CbP9J0oh0\YHC,r9OG[:0T7U-l^4bH3CZB;cl&fNfoqRe&eo,j;=9XkR$-g8q@Qj6]J-NS(IrI3
%k1;'#Rb/XRMi8_q68FP?>fK*(V5Z=A=;kg+eB2TS@OMr":rH5>&sUi<NU8TR]lg^\ZhK^.IY4nV<Fl9/"gi->-dn,W.hsN#T<s'M
%hG]T':SnqnePj'g.$2m6R@$n?/lYeDah[MsdA5EsO$sh:K8]!;=;%-"gdd/g"DOUNZA9I1L`8MH`+ibj+;Sj*!.J&k>t*]fUPfrh
%#p!se/&M6pi9Y`\@lYG_G9Y00R.+?J;)mR9E7\#Nj,!)`]#_6Y7JL(!WKiVPK5'OSV.F1.*/Lt]B5N[Y7=%H.aE!K?,a(D,-o6u.
%_JiW]bfK`lHVA=HaGgiN4NCp8>kmn;M"ZL-EJ2e2JTP%2VNd%K%G$/7hDT5PaK62fNFr*)o!2t^`V-I8C7>AH!3s2Dfcmn0BZ#P4
%>bk_$>AUS8Vj[+QIIa7HX9J6qWi/O9do"hW<j'h!a$CSs8Je"D1&D$2nl%O,$;On+WQQ6q!2Fo+)Y73/L$.J6frBIOpf3S&2:o?.
%2?"8eXse]!7\71nl3bS7+EdLZ90!6-0tk2\g1/JA]MunU/l/7JV(*p)?+T)'<?-g>%Fq[VoEnSLP.`'q$X?e0'f&Y7QdWT'nXD.=
%ZW"W4.VO^=S-^I;C6c)!/nlf-;:%4-iX"&?arF3DZWY7`'Cmgj1GRgjq,ZICSVtm`QrFhJel`j4_76K8Zq/9'<LtNE&j9*N(fo;!
%qe=1e`Vg?JS'!VsIBU)<,bmu(9`C[c6G"SH-@4lHHC,5C'k++i>l8>M>s`h:gi[.5p1@<=quVhTUS3kG?XC"kaV/5D.Nr+2"\1G4
%DnuhankWBs8sUEMWnaNsngg<i$7n.d_%L.<Ws9W[JG-"u#jd-f$<rpkF;ZE%=64+HTPc=E=p(4>Jso6PP+Z8).#@NUU:d]SB]c>3
%;C3CA1/%tQj9Z04Z.bI8%9Csll_d*A9$+,`V,"0"(J#mlX#d:^;0fRTrYMCFj]/li(oi63_b>_Ak[o)eQNmJ!TVV-kn/K7s%*:1s
%/*S#k(5?7X6ooTq0Er!ur/4=CVgi3rbRsZ6Z(:8BG+maAs/AZ;b+Dp0Vq/&G6X!Csl7$qD$:;;OY9fIW,2G;_=Tc'[-9';GEP8CC
%NqQMBd&Z)8V9;9/6;aR`?'W[`--T<9,4*OJUGId)K^3lo*$nPBdH"aNn@(0>UX6)qcBEVO[&^D(ogLp@Y1#6CSK]4aKm\tY-(')'
%CEVNmo_s<@;GLJ$kWl]:*a)[/W2n>64]mQH=Dtb0P_rqeD?M.L+;7Xjm#7:M3(:l=gE%EC$XB%Y_7pgD?7aF_+UenA\ZkR3-pHQ"
%T#gP^ifd@roCJn[.8H#aj4G^PeK+7d(rVFR,BDCm,:<HoJQE!7mM7o%65[ad$.$ql&gK.Fo-09k+>pD`$:$B*!tR`6!["YOb7GNr
%,Z.MHTI6u+P?-u3&B`COb7ZNeZP^'+33$*i_:H-K"dbU7Nhh2,#[%bPo:QXad$HnqT0sqp_dWK`Z)7AMSsi$b^e';6ioG-j$_^c5
%+grde^ac"!XASp?KQ;0s>#JU8T1^/m(;cue&#rJT47l:5LA`*\+"SdDDg.Bc*k6W<B)C'qU9eaT_")P7q)P2I*)V0F-pL4dT-LoY
%N;5K.r#AR_N[R+^Pb02CcOjH7F%#2`'KZ,ed4Yh(]X%])%g,&n4Ah]jch$pW*rcI"k'?keO$=_3r4Gi[0,-NQQd%#"]ML:8'[-pg
%o0U:+:bXO:bR4U;[nnbCqNr@Qb`=sM7j%>tO872D?Zbr1\&=b#o96q*,CeB9rj%M$HJ(deMS/tF-%A?ireeAd'm]U*o(#lCjfcc&
%Q*8:+0M<cEB)O!tCn9:Jkn?guHm3Ar:<f>,<q_1'A0en4:k!8Qr._W@_SVdlHi<$(E7,\an2otr&"A=Xr#3]9\"qo7^Vrd?%'@Hl
%#DQY!\C;8n7cN_IG=RfUo_jd<^<=9`_WNQPrOWUTSejS<F:,.N#_2T+lL'\o#DK1^Ndm)J:BMX5VaDQ;nuiKKiEBtAq12atPU(pT
%BE]h_G](T3XTdQ=IbCCfn^j=o/0:lB2N__XLSU:=3JF/K$'nFu#p_IO_0E'F#!OPj?I9!F/-eX00.mIC_e"lmL`fB$16<PaT7kZ%
%fTAPo?rA'2(L.eap)*oZ4.rA`Cu'jA*_7;M.mabB"PQYp-$juSTuMC>T(`*#N[>6Mdb)1_HsK]Y/j'hu4Tb"$]*qM6,7RneJO*9-
%RB'03itI!Ca1Gs+`3?3("[=1=.$bU:,^,9-6W3o@B,+L`ll=CMcm+V%&jb[j3+i@u[p^rr(<)u9K6hbdd!g9b%r508EY_(b32U2s
%:)Pnb+@cn=#)j(]0.?B><4kmi[tsi9>%TI)p]YpVJb8a6,b1cW)9`](R0Asc(o]]I1^'D)XkU(Q(l-mD.mOV@"PQXIj5jXAO2aX>
%<t09Xr*bY;@&^t;SCXM3>;L53m%G=-P#aSZ_GsOPf!aHL*g7Kp/.^D3\DXp5ppAscd=\BO@-]_0'gp$"c.\&1-N`\5-h4'?@9QG]
%>Se,*.Tf/(Vj`MV-!h#Y(n:^$n$*<AfBSB6[Q`s/8W"5[,Z*!hEFFPHnfeTaD?O3?!PpRO@oChKpdCeRpaQ20H8?p"^s\ptWh(NM
%$+=`fKJMYri9K9X^spihnU?<3A<&fK)a0#I@,UUN$4.hE:jUEH:pCl1L1:QVcHt<0[_!pFoRTc+d29mPKQ;s!'QIY<hhr0b!*(6[
%Yq+bD%4(ndDEg;sR!RO'ZXTkT]Cm"Wku'#uXlRVYT`QAK.H2+!)+PKh"ojm=lS];d*r0''M]SJr9KbR2^6j$49r'$=lm]4I"qFnu
%aXEuMju"16_"4CZr]&dKZcOXYRh13DoWKI@otB"neh%`,Q?E)`M87Wie$T*V:WHBG9^HNBQmRgKp0`Qc"*-l"SW&6fGm:cr"3HG&
%gQ,,5VB.s'i;\_!4$M$OWSQlk_W(&`;jmh_4[.!/BoaSJ3/!&297\WG#EH'b/+OD8O@_'+VAU)0n2>\KL.]PlYs:RYFW1PN)hec#
%F&<HD"PQY0;8]&B=(Q'#?\'g3];trh5)ePcnP-n>f>?ik[rIqFe/&Yur:X-gJ9s5/GCNu51;XQFHoF'sPHipfk:ugfTMM9n5/gqY
%A:K_o,qD"W-m&Ou++m&lrOth>/NhM?(7m,gCI@0CIa[bL4YR)O%=4%"c\6q?!KRu:%tME+]-)+r#n52]Uk]s^6Vu1Jp>n+C.@:_S
%j;7t)+J/HZ9^EfSljG'KB!Ad[*s=3UbRlIj5TU_)#8e2,i$0I=g"?$&ElSE;lmUpL\lWos:&q@&?Ccb%#=sjQO<t6R+<.mXUgVDt
%_(,X3"<C5_LZ$1G=:Bs$>o,h%d5Y%Ijo@#I5V!O:KE4R\W:=>o:_=]*0Gc[]8.KTu(TCu#BZX=@hfT[r&5t=k1W"QD2Eq[OA']dX
%=TVIq'JO"'p+_U[$mF5u%R&>Z1Y7:',%0b,$5c6`66KM97u]Gmc(ff$,sVeOct*4e_1>V<(e!"/0sI%Gj`*`+;UO?DJC>+o('DmV
%Tm<>6Gh7R&d,]Egdc:t"o9U_^IDQO#+T^!N<5=m@AkgQ$```q,/k-sO^b/P*'uaom^a1%AM$)I4+UEYHR2Tr_aH]/d:W)0?#7?#k
%1Dgmc$j,\;8G704!K/6*j;'CJ^_iDF!n!Q8(`4_'Kn2a!#QOjW=:tlV+RgTZMuq#LJk$k<(k=W'&8phIJN3;^Wu_@=+T]]@\PG"^
%CQ;/5W!;TMOi@gd&<ejcCY)(n=lcND#X]nhYtn%.0eS#"3MB(_37CP9a_4#$)8qpsUQu;;R(Y26'TrH1,E[XC=$VM>&W+?q%:YXk
%:a*gbKRpOU''O,e-rdbZHJDLf:hihD_-Eo^4)W!d-t7s&m=pLLi+$.c)UP9Cbc_RD5[T>ei#=aD(_^Q))1+P\Gb8T!.2@QQ0B0.%
%)R.8mC<T&#(*5?J!_/\jNnG7YT<qDTb97!D@ZW:.FU8JnLq8JO3^C4@.!6(kP(<T=X66+l+;4J_Ld@!>+@[eK.?[jHJ?eFP`":?,
%5YNI<O]c^Y!?L]lkb]m>!X"VIaEImlOWB_g[$8Dbqq<#EJ4h!m3N(EX^c:6tb[q^mm!)]o,iJb091j!^d]gO!USVrf4(17ro\<ot
%:&m-9;eSc0'T!S_gOL.M+Uj>K.n5:"#4+%s,#;r,BF=bq[CSPc/:p@>,FsWFG"#o6h?%Ce&VOJmS-7FtUXb@G!k9=.&oD!U*<=)K
%Ga(gRO99C@eu08eJ@h=^eWp+C!^./;X<T@q7?'UpP9+ZWAlK(fB&6(p5Z<m=U%2'oJMdV58Vf6U&6C,gRQP"f8ZnK)%>NO*8I9nq
%@:LB<p,qa38Cn,t53Jq!h^;_10_]8e*gaS90#h:/lNk:&\K=F..LZm\Z^AZ9D1Db@k=/El(fS5c8Qe!3JU,t!5WuJLn1Y=e&jMCi
%CjmAQni3elbdCs@C/I:@0(CUj"MUeIDrX=gcim/g5>!R_L1)6NVAupe'$-V/CCIVd5*2(tcSP,%NFP0sraRKUNU]7uXcN)e&VES;
%S&jG7$lC.%RhnJ'=9&iRN8Q64,ii=-=cbfg!+TktK\NR_a#m28l!nC]5k'[LaT*C"=$Y,p&_UGcY;!a:*a3';5T\;KKSjZ?HC]k.
%S'*%/!2Q'LLGM8)XM5^!1bS33qeD6A7--s;">hMT+IIYqi"47n\-B7c?nhNH`16a!J-Y";(tVL!,1#qaV3F7-&a]\-jr/7'\D\9Y
%A8Y.Nn>2SlY.ulVgZ:m/"*7%VKZX;r@-kK4a?VuoOFb@p1PWk"KE8HnlNDl,C3p)0/u*thHNQM\,0rgTrYe-8`+g120*YhFPO$8'
%(;/i7[-A6LV[<OA6a7+4l%sMk"?J7T!Km4V5i8?NHm;'"<N(M%k*E?0/2KUf\;r\('HQcb9af;JS.$#-+&QM_"30&97%d1N&\6WY
%pQ[fbV]<$F2<G`H9=1ou$:ka@c@U+i6"IQ)hQ%`62]NaRW[T&Yn,Y,Ep0`9<4isB?J-,Qm/kig-Lc-T"@=e.*IItUK_B@tC^qd4>
%\;5>Sco=K72p3HNKI[91`ZRF\!),j)6n9%p"p4YV,G7Q-J7*4i,Ll&F":on.-,R_p+:flFM5?q7(aB1A`bNF57@^WX-3.5%1g))H
%+[#,0`(Aao<<.4fne2.)873:TC'G03XH,W-Um`6>MSmlB=-"HCj>+TFI!5R:+aMoV7_sBPcpD06j8i]qBa"S"!XT:(m>M:('d,-V
%L=d)gI`R<[PeI^:,##=K*#]6J7uEb1T>%Je^(;$LLa*qY!0&&/QU1`o.6jQ'?=4kuASeW7^^pPj`?Hcc!?gSF)FD5EK-ASOEM2o;
%#T'(_KQG,\^8,Y8)SW&],?,m+ZWM+A#Lj+V@a!AtOok2>cWJpVKO_qR-6a-Y!X"Mk_l+&H5UCs!;[PmbK.5l'W>ksn9gMIA;oNDM
%%($#/@3c8T'nO@S3s.b'O.u'P>]qG=*MYV0#(Se2MaXp!JWBI%8-AtU&lV8k%Y>9Y9\+rlrfKHAb@0H[).;CD&aMiIf(95\PV7ku
%-#sPcKYFS<,uCE)PS#]lLl$kRCaR<9!kJCEdoYlD5bD4HTG&.N51<P6)Lb@dqio;.@kT2ATcGG3L\=(YLd2Uc!qLgA!tWN+#XV*j
%N/iJSau'Io<.f3k<,</>'2-,sWGu@>ccGO03l)M<oUskG(!eqW!CW5BRc4;f&YGHBQ^QP-%1"6s`$5UDVA@;-`6*l>Z/kumhc0_F
%)(aeZ^^F0[E5s.0=DA*bW9(fnN:*[p(B>oD:YATua*Q#c-Oa6A3_Vu2!5u>\&3";BL38NJ:IE%4WC"d!^PM8#)?W"+OfPh'@LTE*
%!1D.u[(-&Xf1*aL#]sdfG]q)7TIb#_ZR5ak2gD/V&^GulM]4G=R>##e,'(Qu5ReQhLuXTIj_h/M.O0Q:osOg[E6$R.(_R%-AQ)3%
%UpL/a;SU9_^0V%@l`i4V;L,>W4HN=<cs5!t!MC6+P)ZLo!<d03>?Fpc3RH/FW/NA0=\LXZ6g=2rQu[4pMu+1m9^uougX@)kThi,@
%P!iu"&r**;6icHHj=N*M-og%-?,JO8Mj1UPqCu\a8u2VDF?IEjEM:Bgr)Bs>3"/9=#Zo,(lq:tHL!A0c4J.of7ZU0$5o[.47<N&J
%>!N/t!PXOGmHB9A^l`8)XtfuOMCLAi9,N8hV7ZqlUi2;Z5L>-\&KcOc:]=4i/WkRIH&,Ja%_s1qW3P'*$8K@<nC*=&VNXHWi$u)g
%jdTcA.NhRb%mmH<%'C8)E@YLSZu(Wl^c^')<jE7o@8)N!,$RSj4:7$>n,SP3g.fLn80_Nr^r/@0+Y[c0L$;QBq;fC3B0A(C^pn'$
%Qk6?)6D8`7gfS,Ni(+(Xej>hdKA];VT,;0DZ%>^%Q<M4\&u[RG_Y#]`Afsp$;B-DK@j/?W.E';t&r>Y0`9>p/76!*9*lg)tPG#:m
%&n4dE/euWa$5Rlknk'ouB;u*)%'\Y2NL9G6!%r\XOPB2n$E4$(Z5k,5dK;rt_P,X3--WXTLCtr41hB&#dm8l]*<Aq+8f92\;&7L]
%a'hB0$b>$gq,h8jo^^#/'bEG^9eV(&6S`)\9F-u6$n`EW!C`>#hSgHV!1?2o!!7.];do_d(b8e^=CrSA.ij$=$rft=J84[-Q8K)(
%!=UH;9VjnW.AON_=0%-BY*0820<=9PEr(eSERIiV+JU>E;#>&/oNY"F(h#e9:(.c[9j9>*ks$s4<H[*7[I4Il^l&ou_ii4=qW*1)
%JL9BbS1B,Jpff='$`UDo.A/'1$S\jE-HU&3hQX+?VQl";!>oiYgQ\)0nlVf4N:(;l$jh#olNFXu"?cei#:gf5%mk0'$6VdoJJ8E@
%H(5OSVWAiW&[`pE$:*LrC=\[4*.`ZVRim\6A2.Ln7MgSI^#0IO"uZjkjV>DV$3P23kjUR)ckO9Hgf(Z"JtZ'i/`6ei9g[!OS3j=T
%Fe"3o7Mm@F($QL%pBMfeQ'F##0L2-BP:&g+";]DI?gPje[ffkj7_)A5E*G3lBPau[*9!8;,so3nFiDkmSA`XJg0g:eFU9kURt?HI
%;0;*(HksU*,9SSW4T`2Y,C`U('q!-N.M"qY^^OMdJCn.EAhcs]KZom<`h4;UYnAgAb[T:Q&1eQC$7K.EV2TNONH"-R>AM>$g*srp
%a<67"ef7@<!J!U.>V1:rcO4Kck(#]7j%u1=@kb4TWOd6ZVqk3CCh(#lVnsF?0KUn(10@``>Y105a#l8I_(V\13`:+ar$[Z\e&LPg
%D=35FYKHM#EO\3CCk:Br&Ifa$+:$K5`#b(6$&%quW7@Dq691Vp,EKcaFfLD4A9<OD;Hp$OPW02#o!Bp)HbOe/Z-HE+`?U0r0^0>j
%ZiJJIBrmWJ'LUe>5aJ8J)`p4iRgR9ICMAR>\2kVi>OmSu7q3ZZUtmJ9kIMq<^:"g+T#Y?HW\_'7cX#8s6Jf-6!!0,jg7'()Nohp6
%Xl2mFkL..6@THq,B[]tcIn4'GaYt_)L`!49F=dnRO3).:>rhs@mV(-;#f*:1+]uD8OgB_;BPP-bJO\Ep*!O.)-V)uKVB=`$VbgW`
%U#J9'6=G']JKj)7c\/<'A5Z!Skc,<se$)@a0Nof9JG/=0kZc`\fH=1**s*G/TOPn!U"YMp:dDV3eKm]?67Di/N1J=P12>s&Zs\W5
%]'D=&pOoM/A?0LgTQ/^fYYmT_kC'!!!]?q_6MVK=Pt.?]m8>&h+<,k-@@b3R[AVgrNqFTiRMk2h&?'r^[Xf"X;Dfe&aYEu'Zo4_>
%!icbBg0U*pE/^SA^kn"-jks;F6psr(fJk'B'WA)eZik7m+GO)=F3GKSN*(F/4Hu*AC,(u*$"`3cb!AA<g).D5<rh0OKh4`SR?ljB
%5H6*Uo[lQ?W1':N@fXecnKH0fK/*aDXtba+JuM-?+u#K2Lfh\,@:2mV`&*_W(VTWS/g89fP\FO,LW1m;Nf"qZkXS$i[AP>iqMM!u
%Ktq1T2m/>D!"=7\3u!r'<h2YhFR0*;_go*KLfe/-.E,VQ"GU)Uf^'(b2"OQ;'7e*_VKu@iAR0iWFdY)k/+dJcbQ-?Y9F&Y+*Eh"]
%F\s:WH&*G5gn[Z?0lpJhVUC^Kpcr=a3I+E^R/lI:RR1?r;$&H@FU<`?n/N+7A.Y+u(a>;/0A?:.+Et`EOAd<Y.*Z:$0!]jJOjB:X
%Q*2-:*hANcfi%\^*,>RH8$L>H'MrYai=J*lrF9>33g&r3h1[-K0c<E]q4kaW9"G9:>(<NG(_.$3-TZ%:=62Cg*mkfKh^,Vil7"NQ
%8QM+733YZG0[.6d2J0d-^&]1bPg-'n4nb^2&-Pg<LokJFe_5!$NRE!(N*HtW;RS0c\,e+r[AW3"[-FpBFDaRfmp&k6.eCXhK##nB
%@_$j.mHR?uQfFf$JXd+S3Po8U:D,sJ:Q>='Cn.M\&MVYIeik9%G0(FglBIHbb82s*eIu,*<ST+39V=m'pTe@j.ro<-03/;`A7q#l
%V8^;d&^C[6KZjf-AV`.>865OA(f?Efka?27#lX"pRE#naZ/si@hBT=e+sgtnjcT.*-P%Ek"q>Fd*'LK-a%0'Dc-+Rm#u]u]40GnR
%Z5Oj+j9DWK#?*htE0VV6/m%=&;?e^!&)p;$,WSoU9]X@<V[Re1dS9eQ";8d8XXl8"3J>#a/BKKK803meR3cM`0d<B**:!lS`1f!Z
%+1]sO9q]pF3*dsY\."KPmLtR/\'@r.#oZ0QTG+[:W4+Ra/XXVA;4lRfLdJde[-OMmF+cueC1q<.**T.2g/S:jN[piW.E+7H<+\6j
%7mchnPhR%C)E#H@W[^tW&V0s_<EP\=Eolkk>p+pDAh)N5O9Wd94=sDVTeHK"6=!4q8NhenQ_JPY3[,!HFAuu>\=g)d)luRR]gDe>
%H?3!U1^!n(XfaC$!&f"*"A]YDD%CT"Ag6+f8610Si+abViN`$i,E,I+rJOpt@.J--ag3.FLcCQ@_Q^9r-&YL5MniFBL/:HU$t`9q
%<:r(-i$]YqnMiCsCDY.KN$5!=R*,bdb%*u=632Wi'ci,/Aq_@hqrt*X8`]2p=&VYJ/[\E"VGJMSggm?D;OYQq`uC/DRZ'S5*hnWd
%K`I<j`!jB6:l1PRh3@@3^jo;PL6_)E'4uQ#S6CY28VCk#k5gk-382eMQr;F&eLGQi#T*jo`UVSYMiM_gq8i7fL!ET)LKhKZmjb/h
%B9@=Z]1Nh>OMuNE>UKZZ/bl2X)Wj^#2V4ct:.0>$!B+e[,EU=.7)D882W\3Sl#&,_*9G8+mtNCr.V+TLm34u$MG@a*9PoRCOXH2"
%(l9/X$)F\A<=5o`7/C#P)Xof(9pM4jaRVkAVFL]k[d=44Bp[T&Og.#a00@)\eN1MU;i3DjJa:Hn3pItGYkhIP._-0E>"J5m$k&im
%Vj6jJ'd32`dOD7o,u0T>qWo0#>*1#YLJRQ93^g&b]VqQ,XKAA6X&h=@FBV.5@;?9DM2O]CmZ4KI3G9T^`M[:bic^<4b'.5+Ua[P%
%(PRmW=u4B[dc!M)=DLN-WG"]!*uokf:Q`k/.j/nU6[cUEeG^*pMTldQ-QuPYn?B2n!`]s8!\Mk1UZ>CX077$DR4]5mMbFJ_.im'F
%:*CfD,e2Bq3@.2YD,<&/U:NJl4RY_p;7Qo3kt#)*:P'u`UBk;RA3il?@=cC.&dX.iULNN,!ic]rcC%c<\(Fe)NtbHr!\tC!;1PZ'
%Qe^"&/R@8^Q(Cc^-QA&]ZTd+T(^1i+M+Q%SiIkeQ4H%/D"SYk]Eb'9g%Fgmhb1*Kq>0^,=FrH^,'O[T[)l/#$L.\-#)W@8-8YudF
%f<p`?Va%_P?\Ra@P:;`o"e_nrM:`Tn%Ze"9JYudZ))IB:Q,#)N'c+3Dg3&&KaL<iVb+Q`((h+/^Eu*/:ou7f&WZe?1O82a%+bF!_
%:5rC2N[,9L>>.&',R`3]Ag</>XiDZ%Od1pC%#$Id>TWUdW=M%C''Uu5bc%HY31-4V`]2GM$(!iI8K"L2,qM]F@[#FVVmQ\5't@X8
%NCt;.W@e<pKrU_AXe\_AH+H5?=i"pL6V$^cNmONE=,*M7XTKFbp$*3&<@SEmd,U"YW&P\o_ChUoRJJI./#t362sE#'+2(%ZcRC4n
%.QeDK]k`KE&B[;t1/:92GS^pdV2Y(bUH2Z%ARVapRT*o\\9.2iY%a]4@CY+4?'LhcZEsoq&QM&K\<X(+iTkRrZuqUk_e#Q1D`4Y(
%(8mnl6ZHTs$@H"`Nt?q%-H%5ULV):a/Z75$?53:pL4@9!`#WoS,UP3L0`\*Q.m1*\9f3"&&I2'XTi`SUQs)@?j,:JQ:Vm!3#2*)Z
%iR/9b;jdXqeT=5_KW_#AdmIC.S?<N1b[4(JeJ',[;OAo)5g1sB_:n4l;@_diWeBH-W$X6.`+Xe[eHb]U[A*e2Nt\is.*<N%'FSPV
%>3ZYlqRGMihs<NLS4AHW[,i?<BMCj5<?aVcAPQP3*IK0!`o&n2JT`G/j_H;?;^G,"%Oeh<bYT-#*S+U&=4QH$d\J](-d[7<[@aCM
%+qYA*%TCcL\fkO?.QrK:l,3?k)Zg!XUI/iAWq]*n4]<3\lht=rSVYXVY*)sZ=aGgZ$'GVT>(l#P%$r7blN@aJ@<A@S&qZKKd`<Y4
%cAfOt;](HDNqLpdW@g5[)46aTE"RjsQlq8+JTVADde90R='S9=kR>lm\6lNiMU-i\2)AtFMt!)Z`DmjoprXRVMPs;@.j4#FUtD1L
%16qN;<cBXJJpg6')`G[!"R8)ZQ_CLt^d&Ws"GqOs#m<1V!GQ0bJXVaqWRaG\+^sN93h-iJo3,DMW(J3(aX8cb)$(f9M_nP,3XDQO
%:b8`'&F*^d/mjU:0Eh7%/N:^iI!LlBY*gd>_8AWP>fMj/Nhls^IK#(`ATN5^TcAYOH[d4@f%%RqZkgKG1;!nb4IUroMllSWgs1*H
%QlD'b0c`>po[udn/E/%tU'*D&I.;HLW]&u$+I8eGQao,AK[gC)Nl@U%`8J\Irf#>*.\:/Ya[/qn\f^7I]'uG>q1(+.E)KnA8"76G
%T\sk*Dc%K4UsOta!5[jpE.G%pn>Ifa;%\NTMt6YLgnVpf8LPSgI*Ir3I>jPAn-kB<X$^4o=.9]p)?s@=LsEch4S6k6DC3]68.7*t
%]co58l7Ae_NW>2PH3(^&JrVj4H/`(=n/SS)eD!Z+IDh*13aC'oOlA:%2BnH$BcNQU<dZ&[9M@oq"9R*sB4dbc_&%Q>kmfD\4mXr(
%=qMF6!pGA\A.4$dm+i,Y6d52E#m@90ZLP=66_lT@Z"s,,'pT;;19%O]iIQqHRG;Z,E6f\RkVnr`TQOql>SV%c+`13*S"3N>Sh.qr
%E,p+A2#RFmDWQE/H\Kr]&8!".EL<lF*Eg_IKK@`(FK3q!j:8.m@;Tp&:M1TU/gt^EF:q--A`\aHhC>?Z"9sP.>8'\tJ,7,YDs3`e
%R#eY\&=uC1Ro2\.ne(PD,0V,4F>@3:-.UGApLRHL4<gQd;S%DC=&+%'VZKPTn^D!Hd-r6\;UJM$W*YNB4OhD\<8"t+1@$]22*;"r
%<4CnTSR06BlH1RSXcp].WB!<gUCp,<e;crn,er!HAX)G>@nM$HG>=["KUJH&nV7r%pM#'VkHkPk#NAlt)kO'ta))'Bl6(IECY@1(
%f6+!O[3QsjGt`1[/!G6L><tBI&gq[49*/V\@g(;i"l[&0Q;4$.bp;"(UXHg(6`=+^;fNfmcKNY)T-r2YS=!='Q,u3k=^3N4TUfTY
%/>Co8UV.,EQ&<7D<8/,P*Or?dkeU]t6U\o8Jf)NHmaC%'6a[G25[1_)_8nXe@*5TUSNnkjW]EQ1nk=tA5mjQ6@Vc$VCj&BE8-?bG
%';n!-7qWBB7g#$kNO:sD.C%GV#GrG^5tsoC<1uE9U<8H>WZ[2l0f*EJ9f4g_c%k9e,pfpP(-Epg)!`t&kb@;$P3,aY,3uHs"cr)g
%BDTkeZ1P_i#u3t*S8?0r2X'utHH-/`$u)4m+cM3pD0J(a+8,#r]X5"iH3fsK?>LW9'YaONL<'.])gEoD?,ImZ&W0BM;t.j3Gcb;a
%=R3ED04"L:05u"RH#r;r>.r_m<*-7Sl-G&pq!6c-obY;B,!K)_c!e69D=kT8F).VVnBZ*P$TAl1JGo2uBUB3G([aT,;SV*+Dppgb
%G?Xs@.p@1OV'k)m\V\(UhbOl)F2<!h)n-2J>Ca)-ODa]md2AoaLIqC$E&a[7^78(XK+UqtHS[gU^Y>mL@><I6Fr*$(/5uA9@2e$9
%HOBd`R)2'(2hf\Dh,7n#Z0RuGPBJIo<3Xb=c)%oD-#!k4]hu6B@k@AO/\O$>IA+5YGMC#$L<68qhodpC=]:0p;1EN68\31-r7-p*
%S\$Ekq1VQ,r2K=P_5NPda&Bk`djYj6Sj/dZ`ZV8TPHQ2RA/6IOf)DBjkFFiDmc\nj3Ga(9Z3[8^pnHp#m;3<e_r`e6CJAXgg24;\
%RHBfMSPe'6Rt5q;%*hq;anC!P_]&='FI6JOdI'b>c]j!u<Yr_j>J3nKRB6'#-\q)$Q5O8&d)F7Bl2[qXoM1QuA(^*[R#5U(_=CLg
%*M;s.m9qnmq+[UqcH>qb=K3_FKp=c`S&+@MOk_K^@88#W+HPU_Da\XCr<E&2SJT!5+HPV2:?LPG\I<2;3=Y(*W0oc4b<rg&PflG)
%4I"#V\[8-Ceeei#]l/Ou*C"XQp&==fL@?bl&cQP>FWMR8$qi8k[]7HYFp#dKaT1#=03FqOn_9%@\MMCDe%&<R!hnVa:h<a\>c;\:
%)AfEorPhmKfD9qF2TS7`&3<rm.BbL\2HJRjRT5q1b-4G8jLFq96^e;Cg<$cKSVs8Q>B!Y+Vr3=!gF9r</+=GU?%ErKoB.McAg'8o
%]WcZBdme&rVNjU/b>oE:O%/=$`qKm?kpM*lURs9I-X0p,Pd4+t%r3JtAFsEEMjhe6lJ@tlmeMPRrjag(CO]2;*1V-)h$hH0g#t8b
%"";(29[eog<4A3*8r[G(F?JhFZK*Z:NA#$MrT'd'aASPZBXQR3p/INIR[7o<;6t"]>KM?+4$ARfdXii<@p%!Oeuc@s)LsZUmGgl&
%FuB@R0G@[US/aF>5ot2fH2op#Th;b-bfrmjSpct2*Uj0C0f-SZPYht8\iOWTp<1HhR[h^!50.rkAl/qHaGh37b6-JZ^d]+UQtD`'
%Zjin^*.eRBHXrLrT4JN3CsO8_&NRGl)MQD,n]]b++#>6bAK*G0gY<Xd7__)K4ALW64L+q87WKP/,(>VfImaPqP,?Qhr]u-oH'+T"
%EYS?Cmr-kXc#@]Ck&W$Jp2=]#q=a9qQ'qU<?bsdm!UMfs)0n:#o$+Xko.Al"6X.:7iS2G8!6r!#o.AkW1TPoH2cC,H%uID+cNE95
%^/Or`I*4J+o"FB/Uoj@ir[>qjn<oXCbVPY+'p.BC?@u+)++0\4E%\K,2<j6>(8POJ;'dqI]e2]ih(6K*ou%9b:,5jNU8;%#e?$A3
%SPJYBo;C0U(ZRc5`Fc<;Bj50HJW+bdf$(t,b)f2(Y8m1uUq6\_/m3a=Uj^Toq:=tVP2T"tBs%%(NUG<@K"4RGKmDr7:S%I``)6g<
%R-2fdr)oUUbO]A521OaX)>;i(s0dtYRGM;L>@&#IYmf)Q3q-4j9T@TrK$uR,[YUg3Zb71HhX;G?#k-?0q4(*d^Eb8'_+E&XPL[EQ
%-2$\;c*fmAp:gpgB:!Fl@;Gn5J-VDiRrnLh$_(N.gHq\6JTTT08+OUA`@"tkRRJQ0<#.sa?h2-.Sp8?j06uP':V>bFQTXf$-XQA^
%Mc&c+TQVJS+DHu6>m&bX!RG"`O=o:Eg)ip5jb^8?>naPhN-87&N:M0ebfCc9rEU(>jtQ,iR`JgU3r;tJZ@02PV`igO[&9dtkKt^?
%n!KJRj-[T;Bf:o[rZ\5m0TJ@7B$Iu>b\g8>`\us4@/<*$*9V=Vr<F/tJ,*"Antc`;Ns(g8$btLjoS)1\R:nD:?hqAPAsgL&J*6QP
%Ed4tOoC,I0m,N<'*F49Q[/?1q=Yr`*_`R,ZNE1CjAOWQV7?RLg]oaP_*+iI^1X'9F!h*0eN2iU4%q_F-qBq'3:@B<X]fg`@F#EYU
%&c>d5?<P!LIFaZbL,n>;.p$%A*scF+I*WE1[4X-Eas-:1YHok!fCNUB`.-0<(Fe8]qtl!k>N+MA$28n`d2Y&*07*":AI7q<F310(
%cRajr^8t[rGHkeK`8#Sc:)4q#Y;&T5rT*8mkr,l8`3K"P27F"7;nJgb%F>gH1*+rP)dh*b]"P4SHe=jSBhl@8'&.944.55sC43pQ
%B7&.c)g-[TIX74H6:`r8WktW-el1oOH[Iu?\t8k`L!*mc1U,ErS'DG+QlFLWb-6q-3G`fL8S9R<,gC/qrTQg)C4<?Am'6Nar(]Is
%_:GL;*f-Saa%:LM]Q#]n-Khl>kV?t^bseGg'^.$:qWOe?Sj22EGnECjofht*.RQsJp2*c`8^(BgVh4ACG^bsAQu2efM6UZ!3\nXK
%ZS*=:-8@G#>_]cHJ+5Z4ZR0Pdr?V1t6f)o;?L*i,?\c<G5#H6qq/jC/43g/#dHn_`OhY^IWZoYo2YF*\gmkRQo2eX\Qs'EgWS]P7
%hu9XTMi0-8jF'_:/%1lCDmNW+nk,.7#gf$,Tb8Zp,j$\,O]S:$;LUNfR*<4E?\V1;/<cHjA;jH/1;rI!>)JL):#^FMMOIaUMt5%^
%PejbtP?O2E$@DJ^;(dXo]F;1r=XGj^`\Xeea_Oac`8k1k=qp`25V5STofht*l8$k`A=:BK-$/4^(*sW(c+J.'L0BfmPF*:"DFSA<
%k$aTg*c#LG$/?&)NJjUoO1hl:egQZ[$nnNsr4R)[IL,IJ7raY9\5]Xd/3V[7ebaR#is5!\[l55nro1$24IWN+3O=!ViQl(^eURS(
%R9[H(N-]!EHHWMq\U)HL>HZgp?bKaRQV_=`cFgfCg:IbHU!>KOfmaD&ee$_%h(A$hgcOd1G(4KDlo_i[Qg9XNHdboro9^rPYl0_4
%atHS9ZFj6pMcOY"TN\uBmfq#^p+rncHD:-5$u)*hXme>7f?dB%jh9<bmJQ(\&#Xn';bAcocW4g2gZ>1$F!kBlP31m&53r\^GCrbB
%^X5``Z;ri\RU90=Q_Aec^.>L%cUk=09`5%,eDs@fEa]X*5/0^n3uBl)BR]*+3=Rq`>mGi@59p^pc!n\&@L2<V:#k+>e+i[SI>lEW
%]/s9DQK>^PqhDAP7!2f2%<Le+r*Wi=jq"4tFqA[qkC5[jWCoG<>93OKRq((G\"!D@Ikq%Io3'MRF'oG1gP1"IDebm`UR6PCq'@YU
%s,g"DjfAi]22Yqr+IA95^NC69V9^fu@JJB\$Q#QBo5E"$lDs"])DgWSAU%-H?D3K_B]KmHQXcN<q!J$UPu/k-hlP=p7n`_dW-^P"
%JQ\blDp2;-%oMm/D&u##f?Xt;9V'Es+3&9;%$R+Pb*,M_R.8$,/!4fhhG0Rg1@diQHm^[)*!ab&)709bj-`\R>`(37a:fG:,%K1U
%D4\h9<Ag?q1@diQ]Hf8LbE^/i1nD0KA6aku8n=C/lmFQsPCJ=^I\YVP@HY1[s%Bn]b>UZq0s$dchS!GkRJd"*ZgH$#eKoK=k*Lkj
%QTu#Cfqk*;>PjstYGL)fZI`eIO&cT#e2qA$gV`L':,.soR>VlOLhU/sRE@LMGnZr61>Z8.d=4fpcMZ)*XR\.4`cQ1PB_DA->S?<$
%?WknVr;S;hEQk!=s#uECH[gO0jU:<c?3b#4akR1$V1$BeL6u-Wo*=+PG3Xo%St0DnX@,^h^8P1GI'$oTAWRcV2uZ'3Rl"p3_"BJh
%CZF=GnL2lcR;R:Ij;)::%&KjQ_`Mb!%fDSH6Ys0D@/$YS(5hP>?g(OURWkplkB9G03I2.sja$s]AbC]TLGh#>QgFseHN0>hAU>ks
%U>.-=IA6<<P/$($RWESeY:.W]*Tb"AT'Xadh:Wg>r+3>n15B"^fkm$8bkfM#ZgX@,^/_g^[CZ1WDKFhtEsaKXNjI]?bdqf,/8p.?
%JM:m%%HQu'p[O2<-+Al#br3jW#!"oI5H@OTr^-D;3/Y9-M#Ddt3G`eDo\*FLA,4ojI%es66NVYTNW8^N^GkF'h.?l^b`2EO3Z7W.
%pDS[[hG:kG@.IG1l]&<eY[AS@<7W'1Dh-Jg9<oNh[i8](Uq47A@=-Xs[c*]:6&"^7gRV#Z9=;KA;f]%:c*er`D?.6VmkpI?*UX[_
%F\V_.+m70PI*BHae8QK$r6-+^20aFd7TJ%[TC!;IYF_@4CU:,i/sgd(8IpmDn&Ul5+^2Me0?I>?i.KAR>;CY7QK^`5Z]W"5@[?-T
%^Q<(<p.BeL?(6*G_TY(S#lX!\j:UGfG-e+XIZ2tB8p2s0,Ff_3EJms0,NTF.`<jt(ZU"!QPCC4$^VKcfXAO5pfZQV;\]@NlKa]tj
%1#Y&oduUKZ(T^?rUMf\R>cNq0`+2;CE!hr&c.6nn]4a*D0>B7m?YFG8#]]@To6.mr*UIG715-V,q&_e>0_8G.+7mtD_X3RUqL+B:
%T)-N,+):_JjK6qrj:T[e'u7K#o(SANrh^94Y4"Ys0%]h?AX^o7Hk4XOp_KYunf:94,\qVX$++u(JP?%`86J:V+"5$rMthaG\b8=[
%b?R*"iOad7b&K;J]Q-,aA(4;R]U;RZjEZeKR`hJ:4IXHg\R-B%Aagi6B^RWDF-lB<o;.B.1*!-Xdr6qWbjo^*&*NM&/e@.9E%V[a
%ChNEh^RK=hr%RkEF&-pb4k4/!f/(X`eo"fKYLCWLM)gG10(0!@rpHH:*&>a,g@$E0]l+c&5+&ioQ$-Z'Y]GqiaYT<e?5CH/RrSD4
%hsVRuTnd<);)8NV8Wit'LF`Z7AZL`X7\fR!j*QN[J70?SqAE"pCjAlVb$psDRH`R8Le4*u^TmJK29Sb,RkumJ6"@7KBg1usW@tZJ
%?CWn=B$f.hAoi&Vl85e7`Mpin26D=JdV35@H>9fjm9t@Abt?5R2nc_k9.S\6G;FYU,HO/Y(fiHW6`]U.AmZJ4p2ME#qgFm!4BjjN
%g!WOpl`<V4H*6cu9'iCtQ1"G&qmS`deOA3`(f+aGJpsKF*bC23WSp8pJ]ma%=%RnQO#uNNm<PmbEnK^M%Pm,!ElIaiMN-_T/]/4^
%MChnG\RGZ[G,+]JF`qQVQ<%r+(*[Gd7Ba<0=RbXY(Ddh!S/eoJp786c?CVQJEHCICnQrC$A(b:nf0230gqN%f8lr2UKm/#R]eZ>^
%SAGL..Rp*F7g5e-\tHi*q6K^g_r-<fLVSs6Qb`pp\1r%4mi(sD^"rYCGPpbUI/3oK^C*?dH/ZY2VpL#*hn?UIAWcSO'm\_aKd_o>
%@c2upj)M;1o_l"u0#0"f\cMF>Ks=R8@q`)1ei\tMN.n1G?87BQ3-'G7<>8+3X.bIs1#RI^cs>S^@9P4#ln0j+ieS\7`8u"GZU1jA
%6h?&C)nSYrh5aU`?bI'g(2arF]fl%6EYlZD5YuqDKIH)/?NF:7_nNq#9rrSLf/qfop<Q=65IB-(Kr&gnf1@pdi]CMu7dZM)9g)TA
%3l@8@RJnF,7e5DJB*>t.6u`7]b>rO7.?s_)_-u;JUY@a.ZbFh*J_Zc>ZQS^;)P'Y#5Up?qF;ni&<!WkY`PP3Ef0%jY"*[<oLK33p
%_W248jkGJX1dC,Zf8#pR;*Prb23r+rMJCKldI`NM_t9kN!G?,kJd3np>aUonc<1"BY5dmFX^t08f.<U8.P,<N<F&8*K1D47FMTMc
%6Igl&Sf=t;HjG?AmM7'r>Ylecd5,,Tn`qP@bBkq@Xl9"L1&q^TXP<Wa/,hk,>hBt_n1[7_Ni@;<_jZr;eP2>tNaU@R):ru(EnG&L
%$aN?0)$?DGP%o&VnmbnA7e>i6a3'B-]:!uBh`FHUI`N1PF>iuqn\$Ya"")V=^.OhWOKb%\.iYKK(:#H;dADW]dBXM&<\@LQ[+U)G
%dI%a82B2VR`+`4th:AMfS2R/7_uGi#j*fo*Sb'qUX+go(RVg.-OPb_Cf8nTZCcSqg)S]BFXjpbhP1mC@]?tBl^]I/CY4d2iKrr6^
%X7u@*0f!OM$eER3UO<2!+GC;o,U<g,Du)Pec`m,&LP<PU9AiWM[bJ\p(.LC!A8%S[cS$-=K]Cs`=h()0`^-pU*EB9KDT:,*U]HBu
%f^&PfQaIZ`"RM[9R^CY_au0M'B$*EplZ?@/E.(C/?DU:?3bbs4Q`f@FX&c!F,[^X=p,[MP@KHk6s)Eq+j\F6@r=gai$pQBEeg_UI
%B2/c)WVr#;7lV90PG8"1:&Ntp%d.9lYkKecjH$`=hJ+.)FGr\\.XJ9RYug0[fZPT7&ms+TRXhUq@$</-Ek[sqCig<ZcfFj[pTb3P
%i<-WFYV8gRXcD?:IrX9kgqA#FZT2`V(<Um:UDsck-BgDAlu:PWV_[q<j$;B"k.;H8Y0/PKLkUE#fHNXaPk"m'r/oW<Xd'8Rg8#6o
%/WDQH!,KD?NhAW[NC+I90iHQE_T$uS)%BNSR$njU))I%<iaY60!LLjGaQ2hJY()Y\fVh-a<]j.K&Rc@NJ]!&#-K$M:/)X/>)bc6@
%8,_;RoP,VJ5WhGmKiln#MI)5b(e/6OP(h\a3psEP.7CmT:F$b%81YX>!]aUWbNR,EMP6iF7X$WQT:?ghX+k-j)St<kB?,n"B]+Ud
%1rBiEp(I$#2tdVp&"rC^K-6]".`;f/Nn#01PsB>^.m$TV4eDgK0*7A%1TYGJ'(I*/W+$M!(4A>>(nAK#.N%^0")tB_:f1Jfi\i[e
%OB+f4?DGA7\aUPW3>O6>g.+\6a`Ods+N&;mN4B6tLuZ?000]_PZYXqs6jU`-WMIO;F<q0*>TPMa0@n=u\3/([ZdrG:YtaI;A?K$]
%01[;qPtR/K.aGhp67*J\9n`/#g%CN=JV1:fEFd99j$mf$M=kPU(ic,pH!9/6`TfrGT]1Nb/g%XPN]A9r-qcTfP#i1422V[9(gMS:
%@"nfA[m8^_j6BY=PkYWW,&nD^Paa@\d(uOdN@<0-i7'SP4MgOh,Xqnb-".K75L?`Z>mhIRJjZOdd";s(-WV<Q8G)V[(eQ2i(kYJ&
%PLa\>0aT^JO[7B!i<gjfikR[;=Z5A3o1_%of>hl"O[c2!4-kkc1;S)hCCZogHMddTEpZ.8Af6te),issVo413_:CsF_3Z67,_SRY
%$3=M[,&>m:gAL)+j_Li@Tf]ZD\IM4_:^Y5]>!f+IgbKRI`*CaeZB^_0:>4;/N.h"iMLpn/Q9qA,R!cdkp`:NeK=H?/XU&PV!D]/'
%CbWGR7^$<pd?(MlLab4?I;(LEDXhBd@p=M!-*@Z_@p+1hFojt=P_nl5;*8@84;%XdGXncWD)/MiAB');JtjP6*bN9XB*2l.i<,K"
%7uLNd&1pFg^(@E@lN]b,NR3BT<Qk]mQb#QD6K01R`TNm)d%hi,,D2AG7afdt7$`@FUd$I4dKCu2&WTs!2DZoK&W:=^VpRONL>!SU
%":73Wd]>.n'+@N)OO:F!;)T\/1%LT7%8gmQOEL&hSgW"rL#*Qq.e4#8K]!,#!'#f>lk(C.ZbiA!Kkcs?4(YjRe["gY5g.12K@X"j
%;?7Y8:UBL,m>u1=eMloP@5U4J=R-FTCge.6KZUXPnuOOc\.E\;bmF\d$TTe.9_^ThS>Z;cnh6Pu_A=`h$RJMf<o1_&eA?ODS"Mjr
%(GSJ>"JRn(JT.cGh[4-#&bEuHjTCbAEZ+A<orRD2igKA2kjV`)FGLths2!!X4dU.HhG;A8qpF)ehq>C"A4I#GrpBBBUV]T@0^<+p
%KFtYK]nYF-IM;]]lfIDV&$HLEB-.L/g$k(-5JU-mN2*F]7a6SIQCu<LHj/Mi-+OZ,$n,)Jd"%Jb"dV/L+QJk+,6dWH.+Vlc+Gl^W
%"oO@o9gB)t=Z0-kNobaA$b[%tqLj6OQ&Int>EI2/P!)0#p&@o/LZ9=>Wl5jhW>S]_c-^OZ*EF,sL=k`7JDB3h)W14n2o@#uT"_BZ
%2UU%"o)B'A0C!-&%^apBS%&]O@s?mDGHgtHd3#H[]9<bbn]&,9(4%fioUg3><12#35eBdpH'Fh'Qm5'e:%-?F"S^X0XS2GpGbH_Y
%bZ6LCE\^(BaDUu-RH!BGjiep.)nXdhU5dpcR3X!bV(\>NIU"<QJ'4u1YjH6\4O18n)@Uu51SF_r.uQ"j)S!D12AG4+4/`'2jC[`U
%Y6Fo4O6:P?nmMLd);ssDd,]gS]6S\O3"%hS_F)#14E]B2?4eYV@_F%/N[C.XV4h?@k-^m!5<U&&REN9bB6S6UWYiYJ3LeR0Y83C5
%R#tP9)NC`fg$9*`cWF!:LE$3c_>2X;@PF]%RMhGYkXo",/me**)a4Fm\sXDUEAD@;^tJPfK8G)(0\9MYA!2]3XOd+m$BqY.mRa0B
%_5j^`4)PIe`e@l@dMn4UCNS:KZCHTKFj_ll=?s8l4]Q)?``@C`.#itp_Q1[aR.T/5:8gmI$R^ptUgFtG`Sl,A7;]&uj$KM*h!6io
%XTG0a&cRIp>JhK=B1]/9j*=t)htsn3hXQ4@&V#;;<j2/6FUL5@"V0SVUepMf9lq2_hWuVBA6?(1?.Z*IFpe,XjU&B^InL-^Db9s3
%dpI`KSnN<$-ST:Wk5Qn&P6730H&qSe6[U7K@3B;5#@e.#bFsZN;gUM+_@40qert#DkOe%76p+0B+nG3N<0H!1qgr46hid-+f.ZJJ
%3Xp(Lr"OId5hoF#lLpZ:cpcodh]&,Vh6oK1iJSBWHWVm)dnm/60CY^8A1mq>Fn3K\F\*U^I%C`V24"V%._JBHPEEg\/.DJr3d)</
%ULher;Wp&/_\8Ej3?<>[nf`I?kXhP1Y7?*uBt&W/2>a"-P(S4XouXb&@L`4i[Pm,d7q&NCMN"#M"l$g`Kj(N?D!\Ql$OtL?VbTh>
%HD>g@C)eLQc/+<>P1-RYg*ghbS]?^5?s<"V)]b0lJS6ajK^.,BLnt'HRVHWqho=jl]@Q_BluL1PELeSG4T@Ss`0.D%9C;.EB.tkp
%_$1Ee70uW[UjH(V1jd%WPJ-Nn!VGW2'&p$XG&X<9gGZ?T*A<OL`cYBe=DOC1k?q/(`mO^N<Vb(tK-fdG\#\/)EkL37*Xi'-9#a=W
%hJR;^51p%WF`dNIIf#d!qh([l:7@t-,'GpQ:O@Fa])0/iA;L]MT!8NSG#tVhp&9LA@&O3FZ5P+<\:QW9U28&S[#M?@Uhm`!#:iXo
%)r6h.S)]CM[L2"3WVDe9897U&R=ga(Pg+3O'@2Vn/qfBIe]!RfDre:,M]uAt[45)m4Y9\-3llKt(IGRVYS(X_ai?0`keB[Aa[s5q
%o;?5W%Q8&Jq[Ik",T$kiLO\=nmJ*0k;k'W3&.>]=4+?CL2s7ap3?@V%"i,RggGfD\kB/-EdMs@RoN%s-9Nidj8f7&=F]!HeV_N>j
%`T(:jm#h$H`ErS;GkSpQ,>,pZ-ORk_%DY@Y)V_e3^R[60dH[OVr-ejba@=GBi63L$7RQYW[&Z-J4V*R6M?A9Oi/C-5\!,BgNLKh&
%aVj-qmgb8X:7=3W)\#8`H>`_Xc3D7JjaBphWBkO-NM:aMQj:TJEmW1:igST$g$9-ef&g+p3\FU0`pg?Q)J_;lCk1>7/Cc_b)28@O
%A8k-sg<KUW.Ae>D8P9)D0IAhjo['=Vdd3OV@W9m*L_d*ib1LY<NK#$7b1LsQ-f<eZEJiTR,j36m^X\+9)0ME].LOS'dI$4lqM]%L
%WorNLX\fi`4`HfmL&/gCX-1L23t"im2@?V-!l!kMH]Ad+gn$8_5]kHCmC0L1H'<RWV^?+n?PP(jHrZk\`mUP6QO*JQ[aD!6(^rK:
%D1qqb?*MFqZ+4U^OlhV2-S8T*:,i%u:0QgiPsdAZh5E<h7(//m?NgnD:J2N>K<s;B[GD8Ni*=KSbF3FrMu9+=1.QW(/a_ro&!Gn^
%m1.1k:%Y\pae4(/[F74d=pjQ_W=7na/St\UZXI@Jf,btlc;HdW<]96(HX"sX46U-9pP0']Z\FB4Fbg#P8b9$N7+us/s3=h%Cq1)!
%<$,TQNg\<h"=,F4;k+75AZ'O2_&H5\cgi02),A+3#L4)7Bs34i=nFhO/Wa_'LJ=c>U)-ScH>Et@NP>@YF#\HL(gFEleiU'@hg-rn
%\UFg];t_.._-'EGg_u8%>?bWOD=g8O`r3:9HX?<.[U<%g+#j$dK<^POBPg51Ts6cO%*cicg_:"_UqbgQSgh=hjZ5l%0K=jAi(YN8
%0i(Ac?Bb;Nr[B-<,/HiF%l3AooW4iL)P0^U9Pu7Wbi^uGBaLBp+\G6q`TMli)4_/E6fnoKa5>4mK;N3uGW7!.;kiu/G36gYOQAA(
%d\X(gP:'40Kj_J<%N=41*c9^1E;0@d#Id_Pn*W@3Df.+l=8QdRLW]qYCJX9JmOd4oZl@!#TBu72)S<_rqKhPfoAJ$eqTc5+X8PnZ
%f5'77k_:#Zf,\L#rDGegkPVm%nu6kHp&;Xg_<TsH[fkNgY,l!r;lch6o"j@Ql`9c4A?4.-n??%I(2k4`l>+*+(Nda!oc)*PrS"LP
%j^U;q^Ncr(gfkkbSnniHmlk:68+gWdkM,Qoc7OFW96K-;\i15UT01unDdInF.;`.DDl38D[p/jAHN0rCEHQP'4MG%5G@OTZ=DQkW
%FMrLU5OWKKWr!mqnoABNo58igHoS2Io(R$:76]V12Vn&0X7m^lH7KTDTEg`X#G6>3l/pU_PLbq5ji-H,T;A[/lWlN,GE(/Z\r"0Q
%ghkW2iQHqt@Bd@a^N@B.H+3_2hWMMOQ!:HXQ"5""iL?as%p,4E`Y!Z7hlZ:L+3L`lB;r`Em6<fg[m*#mPrgoGh-01&h&2L/[r-Z6
%$/AimH$\[A2f.U#a44(sH0b7nKBFaXr-7BjS+EJm^0g.aT=B*+Q<fKU=a`>U""VE1-2an6[$KI3V$7LaIK!V_nQo,]nBGH'LVMDY
%XB(qJ^](Zb0+RNFGkK/`G5WSfoKM*Es/,Htg"X.<;;clT]`D&XaR3;'Z@$%uful!#e\gt*D76A[oM',WEBdcZ?<q=$^KJ<ppO+-q
%@<ggr^`o442pU8%:BL(,h1t\#lI5^@[:cdnj^.>\`9.$[4TQ%AkM1L\Y]e?n5!!q]&A<L2J#2i"`@!rG4^u49;%BQEBN9M]L[`\"
%_-M<T$<ng-J;)UteQoH8eR\.t@.2d8AnemRj_f3jl.OZlUN,VG1>@0So)@\7m_dKH@<5Q)r3Q43[-d\1![[j9YNt[Sl[A0Vk=6c1
%8s4Huh"p9V@#I(braR/+?bPb(<im[6'_""uhgK`tjfP<k@YSc8]C+K6jl"tDqJ*cppc;N+rq;JI;A?S:$n-A`hVE3*r\V?Xl)EE1
%:J3!jMl<;<Q+IPr$h\8T/NZbGAb`[qZmDH%Cp1=ZZ9A,\[/G)+3k^tle?kO5W;j#M%:S"ie%QUPV=CB#]o&$M_Te;!Psb91I;R<@
%J#Ab-qtHUko>-;*M-LY+*:%C:h5@F6\bh;WlR9'bMUa(]GXH0G8_%M?lg_=0`i&D!H=d+jjLEP0>4kMRpb/=4-dZ;(ggL`M)WY_E
%rnr5#nb2V\@tT;L?l[9XFm\B^!e%bpO35Idp6X\1:60V3>n]EX)m5b0YntH)=+V5uCU3L6I#1IBct5Ue/q2IFDI7nafZ\+W=h].i
%1B$Jr1>292&"^Lb9"c;4J55^pmZ$m$CW"uZEG=b1e*9j._*VEOfY@*HQ+!=Z%T_J'5AAV_dE?a\c1:J<SqR:2&<a#<<NklJ^36Fr
%G<S*rAu!fj>4_a,^E0MBpnqn[P4NY29tT-9dYC%[S+dtPO@)Dn%G_:aD)YS`4MQC7HM^u^Hi)qgb8Rq:hPbUu]D4bAk4ii]c+D#,
%@.)gOm[*ji1'IG+Z@H[d401X5ht_ZrnTuA2gYt"qh;@Y,lI4MV[ao>t4UmqXcDlqLHXP&-7eK[N_`gV;lROgFp^;?1O`_IQZWqhL
%LOdkj@WoAlG],gFQCm&>cjK+4_`r$UpA(bMXVc;.FVT@*[bt6#9V4<$W4YAt8`-YsNHu=>kL6h)"7M)eCV&%#r&XYTEP0.q%geBb
%62Xm):M"9MSuBQ_c$CCKe7CQON4i:(H"@ZD5K?PGrFl[1HI.pIqTm^A6lq.MCs$Vu??+:"<OA+Q/Pj2[d=%#Q.0_="IjsN[\p:-7
%RrR4Z5P^,d7bh:g]+5JH!1WHoW>g/PS*Sh[U.O@0;i%O*+/AH=;/';u-G)QYSXOFfj*aK%)BVP94q0\Q]D@tnS>Lu-k"LA!PT+om
%>L\;EZ5YW&6dgj#I)XHED8o&E)!/MPagtVeeP/%]#L2sT/7`TiA*d#`MagmR==bT1j/]AO;@q?PGs+%bERoT;]ABnTD'Q`ejjY^E
%X!o$OO:O4^*i5e\8,Q1.h6L.ubf6@_P5Bfr(5Z9IL;%H,rfj7GI?bMEXcXlg4_4>'&jqSVMq+&-UKLFW8BpCgI,/Ccbm=N\,al7>
%0u`iQGVj)P*ZY_[dWuDTT5:V&LGrP)[RN4T8/n*@`!1htpAVRFN;h>UV8M.!jufboXe;f+;f,Pba5Fk%O2-(N6RuJ_j3K[3(O/tm
%\%q=ArR,_)[\&TJg4g90l?9AIoaE2Q?FJbai4Uk/3#`l:iNVa-Vuf?1HXQd/hbQtg\\@q&ej?q$lE#K:=2Xdh=>tWhrHc-kXtIDj
%5$mGZ00T2JX"3U)2q4M*_tl#.Dlql'jF:.$hRsu-,"[Sod93gS.0qj![41Pb<0KDOp!d63c_B42]+F%>Ik>M$\\1qtKBRI[%N/@f
%(L4mliLp(J/H+)W8b(ou7rK;QaYAeo`\E3cI_n$5Cg5i:CfH.spT5A>hWOcsWmV\L#Q=Ybqt6uYol2lSj6g\8'pDSQZ28dDg?>]Q
%72Pcu??>iqp+1'cfQ5j)9nsfs:LI<B];'eVnS#n][a*%gqmDuhp4/$!6T.6";en0PA4(1'^]'T_X7!_BCb<%R5EqH&i2h@qNt7GK
%ckL=P7A4Y7pkgY0h`+L?Nc`KbpLNB,I:<.YZ/j]tIdc+lo@&+e2TgHTQ`>A9Gl*V6PaDC$?Kp.tGCP2]h>MY7jj&laBI#Y.W0aN@
%QLe18,(eTg+"S=-Ll[^3'l`nOGO(lF+3)k%qHl`+`ef8m_2%mSc-D1X@uL\8$=Wb0\%",Hf>K*%!+eap>&lgV>#>qInPS>OpNblG
%-Jim2>K7`h<2]UmBJAZ4/.pY!X"2Nqq?$eq_eY\EQ8*$X;;,2hI0!)id.^RJ?]1bRh"u0W_h3Z*QU&W8F'mchSgS(o_Jf2*67#B^
%PN1'`MXtNCF1KbJ;fVNkaqL&,)#\TPZuJum>Rj57a1_4nTS<,M&X;JajKqgtnn_1\gSTf$iFgHFmj-3-a+(2+RMYFqln'=Ms4B2N
%1TC+b>q<?':Z6QeO02OoGHNOTICQ_t.ko.#8g#cN.j$phqrcdjS,5L?%\Lm6hLfV+L/+doe`>H-(ZeCiFt;rq+)ZXQ/\eAJIianj
%c(hI$"ZbQqr>7\eqPX;GXa96n'@?Jh04jY6GcZ!cl0<Igb7IkE`CnNam?A0mDt8a_RAT%C3tc$kL";HlSKl6%*fh,F<BNd1j%d:s
%0>n]1i+tunkB/8(i3$(OFiI7D2BR/"f]'>=DF6@J_[dKDGkV(,BtV>X,KY-Orq5fAC@^jEp`7ZkY-!/$e4b[[[mm3-n)U/*5(7P`
%R:.$J!.S#CMq:9A2sfsbVu;2<jMT]"D6n!#:E+XLWD4P@(Cp)FIJ<8aS\VRZ&b#88XjVB(A#id\eQQ3`IW<jqp<.EIcJ79(r9><B
%gE12)HI#*XGc>c)?rOU*bR5t<FLTYNIg3fupDT,P4_)]9]5m@0FaqU7>^c=I[o3$L<(:F$4pKc?5&&l%$/fZ%V(8>NG]9j,E*-HM
%[r()bBPZ_jI;NoE3IkK*gWM5[<naspm@.J3mL>Aj\F#c8DUis7hgAG]h(7O.0ebDt2gP0'2i`EInK4-1I1.N>@Ca9_hR-T0Bq3iS
%L"6034=\%W;r')[/gi#V]qU7)UMDOJ\,Y/%Jm[WJoY'q0&"^IJ<EmN64ju:4E+&dK`m(t8bP-Y=NE_02LWQI?KHRPfU07(/Y?_8#
%CjfLc>'<t43Vh9BMq<i&Huc30&"!#`c^p]\j9b^pZm,;lD5=kjerBOo&I@L\LSm5Ak+eDSp">OE>Ogj80D3l3e+GAgSPh?p?4r2r
%C&d]N;eC0_#(n=r88g0;NS51O3a@*>s14/R5-_G"$JXCEO8S]L.=D'`M/clSl::5^U\:\T]e7!'H$_o'a/B/X>/gs#Vh<5Ha>kcR
%h,rFb/ToZO2sU.hgkB`aP4=F3ebF*]e,`^T4tjV'?N"X9jD&'q13pW`Vo3d[.]^a2^UErBhbQl!V;<Z@o>79+jmY0T?g9hho<j%^
%hAfYqo'c\O'jb]MY,D&9-adX7nY7Iq(^1W#oflgqah]ImrV<Vonj\ZlG409`+7"Jbg4&YWB_DABP8C(I9@*%Xp25Rb';Yk+X#FE&
%D@b)XQF(\LeU2bX?7C:bJ7"5Hp$1[\mrUL@H`Oj!mDg>3.u.W?+jAZIl0;O[)psH+%QGBc$Wu_MLPAd$Tq?1'%`@7;Fm8M>Sar-+
%ESFl%ZO+EZ]Gf;fhI6;ik756B:NjpR<o<g8*2_fjo-iICqYm6I@8tAJNTMrOCTWfpE]0S>93]:EmHX\qa.4XFYIkTs5V'sSc,0j8
%_pG,@!Sqh[B"_*&n"9dW!kc3E^Xi2X@DO:)F*1GF\A%PNWm9^cKk@I/DVm*-&"ao(na/s>g1s`]5(EM@'^OdJ@-nJ?Be`d,$")q@
%2;c+"LLI@q_<ZLC\bbrLn'sU=m!TT4md4o>i5P)M7j7p:]<M34D7W"aEEZe"N_:>)k"5IpgjKN?l+R3H['j9"nZ)aBA;/$1oMu+m
%EN!.r`,YaSj:C]Y9<YqQX0oY>h$9jiJL83"]E,I[H!+ps?&ciMbo,;`cecFJdh"TprEJ_;faRRErV90`6`'YOg:fAJS+-Ai@lf3s
%YCg"-I'gX@ZKfce@Oo#VWLY6=B*ipBqfSe9I8XcDGSE_EHWILtaqh0$l1T>:ZPY5oT0,E[BW9dd-MKb';;-EnrWP8Sjla&]N(_4L
%0"h-]pa:A,oR1Fhmf[iSj[PL/+=UOD[F,fKKD4`knjYSSl;+_GJGe7iBm]`s>Dp^94lsB/?SFIQ1W#Ll=D%6LH@:!^IG["\B&ptg
%Li.`CG<WpNO&(;h^QqZ@+PU*jBF)&I_4RBVG)kj[H8":3hI:31=25lK[,/X3Sm4M/dF`bmrRJdk4M]NBd15!K.8@9K*aQuAFOtD0
%PN()pj,LPI4(RQdG0n9+iM%1j*1ni%R*(=jr41<=gphG"iS]-#1b&3*`S1n=?Jb[^r,QlO`DZU0npM1_M^J,Qc4U4\Nce1On95,F
%;RA>!iYMIl-gj]u/NJhA_=(mbs5Aft\2@+,fHWek7,Sg\6@ClL!4#00726T$7A<U$J7>#?@=J*l3URq+Oa1:Glkuj:eh*WA]3C"[
%GdnjQ?@V.ms8)RF0(+@)?ga&[q5\Ge[;+A7N8(C:\3GE46gh>RI/Ep3?@;<t7c/uAIfA0Dhj`K0S;a!<m+Tdt48nbphYG"VJ+.10
%C%$PQ$^6)<Mg[P_e*Fbqj,8cU&C())(IOp+s."T']=?bnd@3@Mm0DIQq#,D$gL#mVgpc/>kf#K0qdt9Td5N-HlaOWm&$gK@h+p94
%jK83TO$?+J^b7nHbqEi-QcfoE1VTP4nbU-Fp'ptifAClFB7KXZZO*Lo$fCb2o\U@T]U=6Ar5mQ8mqP+An+NCGiho$,>P;\O]I#,m
%E&ecsoVHj:5PaGkruXIMr=?<:f[nu.pXf*:J*RouS%j@Kqt/.2Z?'tZg7f&<AEmuE1/VMu)>X'fO6F(N>Q=M;r:umBJ+A6<s63$\
%^3I@iR?ZLQ*e/9Wnu'OcIJUX<qU^rj_V:]qrTi@Sp\'DK0(Ri4H6TEI0?JEL8,RH-afinbs7+"q^%;$<Rg>A[nYb1irmpCrhtcW`
%+2P/Uc<GeprYr&A<RO)BZFPJ.`8?#nq:qTkUYBMOI.-H`s69(B+$]Vl+5U-!qYoBeo7Lt0o);b*&)R6;oBUneJ,]%`TPPrIP:QU_
%\)+X/rRu2Hl5k9F]3&UWhK\G,^HLuQr9h<`rpYDco!>h)pr@m`iOcl$mH=MS?73di?OS=pOO@`hJ%tOM4+@c!pKo!AmT]_^c%B?X
%r(k*+eN;Z;n&ZOEK:dPh4`6^4rm?/kpXhj:nKQaq9ZKM,s1-=fq"*t2j9C"p+0XdumecJimsO`Y^]3Zjn"0RA^Q[rn8W`hArnH?)
%-[_u/q;]Y&85"4%`M:cZrQYB<lgN>O$]MFdn+F^c%.C[pg:r+:S_q0TMgnpEE.$%0Da3]*o(??1[bLSAs+#jl\'h_sGd"S@j7E3:
%S'V-4jnFjLo&Id*H2=SVTB%;Be`/<tgYM:)r+LTZKe!*ORG7IcoZjr&rPs,2fN$qk-gn*4CH!Qrs5cI-,.0Uaoqu0q_qQ8]ptEc,
%`F&Ik;=)sp^'X'(p<<1/VYoBLs8MkQm`q0VMW=6s2u?&DqNEk1^\Pu5q[\o%$K$=(q`jlTDa&EHI.lFomdY4Eru;"#cThBEp[$A?
%G598#r?+:PUHe8-<PA@V2rD;t:9+A"-h=#RrS9Ee067'DVn^RH^](9@qmZUnos_[0LX//5ndk-^^\ji+hB.2n-^qWKrR%5ZDu]>'
%B64L0hd*t^\fq+?)fN]&IIQ4-TMba:L&^>.pT-Q>>0FN"Iu[4C0CKsg+bQ""aQ/e^4FTe9s,[9Z>[DV*T:A,TW]hgg9R23TbC71W
%B$Y<!%]P)Q5P]+pq>@Yk]A%%l84`*nnCo$Js6TPOJ,&%!ZVMW,s50G?YHRi(0FsfFFmJ[<ARFH=nH5S[*<jl`IJ"8Q!l7e5jS>]L
%8$U[j**[cA+#E6_Sc/n5IdttgIf@<YY']0s<7/4ip$:/m^[-/OO@t"1ng]fBQf%[i=QO$gZo;!H*B%c*GV_'u(?R6hpJ>Djk(h:_
%nlNd!24I"pQ[H%j`^ii'T2.[uH(+[]I8&C)9u))tpKd:\G>C_dmHm;Pqq?8/Gk.I[fsZCb[e\U@eF!2t4+;\5^O;YkY*=+SpfcRe
%547>#[FQbbc&]S`ro''EY##&gP:p6K;u0S@VsVO.V-7d*N5&(Ln%Z5_dXJ=t_Y67kkgL?GA,/"Us6YgoJ(lW)CJOVRR8>$PHagjT
%Fcp+H#KY*&q3KU(,kLS*GM)mR$L3tp]Y!o%mBZMEo6F^@9iZN6/:dYU[nmn3emGJZq!3?@?G?;ZGh%<CQ.eNNq9Qg%dOgP6?<.VR
%^]46cSj*#`.R[T@cb$A?$>?%aX\ISDYP"O&p^iqcq.F(5%,9fX0BdO-pUU#YhuD]XkF[er%%gjL2dhuehp:B0Q_mD/hd(1!Po?L\
%2o#CjAYjL(9D/7_)p[&[ck!kgK[h+3cP>In4'A<`M&h?FT7?P3mZ1^=IrY4Lj]$WY:[aL^Ld?"S3NRq4G;&sf.7V=+N;k,PkjSDQ
%+.Kn:^;CJN:=@t=chmb>'<T+fGJbhWFSD!^0/+%/ko[\*qn0]9:>S$]heRG.pNM(6pC(EY?hTgJ9TFVrT3m'D6GN'Y^HR#DQPXlG
%p%]D"5'eh'n<YM0obYo/q6di\55F]YIb#V1+(Fnjpu7@,oM9o*%,^`S]_eb-?f;ecq>A^>IsU\5-[224nbhgu-i`kuMn;2;q,:Xn
%:[[(,.-0X]5LWF,PJ$AEs2;fskeB=1+8ZX6p!`)/:&]$RD"tAe]0,gho>3Z%hpeBJqcA7=`RE/JVV6D69'")qT=k2Z(XG;Cm)d^P
%?WLJiIDo8`V;QI+NF'2!]<Hb[abRWUqT8d:g;dU0?XEF;EmC;;Ai,#)m,#Ih?hWftd[W2LI3k"G:&)oHedZ++1YqPGD_I+JRk2de
%GqIpf(;KjFppK!*C]!61?gg%Ep<s!>npUSNiPuRRXRA9ZqkY4#cZ2k8?cT[HF9>]dor#;^q-4hY4l*#`hgN,O7i\#A\Fmlaci35e
%b4775i?'ce!rh\=Rmp)u[$AIpo2(Uum[UJ)1--re]mbdJ+`C`Es7+FLF*ISAY4R]Nki`QR_0_6TCHYuT%)MYlrp'KLn*E:1\!Sg(
%:V$Mn4QHG@c`sdL[7;[$]@d.m@D)NENa[)nAeZP5!Q_D!Kpk"Mk:VJ\./>Gh8D5-Xru^Y]GiKCK)HcoCWgo>Rn+`HqQb0o@7fhYF
%Lm7%X7*MO>kYGEurb6Ai#c<.HqF=b2_8,8mHskb+IfOTh_mccAmg]6_1#M[(o;I@l$)H@+P4+RhOlZ"G(#O?BY6t,,mZR#]7b$s$
%qeq^qbJ";BS.ij6>NMToD#pj2BWZas5sM#2&GKSI_j5\/^P+<9Lh4hurg,(EL1*dSO\:,0ooBWkoX4/"-0<WXW;h62i_aS`n2c2-
%jqVs%nED(ul2.4:=S]m>kW0jZKm+hEHf>d9M#)UF["J?TblR8BI7=%=V6+i"Da<lgP55jb[E]WM`Xb.=PQceoooDX-oUjmSk^n[C
%j@A)"YM>7/Z:FD!i)[?W-"Bk]qO*7iANf1)anBO&kJ"\jOfm@1>X=Y-[e5j5lD)(RZ+i.\$EZraFa;NeJ/e`:\Ksr^[@Df^2Y`G@
%b4t+b\D:FAD=!PLQ1ok.A&%oWJ,?uE&2iDn2'Fd%oA-mjF8*Fu3U**Tru[Jdm:#pE[WOG]'TDd1fsO>qjg(qNg]^62mRW[EflYJ7
%i2g=,Fa[P)hA&`KHd$=6Pi;i0HYM(b1MHUgNs;hC<P@mU(b%MHQX!GogS@M`/rrV]EC*R\8Q_ln]aSj\0A64m!E1M(HJu`Ord)s;
%5rMumeaMd7#)@NH::=d+EE4DR&GKS5K#*5lg)n(ZLae_jAYfbgP[2&bY#5'b1$P$)Ce&Hq0+`E`RTKI9AWL\Zdj^^gqkP_O(L5VC
%b7(Csg%oFL?l*&6$:E=dL@qU;>rU8+=!R[6pBR2;bJ7`_P'q`-GIQIp8IjiZ%U5Ea7C#F&<\N)?H4<0To_$Ec4pq(0m^[eGQMqSH
%--CJV"WZg($`l#@,Mt^"lD6^ls/acdHnF=F/@N_R=c/k2&[X$EZJfH".L'#*F)ZHa4kSYp@/^[Z97Pki>HF+a<`]B&/q%<Cf'\D2
%8j7A4C"C7F7OAKGF%?23%i/!6caBpsTke`=Fe#X=X+9#*1+c?WXH6hMYRhe/4:4nIG+a><&]b'IS.?H#.YgN"R:QE2Nk3,lEaU%3
%b,$[&8_o17A<Ufi$sj+=?)Pgp'fWpNl0\XJ+2faNGV!d=dP$*OF['(Zop&6WUN[G&#:&3o_Wp,]N?0uHmB7u;C;\P5r6Q+5Y7LRo
%jSl81a"B($l_tuL)"?2VXOho\`ieYk`i\5,qbNB%r<2\"&iV)mg:sWe[!peXj;N3$mCQaM/r[NV4490YNZsPuL_&eU<V>25le8X/
%.*S%+cZR3IjK8l15%?h8?!Hr\=8Fjg-PAFjppAOP0EbJp1pFSK6U*^oEU2^kgU's7/D7LTX!jj&YETfG&4kGOdEf[bD]DYjT,t<&
%QPJ"GlW^mf+.NMt4F]lm?*L:CNaKL^m=WTA^%!4W7`,8cj1m!n(@17sDi)8N<&'Il36^^PEm0A=[$r2j@ROrEF6j$9"Ul+R$cUPo
%JpfkV9dmf+Mg,?9s3q/[E-_<YcAR`SKMq(o:>Z:o8,0bf&>+\%!fNHh*)EgKpos7HJiY-(,G^t+RrS[,9sl*e71Na-BZo\s#7g(8
%i?H+W'>)2(h_J=&mMk8FD&f3+qd5!EG!W5q\iQdoV>Gaa,H'k9rhn<X%\NV$iqm6M^D_89(9d&\]9)ni?DHQ2+1imd74ubZV-?ZT
%0,U=X@cVLd4)587-bK0TM^A,2gG_IV$*Dri3E<=$L6[5kq.Y7=Ks"_YRUSs1T\4t>^bf?Xd]"(=gWba21!Bujk<+=jZjcd(:"!V.
%SX9?F+XZ^oYl4FG/G!`[;TiLX.*0*RIk[tX!<Rh#WZU@0C_$FH&?jsa$.KJQ:\?@%Y2lV'EQR3#oaUEs!]]S"bH9%Zb4Pcm)=/Ma
%?G-!"m/?na'.>e"IOY#9NImCf=uL5MMHE/#%8,&EX)3'uZL#8Bc\b$AKh\VQImMZfI@GF$gW_\GBIPtaENd2FCPk)/mSBM4CCR&g
%#Dd/bQT^E>TjK"(IM._oR;oH_HK@(5HAO8,@Yooe;8*]FTb&c+_uac-XJQUHP-ti2J0>^@_@#QKP;Z?)p>4Hg@N3B4]ur!i0%S/>
%,Eu`3\/kMS<<OB*7+Wgn`t-GrI4A>/cASRVMU3MZd*)euFTbq@ZmTV'hhcG@PZ`g"X?omJp&khiTO9]/A(Q)3(IUJh\Bj8cc>idW
%EG&(7Gs7>#?r7]cLUJkTBl,I]f'ClDfMkM;d+IE"5EhQm`>uh1\,J(5KMhui<:tfIjD?EGpU/%pH\-AZ@,@Up_bHeS;ji?Hl'G.H
%C9SC\c<tWaU6d0,"9&bMQTF(2l9/'#WI9<hj8AB]Wd+5A</X!/cJA]g4^Bf=!a)JJ*Ji!tjQV"?GS$FQFSe3A^l/"(k&lV&WkK^X
%nlJXf5"2uq\$,4WXJ3>^P36:,N'I$\l'r$ks%JIg'X7HATeOL8Dk+O%2c7m2G8QBg9De\%J9Jc<-9@q^Z3f@Sfeu\DV6AT(7R^?4
%.S+HOs4j?M9)mfJbIU,@$='A*Z(sS[QE/j4efUO(5$UBZd4HZJ@$('Q>mKbtEF,9\X[RRjp(%,W*O<80#GUO.#7R\"bJhj,JC"hr
%NqCR]Iq`N`"urr5h7s^g<W)?8$5.Qp\a'tl&4fB<\EaM^_?7e@X%>-C%:>OW6JlpdVL*TbmUTVIr?3qVmQf\?#;P2_i(W%EYO)Z]
%Wek&)iL4^g;-9u]3;#.)i*c$'\F#=3cEk`H\-G*L#GNbqS\kQ7oR!f9oNcZ^qsVSO2,\=WgC]t?43/DHM8A&fDZ0+g#ZFfY\SPj3
%<S[_:kWfo<,]em*^12tm44*qj.t&4eBD"G^r7qe,"CCF%AkR$!#4TZbnCs'o[RY9`n@2#"1b:llWZW[nSog5_jWU2t-=R)`Al//"
%pH&.PF?LhkL&_7E\qW;*C?d4Yb:S"r@dk3_MFQ,GKpP=3mf_YHb58tU9B%7F4*Hrhdg[RoUT3OXYI^Gh@*9<U;`0.)7cW;"S\pp_
%1Xoj*-Q;9tm2R1K"/u!3)k*L:&d;PQgF7Eu1'QWSZ7rN0#%H*+!Y-+Z'GNb@ZnZ7,g>jOP05jJC\KZh_DQ!#:ctL'#k-'DAdnn\2
%na6Jq)D?.6HD0."O-a8cG8$pj!f%q"q#_4jJ58JRY,gYd?ll?M4+W%);mkW#R?GV.$%P")K*+E^%\+pUi3:1ka.#@N]]nR#o-WB^
%-]s0g-Di1r#!':"\uIhA>P2\AGme:R*qiV-0Xm8:GkeLJjmFI,(\,5&KFTj\DZPj<"6GFU%i$,cGe=r+QPL)Dg<L6T\n/J^d&=V.
%l40!"F5piWmp6$WY)=+*@"<mPKAImH&WFj7RG:bqSG0n^ecpCZ162s!ZY<rVm*6PF'<#<-nt9u2E(6?++K<c:lJ'adSULXb2[E,P
%/+3[Z7uEM'.;T7.Rj;V4P?MlRA2RS"`drs1%S#(_AS5%?\\'+M8I&bJ4-rIt,b+#u>)*@nbKT&WE9?_q:>C$E>Dm\I3-0AZJancV
%+E,,^JBMGE[,:VNOW1jDIbFBOl^PP&YsL&r0j`6,j@^Ith?k0fLZgrT;pYq>jX!DaD(p6kH&/c-isK)._;ugg^rVnHb2n2MhR^\]
%QWCUYn;'Ufkdt]pneP'4][EJ2YtqrYBY1^Kkq?=j(ZFrC;^A!H6;;$1GmgQU*hA+?80Jktf[X'Hl;.)J0^k;:)l"BrMh:4SFO)W-
%+:o0GqIr7nOBg?'8fGi5J]"gHG9+;$fgl7CrhQ4a@hqQ2]G3'.p;_g4H1ZVtVf1GU4<=Y,I9&B^W[@)`PgXj1mDtslAoQ+B6.KnP
%PDS\WabUjVklPKoTPsH$X89]Oiqj1K`:*$l&9>jC\L!Cj:3?]CEp7H#X=MBh)\FSCI5adnY=krFU-Y+ZBRCjFq#l*c<W^C76uKJ'
%j7LFRiY^3p-Zm<pIj49<b[j;ulp-dr>/@7j><0>40(8n0Km:-Sf`S:q5DnRbZA?3e1Q]asc@OR\`SI^W7SEU^f;bcs.T\J[<`"d6
%!j7,_,_q_>*0j_SLKTk!XJ/[U`^RXBC7];gY^-^",UgH&q4JX0eR(NGj(;,qHb[%qJtS+>op+n<jZ"p?jjpFp#e?9XA00_,jC%%T
%JMesN.PH*b6l=na!Y]/gWm4XAYOLc63-DI[M?BrL'@V0[Pg\hU=S(=)8AT85"CFCIZ9kq/i.d)gPrgi@2me0+nJ/[">"C`oa7X=E
%1HPBWZ6R9YS\[V`,o(,bCVnKYV%rZV?l\q<Y6`AXjYRa@bK`c`6^1&D6&Y+%$i'3tVCemj/B#^`aW>+Zq4mG`_.^Oo2fX/T=^-RA
%UY$52$)K=\BPO0XM<C?^?2V@'WEYmsHsW@[8n/-$&ALhXJBIHU+0/egobTLM"t"@L-DJH$9$R(irJ6^jTWY5k1VdY,'(cp1^fKL.
%5*oK3p-:I,]CYuNX*8!Mq8dYY\Y+VUK=r!VgqP*'1m&&"BYG?(1`pN_d!RH,oAAZ6G[E<9\11>GSs2$@KB*[i]nJF#j&no#Y@JJ@
%50q^6SQI%taPM'9&TUtE/PNMnI]_Ka/aNTMOq.Rn:L:?*mG;-2Z#2nlp##)G5L[RAc(J5#;*efh>]7^B*pg]58[]o8:'\nmc1Ou-
%07n4j+SWH/:=<Q@(9nmrlO3uBiRsCdZ>>Hhb[%FF`PV9^[OFjf"p`E)?+9m'Y;3"QBtaS9YJk*VH:j@4;Pu@b#okd/'Kt)S)Pd+i
%!#h"'&-VMnkoR\,%/*[N8.uneHD/20_me*Qo#f1:rAd5tiZjTAn,.Y3)opS1(Wcp/1Inu]DTMB0AH6MsI#4#"0p2VDa`kGkb58tU
%CqIS[c!C'Q\[T*?HWXH@2I\P$h^K5A=$fM^\acu%S_opQ_=(CKMZN]=pq8031[X7pL/sM]=iigL\J#).+D.YJ4(<$N!m]kuHl?]J
%jQO_]W>k2<d!.+-84kBN\$pn-m1go5@u7ju\`:9WK<<@hDR8>,g6k*?\_;IsX_NHZ(S01hZr:EENc4/$%l,!?h@'m'Y;r0d?3udf
%LO2"sM1FOg%PQg,+ASL[p#$)oYm8"T)ZeIgP+W%)&A4SZYD7TATe?+#e%^me_mbB%@9q<,a<^i&;"CJtH.ZOO,3J?;2K-HkbY(hi
%iQ9l;b:@ll@A.KZ#S?"$3<lF>Y.HH##>+#C>7.Y^FTdS4S0T?a%nC"3NQS:]/I5/hfqf*KFJ[D=&UsXTp6Su&io-7e50oCU(R_KE
%VOTbNP`1leoK+2G.Bdgpe_Xq6*c*2cRZ`k9`1T^ppJ\aM9:mL_fWd-B=r+G$AHXTI:IQAP&50<45c+"<Z6eD$3e^<Tm>i7Y:?)q+
%>?bdR!R<MC(+IhV51is)-?;_uldo-DdhJ*Y]GTSj6NpRI?49SL=%D*f.1M8#S3\ChE:fhg(nhTI05J;$2[41NWY*F1d]VM9n.7HB
%^-gr*g(3"/Jiejj2\PQj!),,e,o^cQb2?9\?c%I,E,Lu$LJVN?@"t(o#P/!5:JPWM`g]8*n1)ie]4!)O<K`>C`.+Mr[I4DG0s)D6
%5]mF$3&X#.l5)f=)\5.tC@#\Gj3=7mC^Iq9=N-qtCclD(#Xpucr4!Io\+[k[&9tG:\]7>^q0:,[0Pp6&gu?5e!ED(?RD0^!bhj$!
%2VZ++n\!fb1B%bDkM:B1e<#B<FKEX@%=86M3:7uMTllj4lW>B[<`#tS7VrPQoGnP,_G8u#fihYE])g4L*P`8!1A[#>Br))5[<(H@
%DF\a%euZY\=-IDPjG"jJ%P=?YGFF8j^D5_i'j1Za\L#cNGuq9U1aF<8'I.(R_c-_^[tjtA@18l*dLGcga]h';+IXpA/#5p[hNE-G
%>oIi$U`ui^'iamEb>m>?LX7Ei]+&c(Qk;nHnkO89@WhR54^gh9j^sRq`H+e&>qEs/D([culTnW7HAiI#gCbEjpfCh&!=ENGKb"BD
%N][%s>[W9pdV]8%dZ.^T"0@u@@*<]=b,\MZ*f'+8:uNo?=i<umZMRYT`M,mWVJ!`(Z=C0N1$=e,e$L*+n=kf<Q!oP%fO4$XB(H-a
%5gf\m@VH#a&j-hT5:#XZIKK]pof;`"N"WT?Lhco(Zp9_.iOunUDrH5j_RnS7k^fephrk296j90(/XoZM%S8r4:_>4K_#`iSBOt2J
%II*D0^cbMl<\Ugs+Nrcp<lk2d'A#K])%KKr3[Pj:dhoe+%9?ThLNF8uPc_iqq"pi@ft&%X[]Tf:SZEos-HU`g.r$SV\Zol[`mqVs
%7G'\'kO6">,)U@#g3)RGm&h@[8YO+fB5hg4?08lZX&Qd=1bR])75D3Hj#A5+m*>Ec%B^0W$$`*p[f+,eE=aeq8e*R#YM7PJ)(2Aj
%&f.X>dN2p>>jEE(T.E:f1H:S@hJ%_Z(=X[:32Hs"5:#7eDP8_VRGKXP!W&%Yf\e$2Ha&d:lc5^b6F!Qr>6bM?]+b]'Vh9$U?3Gio
%EC(G_*Pn/HK@F\.krS/>VV@+$I)#'flt::aFkq<5E+`&C06Eb#*Q]3Le,ifL>+mK)qZ@dJ*?&ScY"(U4UQqqHg\oN+ZL<jk4b>Ik
%LF(*Ac5\9YIGa\a?F/2K$ZF10WPR01TZV(<I^;OhaO;):d=-R=36mdtL84)f[fh#Mlq#fIYtXD,h""upY.%_^+8>hp*R:-efh[QR
%8m^CfO@2j_mlH!3p>A2t%`[Cdo")Zjc(J5*/W'm+rELtF*Pq(ig.ic<RFI:nVF\!r8Q@-+N0d\_6/$1Ma8-u!C"N$fB.1e5o(l!A
%Y5p/l3J'`SFe;E0.CVG`Dcs[K^_:R?c,Q!1RC;^c&>]oR_mEG3E(T.77@0[E'1t84hJNN&Dhf!_kD*\Gg<SZV@HT#Aq05o8S+_[6
%Jdp-\nVt*/Z<,TQ'ZFT""gl"5p'I#\QAi;'7c2%`n_)+14K</nmEi6ufF&JAVS:1V:3mfMh2E5"LZ"SU%eR!G=]8NDpK\sVXBS#A
%]^CsaWobh9%L+=48&%Ls1&B0elmJ(O(RRL`mu#0bYL8(m1@[JU=n`s.h0BB5DXE@;@diC=;VdBr]I&Du<Qn(nAX]#\@i/GkOf!6D
%#oj'hm7Wo1;c.BHj"+DNbS\!s(I^fMUD&K?h68)Ddnbl80scBlK,=1/[^M[t@[*7dL'.og4``;q!G;Ut$Pi8<5<H"(IGf[sK8\Z5
%K+8e1\TV!;%C16*Ljabk1s/AAU!3n"N@'(/cJW+#MH$e+F#FdeYXI-!S])8Ul.j/8%<,tM`3a#"6WlOa/4tAl&pAir]tDm``LFZZ
%ik_o'McYede9\)K9o/6E@@%p]WF?/?-ZH;7#^(a<6O+<6n^ObbdES/7aDnO'\?gF*#DL.?H2]WSG"%NIds*Z.BKSntC<mC:GSTBg
%Atf/u45k3iG<?.f(Jo7oc&5O:,OpkQ0gN:h@>rk\(W%fd*>pEb$k='!bBo".&?AunJ=n5$=?NJ/@T3%"'$9.09k$u$rB]Zo94\:s
%b5E;G,Oo1"%oDIM.ON3i4=QoYiW.I\=>6N>1d]ed*o/`KW\/Ugb2>"b44(Pk&o_G2BriS`%O=[U7!YLAZqCVB.Ed(kH0Tq(ik+!/
%l%-_3+2pjYU0?6EKKKQ'(f#nO(C!'*5.eqcEa,"bZ%-F[<"6br;]:Ai,f1Po?!KYM;2,G+RQtp;%AKSYL*a7cpMm9L%TZP5g\C:p
%IqP/=G6k88F41dh^&n>JXJNYjEaGgPU$npj4NTH8gOg5]$rC_S`GT6^U6a-:*DufR"nfH=G_TTW!sI(B(G3XhF3!EkT"3M__#u'm
%)#/13AkBZcOIV=,=YRO&-:GC+o+JL&^)OjUh[ODKG><MeQ7re(U3Q@?-Me3!4mZD[E;M&/U!l%lWW!fl-$(ZrXRXp:U6F5e/Af$S
%P3@J4P<UD%7$PMt$rt(e277F6b=^:8[B'e.(Bot-S/AmV1i81G-Xb@F*s1h]BI:`RTVWcBA6?%.)%7q/+NR3^DiQreI4kD_&0NQ/
%_D!8<2cYEW\V1F8.Dh%iimC:KDMu(=b#=ls'b@'Q!p6Fqp;)hZ4DD8.ceno1JUL`H_6Kd^ER/c3B&d#<U"B$e^Y(HnD,l6!Q`%7Y
%3.Z\jm*F=fg.*bu2(lOELS,/l4Q1LB+=6CI\I3(mi!)+O4B&8/5CrdJq+>5C7Y.^0p(cFJEq^QZ:QV&$de$d4g&7VZh>dd$fWZ]Y
%#[<Q'(aCS:2+esa#lqIG"rTC/K*s5\/.Qe:_JNuJ!W*@La?NC^&>`NVrSc*Nb-;8(Ed@VFJT=L!Z3]h'c9*3Ph@RlYl<MY0_;^.\
%!pQW2D/PD[ba;QLUro>OIFQPgfM#M6;_3<'hs1b!I.fW,3+7FA`38a$89,F"p)i%]ELW(ZUdoBcJGndS8.C:X8HO(g3cpfZgD\a_
%:,lSg9V'!c!qqW<TP[Lk5$I84<!_SnKt4PJ0"7XeOFTWqi$bSOrN!KNq`V6?VjA4U#JPKcYV0kSJht!>"<\'t*W>^l&pBO<Ve]aH
%+-D_19sB/#!8JdMK6\r!!6h0@MIgC_!#4gnO_uNu.KjIS[YJ+nJJb`"J:dmH8O03(2C0Yp/1JjJ;Y]ltF'2$-S/%h#>G[H9f4j!o
%kH'Sc+#m2L@I#g/[TZC+k#0m"`Dt1CA`aG'XD:5E-?4KuKH;P$c*A'[TJD%>Z)C>5_+_p*%K31\Es`hjCO.rhGeasG#eMaW>4)8h
%O`r^RIrrk!I[WX]%bArNh\p4"r?+\kXsEHV5T9#a\p:jqY6M+kU,6A&\Oc`MY^IYf>R?RKUC?(4.0E\_MXWK,;?j@E4(6NXSi7"<
%HJBnU%LTGO*L(;Dh<i/tirF.!A=K(\9VAq/+FY?Rr^Sgu%_$4FI)tn3\D5dV&&SICgli7j.)s4\lDmmd)E1;Ob,8*r/&j*=HR/\o
%d(B_H-I\!THP8Q2q#D9L]NR3[P&QND;mI<#Gt!U4f(3S*1(`Pi<_u@Qjr+nThE'sWqPTk_aOh`sL56X^:k6,=GYG;"QL5f1Xi/J'
%'R[YF>M^lM&ISk5C<B$mXq1J,!F?7oDIN89,Yt-Ki!LA+Lk'DNoDT?DRd*K.05\*H"fR>UI$bQBAoLRs=F<*PbXeM@#KsY^$(<]3
%W`u\ngMU,a6)=QSK8\9>##/:H;?DX;V6G0F\clC.j5.oR"=aSrK_PIMOd=t6'K<&`lB@jK$Ba@L1!h[0gu`dA5!irVZD\fLZH.j3
%3gJ^MTRL'20\f/T!-M%0EPW#Qp'GkckIkiF[6Yje";HUk)nk[-Hu'W]5eY<mDKAP'j,P)"+9?+oOFWh#:sI]-M`SqI;l^0D@*<Yn
%6#6e*`!pDo"i5jbkn[])XHATn"Kuk!0`d4Up7J/OopZ'ip%P*_"n>M@h[CD6#V(b*%r3X:FouY.AHFfg-a7o?Cr9RNEF2JD3f:i[
%U5[P.>1>b3E-Q;Sq7Ii.$no'mHXHpJO):&+'>fN4A#3BoYV;*!1/Jh<BB#L<7`ji@k[OeHY+V1P0J`UA>;3:7M3-s>EarElc)WN-
%]Lk(h65H,BW4_eZ_Y/J'P9qV$"4`@+`ZDV`$lU/=($H-"f=_snjZ"p?jjpFp$n97\Jmrl@Hq,K#aucPe\;GfKPPdS2CPIeD^)>Gd
%RtNW6YjEP`EFCo63_NVlIRf9^($V(%G20_]A4>6^.Fn&^Of]N,["<W$<4,"aX*$)6*U^fn6PC`*..%?ODD8)h6CUmMMI6<<']KmE
%&Z?!OTlLW3?'\E)D?jWmd/k4FLdKni]ig\C6=q*AD@-$X%E]dI/p.lfp'"MO\\/R+U%a)f(,1l3W].nZ_6JU'qCKT3=DH2dgaK3l
%+\cFH,,/)'$7_a)""m^&8mFmP=H!m7i[alcQdi_Ue.lP1'`l#"6JO0\X)VI<bH43[!670F/)!Q,EH`VF'.fN-JSLBR`=bS-"M<+2
%(JAHI=Hm."cLD$D%7Dk*TH.tHSM!G8$HZ0M'#!qMTm<@nHNc"-V.aebdDpZR2h?lW@]3s-`#dDWTS#;&aImqhP-GX9T>52h-QU[!
%,n'G84bHf>l)XQr.&2/,@ajm`G.AuPCgnSpkK05ZHO=RE<*Nl@fc;AY+#pFE$4VTl1u7)#k=Nf+R7$2Tk,UJQFDqhS`ab3k'dSNd
%n;cFL!Z=bfi+\N%`^P)Pj;/88KREp'SF6S!HNC%S43frN>m"d;PgiKLAHRN,B,.P]WoS/i0M8hS%+HM2HY**-NEm`r7ATtW8(es"
%lO5i=/BCk;kjoKro-S0r]WjgL'#lMCo)tLR#HF/n>$,<iBi&ITKP!,?%<[igjd%U(HbV^]"7YQMT?8tgriD)HC=TD]djskh?X^]4
%h8B0aR!&pk[6kTa'JYE4kVk@'&kSLi+Yn2]9e'`ZLPeA"p&Kf@%9\d:`q_8]ZKqOFNCok_2AF@:g<kQWNi(>]VbmUJ%B<(OjC)(Y
%@b+$#0$M7".i@h]fk$u?6q*mj1l#+N"!0/F/a10*F9:$GBOS(q=HW=2&[$JdUa=J@$TMo;DT^>SU.%`WpL&ng8SIW6MKI9#`I^5+
%^4B,*lr8sPRLf%)_9O+C,-iG<SNr"#R?""Dcljtc=;OZ9BYP^VaN[^Y"!!1eqY9dUP?"llZ#c1*^S4+='m*[Q@U5SATj#gP#J\Z5
%Vof'8HhrdT^+/%NP!*4)$0tg4eZ+K1]pTHZ6$mr=`)SkeZQl2-irYZ]iC!^b,T'@/AjIft*0L1fs5bZ=b:REL2%+<Gd='h-9*m@`
%@aq$B??mXfatsJ0'K53UK3ImGgQQ^<).Mt8=C]a-e]p`E"%:2UFTX0*D6SQeHp2iCN0W^nEa,U<_('eP/pL;4$,\:"$6_Y;;o)p[
%_T<=Ahg5L2EDW\XZptqE[Gk?daj>AD*P[D$5:t7AE]hY*<PX@E<p@gXFOb*qm_OWUBV%=-Xt_X&fI'C6F4%7R';O2Y#R2ku:/3'%
%kIZ]6=>]3aiprZpI'\$+0k9Vm)hOsNV9t=%9ItBho>).RD*P-t*r$$33RDT+c2KhY+hEqL(cqBT9ZHKI;ES0Kjtc_='8THMb+WYl
%6g1pD<d)pS2dr:_j5,ZVZ\%=e;5]AC6$ukc%T)BAf2)U,%j<gJ/m]LOYDk]=_]79fU7c6bL0"T#NiLddNbpi#WA\[emfnKQK)00f
%'>e^8E3)E*2&`erQojYdbB[S[J.GR)+"p3rC,-fq0t1nJEbq;lROW(&"mp.t`,tGLRMlIcc]/%(o`g+C+BB5c88R#7J#f(H`bCVt
%p]0)Crti9Ma<Um;c95UIMeh,5%a+Us\YBHu6&FMS#GOgu"\f<UE1Us4HNX./e7S>ULsJKC]#bMbL=66?LMrRr'5hl/4*"1a/E#'o
%_`OnNn3@cb?#Bsk0i5k3*=J+(M+'ni-5_2#N&![N0i/*jZRZEUAAA`q:oaY#0O8sYed5g0+7r&0A!.4Ia!%^9VTfFB.b?Y_J<;ET
%\KT>Qhc7qnA:.U!RB>l^F9^":i?"/;N*JI\KA'4nf&h!_]jCLP`@A4aV0&8n<5GB\+m=91SFDcNPm&MM2DhNV!$]0aYE'?A2%XYD
%[rt:Pi>XTN#jcaWjn^)GR^MoqKth#=$$nTo/T5Jj-Wr[8#VXe877N@nH&d;c0pI\)nsK1+cV4s=9R4pAPiI#jY6L_rVfuU-niMc<
%mu++d,a.e?O1$#U:k.rRDVAJ<[4:u'KDRnqB.7W2!Z8W\@7j-DdS%U(?O,9r\"V.3=I`**$tPLT&\QCsGC'F<hr<\,30"aQU>ZH7
%.;/mHBt+?-UN@_E6MG@`)g5[A0ujH@PCirOYrrpfL7Q0U(Bng^.?Gt6;).\Z^S=gYiKmo/7`@X:%bubb"KsW&(#l1L.$f:EE=bF-
%F7V./Dpu-7B2D%:rXGA>dnCQt$mQc2XPQNhQWrG`=j&8HMV\Eon&\Wi3<r6n^>=1tIGh/+0E%QmXVRp5C<JV8O;9YK\>(g=5IBYT
%X^WbHL(uM@au$tokl\4O"n0o[^>O^f%6JY7"0]YqY8aH`_-Rjb.2N\Ef!lt&as5P'%F,l]H4`Q&*1i;;s6u+$A0iE@8$,[cH\AO'
%YujuX;/&4:>-N@XTa=P`%DIc'(SRq8_L:mYM\q\F7nOFR3f!Mr-T\a?%6:-O<f.=P_uh)9HoXN?Lu[NO3)DQ,M[MVDHPq%!Z]cdh
%LN=61PWXSGP"k>r"AQ[o=\Y&c0T2.-EE>3dq^80L9CVifimY[m5aaFs%lZlM^cBLJmK-=*\f-gh!g,EUYAqGK;'9GNbi*)>fo1$+
%9h31.#Pc"N=JpJt+G-SudrE9W!MBZD^a:\/I<(/#oZ7O+#A#P%34ja*74Lj8mYXr3MO]BM\[<Y'^o3&IKR)T,2#fchgVd,g6M"Vo
%fE,Cf7Z8AKF@:3MB?\SK4;eCVD%f2@Y?.UT\M;WpqhALW:;-\%8E;a4phq>CaDgEVd(KB\oc'?+r'<i&Z(=JL!2kQE(hWf"RFT(:
%]KnHC^"ul#Ha(K^V]ug_<eT<'c^_WcF3rdiW6tkpl;>Go5MnaM+qS(VPkGNSpWq+.ad[N.9$Us^W0b.I.cI8I[1(rBL<OZkS?hB*
%)%MtEQVTr:NVNIXQ;tq'Rbtl1lM&aYOK"_R2W4>iggKEEBE/_i2icL+:'r/*d.$l$)a]fB7,mes+jP`m)B/^-<qr3#iUY$pK/,h@
%.\Pf=fgpoifNH0.1li_"$W:ep/[HV%aDbRc];,!O2g3+A3;qkS3iOa#Vtb41,s2ITD=5#pj2/9;X[S`i&C5^:kmC`#oU)4Q?r,oA
%A^cno@#b&BgX$H?_,dC[S)c[C%UN\o-TEP@P\iC2pb^b^kc#b5;2)hp$Nc&*O:!+94gW5BKKUo#"\gl9TOQgPrh&NAh$:+3\<@>M
%%pO1OCB3S(gbpU_A^2u"K;.BdMji$9J;OoXpngbW:E[@n>luR`5Ya*4Q#-U_p+pt3LFn0q;;E)FhX,@bYEI_:C-Tf''rLA/c9tDM
%<e?A%+jo+8#O!tbGX[nc"rXfkpuUi^J4-\JfR$ugpitG&W:`o7n,0_Hpb_UQi5![=HA%^(i$o'O9?tZt>Joo^a%tVnP(!bTW<4-r
%eF_3HpB[0n5XHurg11B[dip^mr)!20S=l+7V<,+3^p4\-\+[k[j>'h)BpS<lUldeSF4DVM\2Doh$2IqA#r[mm,#feH.sNqUYC?s/
%6?[g=-#dslCoXRJ.MA'gXY!Rm,VrtF^6`:LZ,XjK_K_p=!E_)Zp'Jlg,\Dl!".*QZJfmW_OSDp&QXL(g]FbNJ2T]PFrDKMXP@("h
%K7/V%p9oSH&5J]LN:&bT;;;DZaUDRX6^BHb,Nae$Xr@b]o+3ik)_=*qF=f!%h*H9Un2c+O0gh94`Z1f[GEZn`1>961JMlJNqV3T7
%<#frW6U/dg4@IDu"_ee^hM0EH[S0&DDp/)DJTJmePb>0(EtYeV<i0m'q$i70O5P-bq\h3N7,j5u];I/4%6K0@@KK0Up8l[GS.cgf
%"10_/e:\%eXotkC4,NBG9:d>Df`YNchNEMm-Vji+4b'WD??mXflFdZTASC"4Z8]7faG,?7X[1!>P9%-F.Z/b=E-'BGJ0X8+]g99L
%ZGmlla62<uRmh.P5ie_I8%*tlCe(I-huaj?jUBEh8,9MdJdXIEU#I[)O>i^q;Mrj<8'q0oBTl$[8j9H6IGc#c9\aE*h1k*D:!>n3
%-#)!D)a8KcfiI/p77f\V>&uhBE!.6P6X>pC!X9]u9O_O*%u(p8I+UCuM`WPa`?!W%S5"H?kAsZZo^io1'E_VM:'BBLo4ZA'&[]%m
%RY@N_0Fp,@&#LX7[LeY,,BnZ6]WEdN3+M6(<)*P4QnXOdK*)arGM(:cbW>ua71P@9m"#RA4HRh@VcA^jk\*oa3?t=S@3ajShRHai
%-UGcs>u6q@ES:S_)a!(G_N$D2"`4O&>/U\.k2:DZ:9O;Q*R/l?i.fHa`rXIo8*N<$?*21?Tm`$p\2gaf][6.'On@/FT?Mp1YmurL
%(IPVb,$#(bJ]F#'%e>]nc'T3K3heY_/!0J7irYYr5`((d81nJl;mO\LjRL^/UGVU.irC?:aXG8?X'&t>BFWFZCNO@.Cl@k/mW*if
%F;4"n\/QNuJ;:Y0rXjol3\&Q9F/j;j_D,n)@OeVR;duna1<<.jck1Y<d(&4?(%W?MFS]oP]3tYsj_/=rr#&HgnhM>D;+8i$["a+P
%#kqX(W(<u^YUL:93%!D3$OG`&J]u3_75_M&N6-dPC!&6!6*m-A!&p$UUkrP2HX?$]/HItmQ\"bKMAg#PO*jE=RQuZ4;^3P8&Z's4
%b?t\)5hO-ch"\s'SAD7W0F%^69ZO/lAX"&RS1@!*dg8oXg,[@\1s5n?j^>aLH8d3=qZBuDKD69sVZ\*Z0aYimhA_?k;Xm$bBt0V#
%0mX(@\/=GW<&R<2[;V:0e"F0l4GfR>3jLD>E-N3p^b$hHW50X3qnUb"5W]S]n;=(sdDJ4F\aElsnti0Fj.V1:[9U[NE(BCYJIjk@
%1*rt5Q!.<@b=2OXb-X-sFO"V@TUh79UlPkg#t@r?H5a(U<>$.\*bFe@oTC(pNAG6##!*THCp'e\S^R3'K.HD@K4IbUPmU!Y2[t0Y
%[Y<IfjYA1IGa?@+4bDfq'K2.-17V!X)::sahrb#O3G3>;DTVBob[n.9945k30&n:,pJMu<^V92$nC=ElZ7D4Lem^&&C/ZOHQ-4(s
%l@@o<O<#uMa#(:<b*]CFb%T3EI.L:+:q0fZ9l/-cAFg=>;Nn%)T?P`?OqpN*=cg:;eI+?*1?8foOo\:o@tQ*EP-O5O*[EtH1!ZFp
%&o?KaMThO,E$+4r]*DPM)*p/!Vj*QA+]HGX21u`bi_mk[p6+9<,^Tp,cupG#_;S6:))fUf8<V,_V/[Y;[s/EY>=uGlG*cYBLJ&dB
%&"1+#LOomNKnC7'MsP?Fj-%GrR(3kL'cThZUbjcbdE?2\\l=it#fK4C]cUC9'/fn1BHS.bf$0gPg'[_ZYuC8.+Z<0ulRl&]N4#=B
%X9];c@eqq6&P_[O&e`*lR).`YTTMH$$H0Y(V?+OAV3iOg:V5P*CMQ%gEPX[Q7rP>c@Yk/4)]^D1N"#l?JH>CnOZjE\6,HDLUKCt/
%e[V:Dlb0Sd6:,pr:%iJf0)0?Y+?-.&J:kYeGI$&P+>A_&>ZC*J$prHNqL5(WB$/J:J7LfPI]0sl`+c9:TGb9fn>[V:B,h!B0kaLN
%X9GKG$E#mbO%<r2;j@O9+7+"I8WDt@1U0R35&dq`3'.lR`VV5M(ef*?pGteR-3@b1a(?54&[_(47<\m<1WVUg30j8`Qj,0E*A<8`
%01`*4Z09t<H3Nu3TNqRj0e6M0VXn?F/qrgp(_V3gF?CHT_bQk.(E>3m:_$j77"PT.<LKL#=i>XiY7l^L@LIU55&Mi,TEnE^8Y1/F
%L$5-c(sEj;`^X;df'JT`X?k:2]JMO3_MM99QWjN^.83h;ReiGh"P@Hk$a5l]qci!ZV_Hf-MM8Chd*IA4i"TgG"^i<h">.P12q?in
%UI@aQ*Rt3$&lX)gjF(#&`X7!,DIE/BV_GnMgGEmo%3Q%4.6T)B2@RukA-F?%K3uEO5-uSe*Piq8:^TH-IOpU5kfnGWY6*,tFY\Jm
%Qko#1h$;40LNH>ZRuL!2C2e-gcsfFY$c'$!F28?!T-tNmr%N4k@Im$t3*&j-%Q4hf)f)7^+r+J=$,VX0m3h`GiQfIWndF"+=@"/S
%^gVQ_@ImAY5pm6r<k;.jBQA'qq5oUnG6Vc'A=<FM(+U\ms$Y6CjGPb-8>^og6(S/6<4^9=bj&:r2*6'-TZ%720#d20[(Xd$gU(1@
%*-[<l_sHkS-D_BeOVr'R"!_T>Lu%,/a@N"4qj&^'&b+7-c__XQLK'j'_<'7nGSgpsWn*'c/W@S`>MMO)0P-b>SiFrFbT,aFB+@k[
%L2;3MLOM9X"BC$60X1r3_3LQe5rj2n'^,NOI<*e]*<;uT[jTNN9SV4/*#,:B@b&D+oH>tt0UNM3':?_T[M"rI7A31G13(3AVd0G3
%LE-`!V6!#K%n(-6("@ZNCu+3dm&[oFMu53:KR0FJX4hQ(?BrB<jqpB"H@Wk#_2i7&V,gt!0qoeEM8GcK?$h<9Cif]9-U?fbF&iW8
%AN':%4bH?gP-ko6L1AhU&_3cB]]u!t47O^`^[1-*_?Q^.gFdN`.Vp5@dBOVQosrj]Zj4+HK8#ULC"6\s'TATV@m(;<lQFimYM1U+
%M_boLNc(kj=MUtg/9g"Ddk"pr+m"e2Kppg#M,Y:.(Ta8iiQ)77MLO&ggW]Q(SG,&O#pc97(c%1M%)EL$7S&&DnkEh,VHN,;3It66
%dI>FCC$.-XbW7?3aHVo<mq_Wm@J1,NB&[&LB>m/,8_aP'AJF"Ddege\N2#(:M)IJCMmF0#p#UF5(A8*prBYTsn2c4#AgFe01(BW6
%L_[5a]-oUT*Ft_'cCgUi9W1;D<QBJ#jD!$%J-!N593B4RgdgLCL/COIJs8fj?7un-CGbok+tt0UdPm<T&)oa(f,;LNES4/\JUA?\
%QZcN4jPUDC2c$]X"]VHmj*jtn[AZAHk3mIP-[B<P+,+pL-.2%WUaWI@7pO4e.H2\M;OKJkr5/?H='\@*6Ub,n._UEI]C9?&5"LWO
%nX""0DtHW%X/lg:e[#uh/>,2'P[gr>IG7[&=;/p*@33HbC/gUZ(:9ffAiu2&'bt^epX8ps.OnKgWYH6WAcbB?%N\Z&'?GD`UEh$4
%C(>o\b5O2A[:0GZbYem30&D$7>ZSZ_MX;2E(9OZiAQ0;\6o,G%(;Yi^Pe-?"[0L^!d=n[&3.gpSjClu-7:?pKdd3HHTZ/,HXkU.[
%QO)f^M^Rj4YEk=k6$ujNEj"q=Ap\*JQ!i`n9%'[Z72.N*,&qF<Z-%q=jJR9kF+TWXp/41j"Yp2,?%rY"W1oB701d@@>$A1_pb:cb
%<D,K2/kBscofZ884diQ.3a`Z?#uh?^A`<pB*Fsj.5HJOH7>^jZmmb:I$L4O#N-9sH@F@5p/0p4^8S%;&'/$c&`rjs78_@DD%a[Ce
%UE"<)Edj31%`f"8OU#>fGQCM\N;)Ts;^kAp2!n";+\EDm*M^.T6dA5#B932F5Q*@&Ug7]g_-CAfs3BP&p9u:o(s"KbNe`f>$UeY7
%)04-"^OW<pUjin?a`h2KQJ\Kb"M<;`%=)BI5[noO2R$5>F,d'I9PULCU*R\b?4G]<iP"H3G<faP?>dl-;+or1<7.G*\sQB[\=m\/
%dgf.LF/.U?UUqUj*ORld4\fIUB2BD:UW!NDc*h3tR3]&30T/hk<KmjMe+ts>D*$;lP.bI0+GpFL3WR==Crr9JmAG(2F\QSAN!kO@
%:sJ$3GGbVUgfUq=nI^k,6Dq3*IJ=),;.1Rp.s8/BQjB)S<q:pZ+4iMSB@)#/p<0M+Zr<;E[1m,JZN*;aJb6D+7Y]%mg9$tn?_+m[
%bXIW(MbISn]8M3E)^m]L)alJ(.Cn7CjHr77S:li;aN,5=*Wk(EU@jZB<T*L30BLV#Psi#5&XVg&&Je2m0BW^_`+OskqO/^M+1V(O
%+;^./b:uW,7mJaDBaQ[dD>lOBe?\o%5Sh`f_<VL6]oD5"8?]o\&LOKXefg?l`_:/$TXb=V[`0.2[e6DRJ1D'`7r^L"XTqqIf#?JL
%EtMGlFqN(VP(OWdk;*8GI]Sg#f'OmC,C#bFFEPHlUPjXsK'fm)]<>\pOTKA=nm+QQ&J-9V\&md=k"MIJ+/9\65u5A0glglcX"[dj
%HCM&)-.b^Y#H(OUO0ZLj54Fg`.h%VBdL`3Aqf!18B113_54YcaOV8kP3m<Ii`lo]9=:ZBnBY-&QM8F/1Ko\Q`8K'3u]YpL,"H[h&
%q[T0Y#%C'Z!Y,`,LM\c"@<`'@2N]?t6,p%'eO(23j<8K)U0W,dQ+IQ349YRYCc60CoahJ>F+'9ub?8'`)dLm$MkZNbF.NgheNm<R
%i?09>NcZH"`:ORBVr:(dLau:JLQ%qTi?-;%n..4t"RYegRF=B._u>>O$<>ma-A>DjBcQQW$kE"3+-sT^HPcDVhjH27Wi1DDnO?j"
%19U!Q%f`3D^h[chOA4T#lT&g?9m"If<tmIr_7DZ@P^&=Nq.?q40ZR=';cNdf5][K!V-Ha:'_t<?$U]^/ZkG($[`=#F#]-jlD2u"5
%)a\#$\Mc\r@!(g6\(R%/pN[!;"j`QM"%fn%qgWQ2?G=4DqBfP+Y"5fiTg+qj+-tEq7]R0?YVS]<NR"3NW9h&X5b(e+10n?gg(=Aa
%01ZAG%T^s+JQ6ZnO1ub7;9m$_<':B2A1/XXW3jD6<<X7uR:N>A5h#d>6/,P4S%QBm[rt/O$!qM+p#$tV+.\Xp5Ee`&JOC0R*Mjij
%6KVn8X:I\LZ0Z!g;TM4h/>-^?g4Wmk/FKUf#9kq_$ZYN2)`+9c(u9fi`OPiE<i!g-OjD\9"./DRemQ7@pZ32f(R1\/"a!0Crj[TV
%?N7MtQWn8!+Q5Lr6nr$UZ#pNMNA6`g"PepB\fh\<rYNSh/_E!J(@'rD6=;\PI4k@HRT>iXJU?<s)YPL,b$WVC,)Zg=eE\[0P"*"!
%$<jMakbNBR6>FiD65kiB%5DG#J7_Y\8R7gk%,$P1m&a;Y\1b*<:lBN8m_cK%Q4j$VefD#7hZ?ukc]uCP2k;ii+g^qr[q'f@p?<Z]
%m$l^bp<im`a99K'MFEab-JtoX651I!/F[T[/_F-VW-+PAN:o7PE6[bB8SXa=P[6eXTLJ`]OKpSi3'jp41Q+P`l/le!4Nh(r-2t!=
%L&3jGg7FM%HE=tcNq3<XDQVUp>cLXL'usAMBt/d7'!j9_L<8_;1eQXM85WhuA4P(TegF:"H'Tq&Ii^g*.u1<jDAK@t/R(%Bf:$6A
%^_-!Unm7ej+>L:(+.2]QFC/?p\Z/-@ffk4[7la2?E(;mV6c=!LeX:(LLMKe\:]66^)HRE`B^e#M[P[c_("D-apbWV/XO#p0'_d0j
%04,;=E6PD]$;ob^-N8/2:,8I+2*`Yd'CnnS=Fb]6h@[EG?l+3$_,*UEY&hgfiT*Ek%6Er&$]'W(]G8pXNC=^+M3Z_%E98If^1GE'
%lGcqU@O03llmGH@UbespI$*Ya*hDi?RHH89+!TEek6Y8oHj%uh#D\1*nsGKXO(U?O^-"8//Z[*@h0^5dp'R6EO5ukO\b)JnM&H!#
%H#!S3'].r;7$#&EpLW)0K&l6eA<Lc`m`I19]FTCDY'c>u/%HkP7YSP%AA9i.6eI,?3>c>.lGrdY0,orL%%?S/I.(pE<&B2T9Q]0h
%=J$&/7R$q-92UrZ4-*#VX>V6eSZSQ1nla-Ef\$68R\1cLak;cQ8KAdhG`hZ$_5i)[l/X&a>Raq>mQPT5j^EjPX&7%hX%mHYK=#+N
%@916Fmd>g*5drRTHle'm]$qb*X)q1uTK>7;44o1XG>*R-dc**1ksm:-R23u5+nJ9mopIXV"89:fbs[u<OkJa0ZOeQ$iO_i%NVFnf
%1Z,sfiLHUh&Ch6tU):ekQn3u^?.P-245:KmQ/65+)*Q2)\+j9k*3A4,g,Fg1C#'m6*:Z1o,p=])H``0M@Jt1d#rjHB4CI;\2%Gn[
%OX!]mOU4h>6u5l?H].5D2tk.A\F.'k/Z=fL0<mZNnJQ!L;5K`$[lq/YO?'a.^_,=BU,eTBELddIXTHb<@tREP[%MY/\Rj(2;Cd]B
%+K6WcCiWFi_JOK"eTLWB3SQi>h)D<Bo&'el91MtfO,$13:S>8d8Qe<n=gpeAh8A;eU:<LVE[OTSQt`]:aE93pMDpVWZo:5Xm6PkI
%n+BDak_-IpLFq/pDo^ai2HCP<_jLe)F^B#brrR)17tD_m<To*1guC2hDL8e6*>U-0N=tFE!Q"!=8S!^[E`A-l41rU3'U0)t0J-*\
%aLX(qdC5pd5)c;7'c^XF<afkBl8^\Z)p<5)T?E3OHf`:i9^m]CKF?H;U4t:q-<_3S?#8HDH+u+5*k<Ip7]4ckC[qa;"_8]Xa6@hK
%LX`)p4NT]C1WBDQbU4dZ[Ruoq'oN,fb%<XDBcn30EOg[&R>/kKGCl>D`=,t05KC-:jdu>I_5@]Je#&2Y<NoB5p:q#PI[]XdXkGqj
%4:@F@]46"UYu.H!m4Mp]+J[::K>i"")bso,.;.p*+!duN,*Pi)n>_[K$UCTr80!>@H==<&2U7ac8/_gCUQ-uh?rrnOar0GD>/Z%a
%iC>peT&VeMd-VZ4NJRnnmpf01n1%pEC&3#%>@puV$n=4JkH\]-A)\s:_g*o78/E;!\q!j"K?C_6%UhhO%N'h%[ien=fq6`:W42Ik
%h=h191;dQC+D7aKh3oJAkRe!>;%[eGc_,`UPY89l+fGF.-!Sm<DLZP-$b:)+bDiXolBs`Fg0J%?\C,GS`%5MK(rkCf`@F22+Huoj
%G$6R_(B%4U-i)0QONWAWQF)J#(MO<=p?AJ9s+U'UPE+"#h^9UK+EYD`(M"Sd@B<>D/PcA';af!jA0B%eXIq:28D=A_mD*;YHB=+q
%HQD]Efs2H0'E1)ino0rL,''N\/RfbNB>La*\\f@ZD?jR4g#[r.B<i#CFE7:r*%XAnlPsC3?3r(=GkJ7_S(rgiR#YEp.XoWc4bLc#
%U3F;$;GPN?6NSgUX#G]5L[^tIO\.Vt55Iki`l0B-[QMdq`WNsG@g#G"W!QM3ad>\7((*8-4W:!5&8#Gma^^[S"rg+klupLE3eLK9
%Tn"kVN:!@OSV1"/i,BB[MS5[9XjdkCJSJ^N*<Mna$;QoMoZH/2?"Li5P/u$hP#W>DcU&1(kZ+(bibM?J<C(a+nuT#`#@q?WD,q#-
%Ou_#q5*a="]?^ju:,0j(*lM+'VHtQg+)&[s>ru0j&(?:_mOGg]fY=0gR0En[4[YpsfgB.;(>0_ElNG)DFBAN"%qS0j<[&\#JPT3d
%p2Z'XNLrL#%D:dHrAuq"%V4P@i?G%4DFP>0Pu]n97M%fM#c`,p"*kU5_W]8R-\9!#fF>!^+RUZ8,C#bEg2hM:QfcWHZQ(gJNJEJ3
%^a1ESc!^e#eRC$/3,V:'JL/W-"R>2B'V@g<\L#RY;k$O7#5auDVdYe7$J/Lc]FTCDUtTEP&B\R(Vf"i6_W[37caZCGU(JL_8'b`h
%N'2$(VG?("5_Lu**EljkMjDa9I><AI6s.b;UhY;L"IbeLRnW//32nbn%A-;V#,%k.S%W40.P<L?$5/nl;ZK0cUhGE<ai/H.Y6MiP
%6^)E;'+FGg9BV^iihYum0Ff)rKUW.p+3[%3fUc(^T:BJ4+1UVSMu$lqVfo",94S@cH8OiL.=;/us4MpfSCg(Bi>oc#">Vclo)k(_
%5g(!Z"tEo7#VST!<Qh"#<LVuN&A;S#JBST4bfm'7U-9e<%6:'e'',qXqZ3HWS.%,B,>po4Tde'Wo;BGh(*juuHN^N.La@Y^Ko]jI
%0cDp4"dIdiAAb'V5&*!q#oo2T-B/(TA"2cO!e[@8&&?%'b9t\CDTPh1/NP(Fc+V24=#&FDYA&XNo.083?aVbdgR(2KLS8@VaW_ZF
%6XnGH>9WQl?CV++0=S%U*[aeWN-,%+Rs=opH8]_PCERkPZmt[a\geP<3EAtcWfsme?EuU,9Mo0\2cVY"gt<Acfl2,\k57CJFrBpX
%Yu)O2*s9$ui71*"]'RRtI=+JkeY3H7Z>(7/Ls.K<?-CIMcn["h_rfI"8S:WM#L:m/8%<%;?i[s;edOVn@!FK*:h4X80q1.'A@@sP
%]ZTXJ?71g]4>PgH(EW</LH"f];kn$4fiki_SmO`]1GB!ce<"P,F0aYqg,UeKWXW^)Q!KQUiXs[e7(Q#+Nh^OB.ob5=7a7?C7++rL
%8+8Ql%^SfipB<>ZDC_T6pES'&r*Xd_a%pQG>52S2<PfB8`Y:ht8pET2Tnj;K7/lU*^<8*r/f"o-GpTG.?rH_TrI/D>b]V"]q3C]*
%YHU/mQEFZ_DumrV9J`A]bm]]MAL,bu,E,kA@36FW/-`e<)AT2:5E4>N,Ku`*bg)WM)Cf-W\gIdmm1>3JM.&1OAtC/iO3K)9ehX;n
%Z[t[7a09'\jf>^sD`VhuFBXdJjBk/0q5'u1b5unf#Kcl8M5ohFbW8"Y20@N5BfkOBK63`"2:;7^],f:4ed>^m%*/+:"iUM17<l?h
%f-ONQrn-V;XGsA5nd!#7Eo%1]DjWWu--XFm+mB)+`aGe]e4n22QD4UR8)tc56JCO4]_!DdM6+]$i1qq*A$iLD=S8a9h"l2*LCj:C
%eJl'6Jel^#l+2C6qT(A0CcqB9EA"_$m*uc'-uOT)$Yh#(]q2#i28=d>d82,Y#05@S#+#OgCtf:HO-I#,Q?e$[B.V7/dcd=`&>-ZT
%=hEsqWo7qE78PC-b.4$]Q^S&)"B@ZSUj*>F;H^ABcd4S+W!X)+;9+8o:$P1$!jO2Y`J:NrORko=ok)=!6C06hF!>skbo!@dCt'R0
%\>U6Vm&F/YrpWZ^'s,J#^<8*rcE-"(a0lAgBl>Y4/AR9O=(<eIUQm,CIcU@)DSt=^E!7gu>?$lpkd69nWXb1q7VdJraPL6:"ng>D
%[ah75GtAr$dYaMQ7D6)XlFn]d0r#hhJ>a9,6-aK%c!mP@f8nj31!5l>\q3O!F3^5)?MY5q5qF)\e8>SkblW3V0gZ*q3f?'4qKaoE
%"je!T6@d^Gk?)3%\^`m:JjcR\V=!%[kR:c,KQZRCFS/%#9%RV/GILTn@uf@uQZ:L`7;0nb"Z;Ian#&<I`6eW';puX]-gHF/_U<fn
%Z<e)ql_["E;hDH$"?6R3W]3+nf*R+)bh:"73+KN,r$C;90^c"+9'3"sE5:fPQp_:\kF=)h]#rtqcjhc$e#M!lEikrOLq]4Par7%T
%cERa2;ub4>a>k\NMs-E@CpB&Z<BurtJ6=04*Ia-SdK>"+83iVeen1qg8oDJTJmS>?A/(pdB^(`1g[!dTUdtarGoXZd%/,bLAqaam
%%4du9P<k0:g(dl0;.DO'hHN:(:1G6;52>atK$75G--sm/PSkFfK#0(8RW)=>+,8PU<q.<3,AS>Djb,lF4(t32GI]$F#LN]1UY=u^
%<#<o"+P>=2WQH2?W)bgm(<#OS;Jh><##,o\=pE/VR=;'eXKVqt=WlEGaIp+B?*PuhJpKU_U^[PgC;3pn3Fl(YQ#0;^#drmNA!<[K
%Ij8UF@JUIaWe3%n.QW3Z$eVKm\cA<aF9*0Zq4=!3W_a2M(+g&&Y_&_\TNJa[WbI9a+RT=JA[!_o.0D$K5oVm_"UN^($b-phFN5O*
%$12-<:]rRbC&gpEa.d$hL8\^f1NFL/JV/pWJI:feS]1\55Z7e.6I>K<*"C4L()c.dObu;P<>7sMe,Vn!;?%#nP%ju=;r"1"3_qk9
%mmp#-nR'S7MP=Q8*s`GE)f?Q(=TrAhmcrSH;H/<8FM"iJ0iJ.@IFe/bjtmm4PsF!rIAaHaZc"K*`;%K?!#n=PmCgD/Z-O,C3lHS[
%]k9Ok-@IE@c%MA6>af2kEa5+ZW;A$K!m3d0Td4>.I1?8pCn28niF!lqgJ82j-O@j6_4?[C6#cFL;Ql0=CiQfpP&k+\kb.\VM'C'-
%.75(kJlE`9NMdFE]Hf8)YcD/0?\-(Y-N;88M=1Q@*2BctHf_U>>n7<VJ0(2onkS7JAIn>H:0%%N77d3A-]m4l;;mH$*t]MK,<HD\
%VO_N;TP"U1/_V192ZFZ5LEY<fRVL+QA-sn.8JE0A->E^qW$L#8kW)hB\Ddp'jk8IEFs0QEX.m""7W!Wc%>J[@f`>UtoMj+tDS'ek
%(g$l)Lq]Ra+OW3>%_E^:Wl,Y%T@JP:o6YK$%_sR%b:QRTbRlKhX#s$1"#h^`C1kh3gim[*QCa$c\#khSjs3mBI59ruBCDW^GhBI/
%,MX\;&0DY#(f1:./Z+L76sBYO/m<-ep09UaV:JII'S0=S:j11CedI1j8^,-kMI9r39(ou4]5D&h%"^p:i((J6ECdWoZ5pfafm['X
%]b.h%WLIfn#!$_Z-):Qco-BRD%7)Qq@=/AO.jZq$qE:<kLc77D%I#,`#=Xk'r[h9VB+Ue'-4l4B1'G_6+iMQtoU@ZDRm`,lX4pLs
%$EA9#OYAI=QQRqR%=M!`*\#o''1CRbS3_N<aDrWa1S2Cr+^SUoo)"RFI9N,`XTa'=K*R$+g>BI>D@K0bk(ql[*i^MrNfnTa/LF""
%6`PX(khZtt2%Y'qBC2/TU9$'_[L95AfiC0']?&fS#48Lep^CP'Z=XXU8+cA;/aQk36u6p2bOdTD*3[S00(b/,Z,>cO)>">DB.tGg
%TX&QY+B=2Z'Bh!h06Gnl0M>-d$.DCPbNEP-rmtA+\.9P`2GR0DdpbNt&>lNV`J(/E[)Wt8)ceZfL^*=.2_.P@pd:,#<C"!X?sg!e
%I!qGh7>;il"R\FBUR!kb[pWIV,XGZl]'ac)`51Lt/1JMmMPbqUi])Nk"V[BY"f]j<[rDqH-M4B7;=9!'B=KH#L@=reNhC8)[QB5(
%QQEhHdtQ2*JLiLO#3LL0*L`IE#.`]V(hmZ$&i0lO-l'fX-]'jRKm1'Rd9!I]*0ThH.Z.ZI-E3I;;5V9lE8XG2@N\mr;fJJC4#4#[
%8.<'l7o2-E.!`k;Lb<][SIdriXApqL2D+TTfh#ZEMN.Fa"$=1K,99[dc0ad>(:cS#oj]5N%h_1(V0F?XbG?&kk.#r3YUD#4`HGn`
%.a,i+%"_&kOj4>^+)'iM0+G'6m/JE-[3-*@_5)r\;Cq0$PBg[1Lsb#g^SqFc,[Pf2kmq&cHp-dll!An=n<M]j-:B11$=]+ekW,.5
%[r7@!(M.Ui\V=E[fqaq1W?<LIVnul*_Dg+j8_[;lD,P?XFgq!!/n.Fm;t\+G%3j!H'4BXAK&JFETj9>M'IA@HAiq4(3P=[jesBSB
%GaN7beVCf\_K8L.$^X6/]u1?4EerrrBZrcsIUe`eL2C\Ci*SbB7:M3u#@W<@/kgq>Ld3MQ7H!@@1t[Nd1`d(W&+dVLnGGn3@#BQj
%mML]d$4`A!.hdmHC5!-]$s%Vha=4$phOJ:oh*QSB)ZrqHdG8Qn#MKmN]YaDoj8ObaMD;;J42npecdZ_6adk.TScN7<Q:Ndq2l7".
%J2Zschj*0/Y+W>-.%&t?3Qe(i*#Rrm=L'F=@NcJqh_.[B<NgP]e2uGJMJ63J;T5u</WV/EjSr0:Lu;pSZHOQUZ%BPiEhjtO1f"-T
%O"M4MO=hE?9TaJ\.<lTY?j#p[5dCSJ))KETd#dS+fU#eTGS#Iq1[`BEC/ZoD_c/J4$jX+Xaqf*h=mad7![-=$&Pr<-?F<*,U"'1<
%U4pXXT@U*7&k3_\kDKg4K3&5cY!u(A;HD+dmjh&[n*Pj-0sI:_b.$Obc;ZXdPTW),Ft7@`%aZBaV)C=''XHWp]G4Bt_7<_P2l"]Z
%l[0d6(Vqhhaf<UK<&0hAK=jM,Rn-dQ9`YZ7jMuWBkVDKW1f]4`E:6j>hk-"Q_`lI6ke"X[(Z^?P<QV1<PH<o$,$6!gceqfV^K"ge
%+YI,!ndERW67Se:&;WS:+&tU\4BA^BW!1X5;u.[N,?G)&_p/BVFl%\,X?06E4t#>Z3DJsr'oeOW88mQI3%t$fQ4+f]RN/\HKi82r
%!R4fAbCMoQo8>t5/s6Jbc8Z%Tm*XktZj7:*oe8HEq,WFs+aXXN_%j&F6n,ILr*i[27?A;30$024<#PECekj#4^Fdc*,.UG*NeB4.
%JZt],9@)rg,%sQ-+.T_Lb8Irf@,MSr<eqrS%IM.4gE\Mo:rBYX(/S=&HOA8.E`d)"Hgl9B`I6YW7)B-HlYSp5P_o%].YT+Wn$[tC
%OI\5Ai-jYupB%7X/NS1\NJ$?Rcl`XZ'%`&iplRZ_+(k+B2:$(Xdp3?[OX.Bm%89ES73Y7GBs1[&Jd8T=j9Sp?#u+B=$T=;!=0X&\
%?s6(L=;(I_`Jh+6ZH&,?cmZngaEajBWLAE+$is4T)W#ign2JPn5QQI"kQ4pI$.T.1i>Y[9G>TN^$tXPshW:%k+3'[kc@1@@46NHb
%d]1omG19Z)=9>Rjh"JULC*q14%V'g88`NAt8KF;)kcOut-D0b(`LanS2eT&AgMT5ak>qj,C>`V2Lb[3ENb-'pQo'[/LZ_Jhg<u]0
%[(h:@l=sS"S-QAV@hqqa>1U#K5@!f&Om`AgH^]"gWq=;1F#mC2jGrd8R+$-_cr8@?-UAk#2G)f]kXQ1t!R7'.<8RIP(t5G!N?7,N
%W\f+k)VhY1_ag+oG6Wg_NO4mu`cr+EF*(E<*2tBT.F(Sd$p&s.0g.h?PSVO3Jlbm^D#,?!P23U7,3usAcqN]d-BP*H=6W[.[,XsJ
%I(?NU%s'/P,*WjT/L(B41s4L4dEV_B`it/*0cHEjT<RaG!E)F^;U]cFpoR_=?j/Cn,^j_>,,BlcreL`0I?[pce>f0#EjArA,C&8@
%m`4eoarn&JV3fVZpo?:\V;#`mZ!@HnSM-'h#_Y?fR5SIW5b"&nS3\WG-Nh^!A.PNh4Ua0I74cM7W-4EOjd+7'i?8(K-XH!p*0bL!
%0j_V+doWg+3??D2'cA"/Jlt2AX<%S,<)cCRDB'>8g(>-6OTT8eOXmC#+J4SH61N_&_tl[FijT.G6]JZ)*JWIcJ/T"4?&FFLqi?o5
%83n?5\\%J(>]-[sK,DfmkfcF-W-c[P?lX:tS%$-:%HKP(P$(aU7i2$-Vcul_fue_Gff2?>'K<-a7(mf(H<#-p;i>-i)s5]Yg+gAW
%9m19TF1.@fU[/mWcC6``.2e[B,i&ep"?)Zk+B_Z)[=$G8:hT8YJS:duie3G4eMg@_%l%g`=HiWgRtAQlAcZ2EMaC.Kc/q.siBD3T
%[u+`Jp9P(sV+TY0O`0?fG(H"@.Wd!'>EqQ/7`Nsel:'6<OdV:sjrSbEB]uY>=ilh5V;iA;?]U_X),s7s3EKlo^cI75:5),*J7&AX
%4H?'Pb5?_\Blm3(jhq`Cm?)37k#Z+h::E6CB@%(K>!+l&EK1Dc%n^(dLE3opU=8'>5np0`Bib[UL,/00CiAI[McAWK\>2\N8(h0c
%aR`hXA?UDXfqE/V>t$a`jIh0I`oB<q;:grk9A5Xicck8T%PtZF*>Hf0H2Y*^9:_p8ff%5I4#H_ED9e[2I.=?m;mJD7KG/H[<b_la
%Etp9ieLd%]$<@!B8u1N_.9AeS`ORGZC<+O`Y+%:(bJT9AQhN[_8\(!1gn_jIZcV2G+>#e!@WYN95jJn:)_G4_l;!^QK":Df73RS6
%$#WMF['[b^HBk'd-K'iQWu3a8Rq#I*ITF[0HGFK[PC>G?E7&$$CYGNH"O??k:22W*3D-IZc=mt+Tk`?H<$q0^#'JO_ODN%O,c*2,
%-A\tZ;?pTcmbno1?cF)1jh9a%L.KUQ]A+%^KA?-iGJV9c@DD-e*>,>Q=2C>egn`J^+Ap;(fQCS@@l&A#5j!HuG7:gYdEOR_0NkG+
%V#G>VHW4\_mB4C0`LCC'&tc)h)Y\&>&AnV_Sn>I<-l*sRW!X[/QqYfW]7.T!L7sb76.4bG(1ZALQR-4!rT-je`>+m5_,aAi&pGB^
%CXmG@_L:@bMTmY7=>@2-.tn^:@EUEEcCqin.4FOi\DId$=3=rfl30#B'YVYVYT>&*kje9tl&Z5Z.&"g!>`]^+IBeBMeVAm*=S*[.
%;H1JTY%afPcGE+2KV=BII918ZU#A-F`Y/Y%279B"r":BCdl+R[I`?Jj[)<?RLk:t?!1sbcKGLr7+pl,*_5OW+_81n8mM:*p+X_`C
%Ph>fgBs5]!Vre7K^dX<WKpV'lX61gc63`$58')"7DcR"qIOa8bLj67XNhGg<Unu1lK5j,`BWq!<f#^SF+]e5ro]d;N/HD4G^Sl$3
%]m947<=>;.]BFFo&ClZ0'h5M"?,Qd%n^e5l$_(H8\=6X?+gp0<GebhSeXQdspB3'dmC:73JMSC6&CSQYXqJLDRu/V6G7pbEJuMD5
%B[?3E<=j=m@X72RLRYl,H:)T_U>gO+KU4Jm<bMj8\4;nM>?;\7F9_,ec:lF"S/0OR:/\35:fsG?,\W@XB]e!,ABu,5GI09.%T5FN
%G(W_`RBb3L=gjrR8rGDWI=O#7fOk_`KMD&6bC-oEJd8$hE`bB.$SCMJgM:ai"W!VMMB-L`8MNNPLcP&T0QDu<Z,N\pXpqGXTJBt?
%Rk*q3,K=/C744#b@*+ZQj%u!soWlA]j)lp5VoW>818;0c50PB]MsZ?U/Bi:eAFRjXX/a)8E(c7b;IM,R'Xsr3;KP/AY%O:@)<[bg
%0"1t+TYfcjTSPF``@[)i3W\nd[\E`cARM>\646\h"#GR^%ARd+[@77rff>UTb(Ub8=m[c%]#oAM7Yg5Q87GJD;7(I(I2U/+PDbGa
%D[.4>K?Ap;a/80/=F&\f>:iRA+N:ta$=.O$gV]OG<45B1bAE:TTs"\KrF)oXF.AB\e=ANIhBQM-DUdIj,BfW^Y+jR#J;1B%3!..4
%)>1"_,ssk+^WiFBpr'$q::cj"74.@V`E0'+AAY_9-+?/4f-DXc<[?S]iWGoKYr5$56<Ae):NO/pCie[KA@>@9dYEM5L;<:\0?];\
%^oJbsGtE,!8p6h<E$)Tc7Ye9&Zt2]3D=C[JS-*:k_d\X$qnk.r&>gJb9sGVSHNa$(k"&Rt"7)R&3NGiB7s(_7\Jd^(6!B*kn(Zb*
%(@WfadEn_<#O*[)HF*8>iZo`D[taC,0Fl`X`\9sk>*E[J-oXJ(s+m>14X=qe@N&t.$`L[jEA(;*'JH<ek?:BD8CNe)iP;D39):i)
%9\<?dU-7Xn="h"4a?t8&M0:icm;bRUY?V)N@@$^T'"?[R+hC9A*.gTmU?V,#!/8W9AtX#jBcUC3';?:>pJQP-1-irXCeg+SFe+_F
%r`n8<@AX'_Q>RD-97HblN0(W!#kh(&S&TO7Y!#,#&d7!Kp^h5e8=G`6`JBq$.buERcHb?Jo;!Crs)*u4I(cr+pORBX1^/_b?#aYK
%'$U`\!&6D=3RL^ePp2+)JeMZdBDCh`B;e>k%-%03@?.,*ptdP??2@9)g')m@c__.cR<3o_YEBRD;,WO)WM?=Y=/c4/3@9_H['X<c
%am\=l.qn?>h@,(N!#9(_kTt=8p6d,jk#:ba8^U`&:CoWR5c_95c=8gSVrbYJP/.6j:!Ado>$^9e3rlVTZdt-o0C'.1nPXs],i,qu
%lbK_82TLtf0-`QHARG@g>Vu,&!V'Sh-20^Jcfm'>UW'e2<@7K3EIhE6YmcP)"ii(;G)5lCqu";^Zn/&O"%`4TQB+JL(#^g`G["1M
%!T%?O(6B4uC)o/t.nEBpI#$bs"A+i9mQPSX3+POa>].Yu^9@8adQ.!C5ZjPK(qo#bVUEZL_dK5(YW.Ze!^]"g`'*tM+f5q"2]mGe
%]a16QfooNhPbY;p]F'I:RXno-cp]+0j%AE7[#h2T84+QG(d9G8L_pn0an.OUAc).<Oc6H\jjo#HN+JN%AeA6QO"@<D&'cs%<X.'k
%Og$$@R<,OIL_FHf0n[+%[`H#O1lVT-6aMQ9I3!C;XD>oi)kM#7R@LOIEM.^0$&u$[)5h;71b`\A@GkTaKLgbeXu_c\L>=\X_<VL6
%Ws4)obiF_s%oN0`N]!.SeQ"%,ctm3qOep<MX-47c"'=70:MW+P@mkr'RL6aI`&Q<N%1\h:JKX300W&fZ6*lPBnng/]GPK0O1nfQ&
%"bI`!W*OdHQl<t\dL;_64e]j39sURbqQM3&30)q$N_sAK*ouZ*!UCT1KqUDq'h(J,V=M-q7lA[+2!]DH`0)V+PIRA5eXF%P;QPlq
%-G8<G=#mD@0TWcd:`4m)I#+cjINPY%E"UmeQ8B]/667B3B+%iDXm!;"$b;#)O/.OoP*!(%PO#>SqZrXED!.--/`\MLe9`TabtLf(
%2s2u1g)rnR>Fs9u6f@T/[(5r-/TE6[gbaYKWKT];6lVC'URK:nVKkUdL_kTn:bB^Ng9%T0Z^FK@%W#G5qnU`Sjr^YJko<a0hhTjB
%Oj&osf1?oj&*o=]d_]N?:Z*piq2AW!R6%IO%c'ZfK5B*E_Y0RV]q7SHP*,PmKAmJ(J_[)*7Yf+/mCq7eH5H9*Ig1*0ILNJ_.iI]I
%+CN4_c)/Rn!u7W">]?S3%an%rW5_-T57S)^0)+In$m+PYetB^K;1GcMEm$?(%/1ZW2jL,DhW&S-$E%#GLlJ)'LcS2c75#@r4GWnE
%dRoOec8s4SpU".eSgngL]okfj:/Ye;,)^(&rc<JYPq]5<cBE0`A7\`i(eQE%SNn4k9TTjXW$cqU;WfHf"U9!%-[l8"Xa;=G$(*#N
%g^fh6+O_i)Ms#+RAd<*S^WK,^^KSg+X)/*\IQ!0T7M"YbiU_=Or#)<DggpDo:6gT9(`C./KBFT_DfS@O;HN?;.VDCYfKndBY=p@9
%NnPdp=$hp81R5:sC,(o%6W"b:??gV05geKXn':6?\[?)]@kep4fuhC6g:Wa2Zl8[umA\Dkc$d@7ls<@bB4\hSfa<k`%:oo/UAXut
%C-8D$R`U<6CHSM+YCl0ZU(*R@QZV*_./'(FX!M+e$Hu&T](s2c,WAY.C)I1?XTZn$M0mZl[^ks+ap3&G`$WJ>m8=bcN`_"]!btEL
%Vp4)A>`gG^clg8'\N@pqE^O/gLlQqHPQ&=_gq:$$A9N#&3mE*%ZjGo;!pA_*Pbp9i)UVtt)&f'A?_d74PEGEo]J34:!Wtqhj#IO*
%%oC]DRguQ]?IPCk,G'^4H[>8bC-[OpKMaPEmLNE/P2F`0*Z+$\CXjKa&4Y*n@p$>(3agn@(pjc/L=<G=(jf(EX+HLLkqdRT6&pJN
%"b\mc#Z\s5plS7B_`geDNZcUlk2hWPoODM)$r/^hASf&!\%_8Tmlb@kQoRTJ?P,k,kHF>/SHZW#=@b2Gcj-+te"n\E.JtkXLE'ga
%oat5$+!G<-A",l9P/9B7m'NoGrG2\sSmaQD=rbAorY681/]Jb?pnjSqLP7[>k%!mI@:Q"tN,Ok#+R6$U8J%/Lo6sf6/#\K/j-2:D
%Yf@6jPn#]Pk1h2)16=pE8+:79[Z]@5n68`oiR+fralC+VXDL@T6QN:H(<d%OG$O<I^2GoP>1"\C;a(u+)BC%#j@E"4=uXn*+2uO0
%D+,YYJhc9!\\#3'0"6N0!&cPYBkm^;X8GZ,kV_I`dk^-n,0V@Nf3(KUU]\!JB\/]m'579"AI&LgB>q*j0c5?BAgB`RNp3WJ*,nS5
%Z356G=(H#V3mS(4$>CAdY>2)S!6.CdW;3GLigKi73*F>WfQZl:cJV\f&k"KI?MKu\]&!\[:+CED#@?Vuok.b0Fiu,sR!*T8k6]KA
%n/O.m%jnb^Fl*#HN+H<]HDtT$`l'a4,U<T<A+,a6Gs1XeAU+,0ebfiUPKL2]0bBn-7N(S1RSKX'V01Yk)&uCd[YaEYBssa'Y?;Yr
%G1T"A/N:JGJQk:O=%AqP#W"N%T=0:4nflgk5Rbg!ern(pAR@]tU2Bm$HC%h[I3>.`X\TnI-U)I5\WfiNjbqG(RZ9tsq%o@1%$3R!
%D)R+hSfEP#l3?dOec.X]oQl.sc][he3gW.\=-4A5Bm`4MGs>2a%bRon[/+@.XH,$`\<'Cb0=u/WMN,%$PtBddM$n07T=N6D"&f]a
%5+2?X>%FQ\5ohJNiojG'WtN/c.UE:"\L"@fCrcjN>41Ak)bP)TeTrnqkbD$EBpt2KW1k0:kYOrZB<afY-LLMAe(Q1c![pQQ/#^jh
%\lH4l5b+,B0^4=PD$`+<?C@N$W89-Y;^is.q/tmdRAUqsk68HP>."UGA*#bZ$*)>6]-(j%!cu<_7d8'KekM:J54s`%#2pY"i,o+S
%`<C[6?+5+#2/mjmo^oN$S<Pb04&3VmALqZ`Lg#U'Ekt=XCX>2J!RES.QU=c_+ZV%h=nb>J)kiJ&`Y2/+FTORu(C@=58mOA$"`TJT
%OKQ4J(KT\?aoopEW4+AE)J)BTW<TN2\.9SR1+DrQXnOURiP:[%=h-.EBn>;!+q@2$(m`J>&Cq>gU+H$N]F$'_0%a\'^&1=_Wp5eV
%($*h'*H]gu9uA#T5b>UCs#\:c9#r3!%/o,U0a"n3Z&6=Y?"@sYY;:uZm)HToIBb(`Q8p`Kifnb[q'rq]BCID&+^<65Lb.=nC`i(n
%))U))K8+MLSD2uq?@<4&/`/39LX%LlE!t.9,UF071U8'p,PWCjE^[LNbW:`1Uo8sRcUl*TQBGIAV+RPbTq)j?SM1Om`Nc4OLb'Sb
%nnRG4BP3>V*?NM!)$)WOU`0DE<sLX([L?gk<uW[WUoqjmNjMM`O]7[(Wb:g9+Jd+V]$>@0O4:Pj\6XP.UR#U5Kd:<X<#XK0aWT7n
%B`;!?pOTY+W$UnJrQMLe-9TNtO;+eO1-8adNJFu-6=HsP;i()8Y2E;:REVnT`@HhB8ne;S3i;7ZF@)45)JXYSGhT0Br\As]MeZk7
%k*T"-OB!2hn2c2.3dKb=1C4%%GSi]^mG>PC7&lb[q3j7JK"=f=RiXq<$Nl"7\LXtm``jc1]8EtX,'4%"eZ4@qA,n224%r2DX@GqL
%PLM3D,l'\t^d8u8gR1qG`3bR[`DMrC\JTIHZ3;FCqr,1]oSZ^$Y_(IE`/%FG8.P>IV`A,l.pDLQa$j]BmDT4[$ZuVqDmD_65dD=E
%Ga6SQrKVA`T5hS&6'V!!1e1A513?P260.)]O@?,Y7BhAF","gA8t;*$f`J+cOEn??;+8iReP);MYb;96mN>6Q3"+_0E)m(rr+!!3
%%lhLuWd#dc!uWZp,0$^]/8ChM0FRK?CE7Wo!h($X&])1!JQHEJTcQbBA4\/p4R11jQ?+KB&M0TT!forEb]i?]?JrZ_J4l:Tb;r'>
%N5d?.,C#cqTaHD$O/7Z27uCd-KCqWu):bnCoa>F7WD!e<OtHaQQR3aL)8N&[\p5;Sk1$k(JSGj[fAMHe"RCf80LZbFmJh*Ef?tQr
%%#")#r.huP0jr1jA0"m<6G_"iH7oY3dR(8hS']T5?d1M?ad21j1cO`)HR+RlX2iG3D:?aVmJ/f4"IKuSV<F[*%$UJ&jSp$#Xn%pJ
%rh.9f%\[:kAKV\?dp"@N-Fp?-6G8gQ[0:-_q4O,OAC;5$qa*#%LoL!"`Do^I=.l.2Ha*YnVI4#'4)Y>#YHR2"nN!_/ep`>6C`$FY
%Yn*G=P,#mQ3%k>sEs7]tSM_h9\):=tOLu,:S_UQ.2Zb#/bqngrfkS-:=V[r:LH-OmbY6lQQP:fU]mVh"h8QN_fr]lkRe]cM[cJK\
%=3ab_M;5bd^q+9%"_AsVA=fEM-Q"b9<[q1BQGc-fBjb-Vqt7`/%a#p;BB1et<So9>hUC3E>`:]%+GK!i1`Yj=QsMV<2'm&aCEcZ,
%:<p9ZTb9g2h388k.G[<caTXsenF7:4rNntH13usS_sq%u.9OR,IOmmhZanmnT\Lk=49^;]'m>k52[A>a;asmN*2MN9@9?CI!phBt
%=kqtZ2$5<jlhQdP0VGkIgebn)(`6PpjSqFO'%LKa0sDtR\om/K-<o;&>=O<@'cqK"E_9M+@YTq9Yj0jUO3Y[ZP0jJtqrs]"b`&0Y
%=q0if`aN%.m^1U*;e^4fL"o]_2QuHpTiV\>.Z8@Zk&aTBodtt-l9$YE0,1[O@utrfpa_>?X.FT4BE*AsdTq>U0qKi&lXPKnaI?<C
%P@V_-g,WCoUAON9##Jm>=KW$iE3Xrk5RRpaDMSY@Z5RPY0J3jG,-(8\d?O:j</"T25e,X7l6rME2SiUobcRK%AL_grU<!c(6VN[Z
%eeC9&'UKsA3L@f"7_0Z+9"N:n2OPE3#M:2f>k0:=@!1&em:!0?A.P'hk``i9,a4*jC'DUXJ^G1AWW=i2U5H?`dmRK=(0lZ[S=DLV
%6QYnd=D895`J#g-h*Kgk#8'YQB<nWKX9eMrQcgGKkA$PU82.$5c"[g"SO)26d&2G5Y7.dm0]?jjReJkoApX52'*:T[VIgg[Nd@iT
%4iMP8#['F?X7L.ts*$lIq+XN+#fp?#UceX`0-D;[D37i`8f4sLSR*Q^EE2+f25*R;=:smUER<-K.AelEnQk!Vlg+D:$*5X@YOt^&
%Dk^#TDN^*ZIN8".n0TYN\nWM);bpgMaSm#`:D9:3o`YokBdI&KYi3I-5p_\r"mdEa@t%gs_%stJL/7XiKZ/6d<YA][Zg(/G$hJS'
%0s<&@PA9n;O_[bd10&$lOG<Bab2'AS,gss2,[>>fXWc9l<I1XnW_Sam)Rmqm@HnICLqb+4N<q$K7Rkt,]1npcXA9Xl.VN!EWGP_)
%p\N4n8+H0Dp?)/4^&NJ0q6HN>T<EH_)*!(-4e+`B:Z&mYYI?G$c_mDu_s)2eH9&[/J)m43&(gFEbL?-3GlIR3M\,a+4uaVP5J4VA
%q#`M+.Bi~>
%AI9_PrivateDataEnd
